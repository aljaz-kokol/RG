
SRDS_zatemnjevanje_nova.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009144  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080092dc  080092dc  000192dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800930c  0800930c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800930c  0800930c  0001930c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009314  08009314  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009314  08009314  00019314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009318  08009318  00019318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800931c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a70  20000088  080093a4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000af8  080093a4  00020af8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019a18  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e83  00000000  00000000  00039b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a8  00000000  00000000  0003d998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001187  00000000  00000000  0003f040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019824  00000000  00000000  000401c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c72f  00000000  00000000  000599eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000968f5  00000000  00000000  0007611a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006384  00000000  00000000  0010ca10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00112d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000088 	.word	0x20000088
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080092c4 	.word	0x080092c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	080092c4 	.word	0x080092c4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <updateBrightness>:
//  if (htim->Instance == TIM3) {
//    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
//  }
//}

void updateBrightness(uint8_t level) {
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
    uint16_t pwm_value = brightnessLevels[level];
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	4a0c      	ldr	r2, [pc, #48]	; (8000514 <updateBrightness+0x40>)
 80004e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004e6:	81fb      	strh	r3, [r7, #14]
    // Update PWM duty cycle
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_value);
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <updateBrightness+0x44>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	89fa      	ldrh	r2, [r7, #14]
 80004ee:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm_value);
 80004f0:	4b09      	ldr	r3, [pc, #36]	; (8000518 <updateBrightness+0x44>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	89fa      	ldrh	r2, [r7, #14]
 80004f6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm_value);
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <updateBrightness+0x44>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	89fa      	ldrh	r2, [r7, #14]
 80004fe:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, pwm_value);
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <updateBrightness+0x44>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	89fa      	ldrh	r2, [r7, #14]
 8000506:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	080092e0 	.word	0x080092e0
 8000518:	20000270 	.word	0x20000270

0800051c <HAL_TIM_PeriodElapsedCallback>:
    }
}*/


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM3)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a13      	ldr	r2, [pc, #76]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d120      	bne.n	8000570 <HAL_TIM_PeriodElapsedCallback+0x54>
	    {
			trenutniCas++;
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	3301      	adds	r3, #1
 8000534:	4a11      	ldr	r2, [pc, #68]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000536:	6013      	str	r3, [r2, #0]

			if (trenutniCas <= casVklopa) {
 8000538:	4b10      	ldr	r3, [pc, #64]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b10      	ldr	r3, [pc, #64]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	429a      	cmp	r2, r3
 8000542:	d806      	bhi.n	8000552 <HAL_TIM_PeriodElapsedCallback+0x36>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13 | GPIO_PIN_15, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800054a:	480e      	ldr	r0, [pc, #56]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800054c:	f001 fa0e 	bl	800196c <HAL_GPIO_WritePin>
 8000550:	e005      	b.n	800055e <HAL_TIM_PeriodElapsedCallback+0x42>
			} else {
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13 | GPIO_PIN_15, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8000558:	480a      	ldr	r0, [pc, #40]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800055a:	f001 fa07 	bl	800196c <HAL_GPIO_WritePin>
			}

			if (trenutniCas >= perioda) {
 800055e:	4b07      	ldr	r3, [pc, #28]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4b09      	ldr	r3, [pc, #36]	; (8000588 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	429a      	cmp	r2, r3
 8000568:	d302      	bcc.n	8000570 <HAL_TIM_PeriodElapsedCallback+0x54>
				trenutniCas = 0;
 800056a:	4b04      	ldr	r3, [pc, #16]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
			}
		}

}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40000400 	.word	0x40000400
 800057c:	200002bc 	.word	0x200002bc
 8000580:	200002c0 	.word	0x200002c0
 8000584:	40020c00 	.word	0x40020c00
 8000588:	20000004 	.word	0x20000004

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 febf 	bl	8001314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f893 	bl	80006c0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800059a:	f000 f8f9 	bl	8000790 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 fafd 	bl	8000b9c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005a2:	f000 f915 	bl	80007d0 <MX_I2C1_Init>
  MX_I2S2_Init();
 80005a6:	f000 f941 	bl	800082c <MX_I2S2_Init>
  MX_I2S3_Init();
 80005aa:	f000 f96d 	bl	8000888 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005ae:	f000 f99b 	bl	80008e8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005b2:	f008 fa33 	bl	8008a1c <MX_USB_HOST_Init>
  MX_TIM3_Init();
 80005b6:	f000 fa1f 	bl	80009f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005ba:	f000 fa6b 	bl	8000a94 <MX_TIM4_Init>
  MX_TIM2_Init();
 80005be:	f000 f9c9 	bl	8000954 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // zazenemo casovnik
  HAL_TIM_Base_Start(&htim4);
 80005c2:	4834      	ldr	r0, [pc, #208]	; (8000694 <main+0x108>)
 80005c4:	f004 fa86 	bl	8004ad4 <HAL_TIM_Base_Start>
  // zazenemo casovnik z izvedbo prekinitve
  HAL_TIM_Base_Start_IT(&htim3);
 80005c8:	4833      	ldr	r0, [pc, #204]	; (8000698 <main+0x10c>)
 80005ca:	f004 fadd 	bl	8004b88 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 80005ce:	4833      	ldr	r0, [pc, #204]	; (800069c <main+0x110>)
 80005d0:	f004 fa80 	bl	8004ad4 <HAL_TIM_Base_Start>

  // zazenemo PWM - neinvertirani izhodi
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80005d4:	2100      	movs	r1, #0
 80005d6:	482f      	ldr	r0, [pc, #188]	; (8000694 <main+0x108>)
 80005d8:	f004 fb92 	bl	8004d00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80005dc:	2104      	movs	r1, #4
 80005de:	482d      	ldr	r0, [pc, #180]	; (8000694 <main+0x108>)
 80005e0:	f004 fb8e 	bl	8004d00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80005e4:	2108      	movs	r1, #8
 80005e6:	482b      	ldr	r0, [pc, #172]	; (8000694 <main+0x108>)
 80005e8:	f004 fb8a 	bl	8004d00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80005ec:	210c      	movs	r1, #12
 80005ee:	4829      	ldr	r0, [pc, #164]	; (8000694 <main+0x108>)
 80005f0:	f004 fb86 	bl	8004d00 <HAL_TIM_PWM_Start>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005f4:	201c      	movs	r0, #28
 80005f6:	f001 f81a 	bl	800162e <HAL_NVIC_EnableIRQ>
  // primer nastavljanja aktivne periode PWM iz programske kode
  TIM4->CCR4 = 10; // za kanal 4
 80005fa:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <main+0x114>)
 80005fc:	220a      	movs	r2, #10
 80005fe:	641a      	str	r2, [r3, #64]	; 0x40
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  uint32_t vrednost = __HAL_TIM_GET_COUNTER(&htim2);
 8000600:	4b26      	ldr	r3, [pc, #152]	; (800069c <main+0x110>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000606:	607b      	str	r3, [r7, #4]

	  if (vrednostPritiska != vrednost) {
 8000608:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <main+0x118>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	429a      	cmp	r2, r3
 8000610:	d025      	beq.n	800065e <main+0xd2>
		  // tipka je bila pritisnjena, zato se je vrednost od prejšnje spremenila

		  vrednostPritiska = vrednost;
 8000612:	4a24      	ldr	r2, [pc, #144]	; (80006a4 <main+0x118>)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6013      	str	r3, [r2, #0]

		  if (increasing) {
 8000618:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <main+0x11c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d00d      	beq.n	800063c <main+0xb0>
			  brightnessLevel++;
 8000620:	4b22      	ldr	r3, [pc, #136]	; (80006ac <main+0x120>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b20      	ldr	r3, [pc, #128]	; (80006ac <main+0x120>)
 800062a:	701a      	strb	r2, [r3, #0]
				if (brightnessLevel >= 9) {		// potem je na max svetlosti in mora decreasat
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <main+0x120>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b08      	cmp	r3, #8
 8000632:	d914      	bls.n	800065e <main+0xd2>
					increasing = false;
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <main+0x11c>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
 800063a:	e010      	b.n	800065e <main+0xd2>
				}
			} else {
				if (brightnessLevel > 0) {
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <main+0x120>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d005      	beq.n	8000650 <main+0xc4>
					brightnessLevel--;
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <main+0x120>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	3b01      	subs	r3, #1
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <main+0x120>)
 800064e:	701a      	strb	r2, [r3, #0]
				}
				if (brightnessLevel == 0) {								// je na min svetlosti in mora increasat
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <main+0x120>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d102      	bne.n	800065e <main+0xd2>
					increasing = true;
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <main+0x11c>)
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
				}
			}
	  }

	  updateBrightness(brightnessLevel);
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <main+0x120>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ff36 	bl	80004d4 <updateBrightness>

	  casVklopa = (brightnessLevels[brightnessLevel] / 2);
 8000668:	4b10      	ldr	r3, [pc, #64]	; (80006ac <main+0x120>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <main+0x124>)
 8000670:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000674:	085b      	lsrs	r3, r3, #1
 8000676:	b29b      	uxth	r3, r3
 8000678:	461a      	mov	r2, r3
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <main+0x128>)
 800067c:	601a      	str	r2, [r3, #0]
	  casIzklopa = perioda - casVklopa;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <main+0x12c>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <main+0x128>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <main+0x130>)
 800068a:	6013      	str	r3, [r2, #0]

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800068c:	f008 f9ec 	bl	8008a68 <MX_USB_HOST_Process>
  {
 8000690:	e7b6      	b.n	8000600 <main+0x74>
 8000692:	bf00      	nop
 8000694:	20000270 	.word	0x20000270
 8000698:	20000228 	.word	0x20000228
 800069c:	200001e0 	.word	0x200001e0
 80006a0:	40000800 	.word	0x40000800
 80006a4:	200002c4 	.word	0x200002c4
 80006a8:	20000008 	.word	0x20000008
 80006ac:	200002b8 	.word	0x200002b8
 80006b0:	080092e0 	.word	0x080092e0
 80006b4:	200002c0 	.word	0x200002c0
 80006b8:	20000004 	.word	0x20000004
 80006bc:	20000000 	.word	0x20000000

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f008 fd68 	bl	80091a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	4b27      	ldr	r3, [pc, #156]	; (8000788 <SystemClock_Config+0xc8>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	4a26      	ldr	r2, [pc, #152]	; (8000788 <SystemClock_Config+0xc8>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	; 0x40
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <SystemClock_Config+0xc8>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b21      	ldr	r3, [pc, #132]	; (800078c <SystemClock_Config+0xcc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a20      	ldr	r2, [pc, #128]	; (800078c <SystemClock_Config+0xcc>)
 800070a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <SystemClock_Config+0xcc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800071c:	2301      	movs	r3, #1
 800071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000726:	2302      	movs	r3, #2
 8000728:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000730:	2304      	movs	r3, #4
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000734:	23a8      	movs	r3, #168	; 0xa8
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000738:	2304      	movs	r3, #4
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800073c:	2307      	movs	r3, #7
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	4618      	mov	r0, r3
 8000746:	f003 fb19 	bl	8003d7c <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000750:	f000 faf0 	bl	8000d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2302      	movs	r3, #2
 800075a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000764:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	2102      	movs	r1, #2
 8000770:	4618      	mov	r0, r3
 8000772:	f003 fd7b 	bl	800426c <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800077c:	f000 fada 	bl	8000d34 <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	3750      	adds	r7, #80	; 0x50
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000796:	463b      	mov	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
 80007a4:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007a6:	2301      	movs	r3, #1
 80007a8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80007aa:	23c8      	movs	r3, #200	; 0xc8
 80007ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80007ae:	2305      	movs	r3, #5
 80007b0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007b6:	463b      	mov	r3, r7
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 ff63 	bl	8004684 <HAL_RCCEx_PeriphCLKConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80007c4:	f000 fab6 	bl	8000d34 <Error_Handler>
  }
}
 80007c8:	bf00      	nop
 80007ca:	3718      	adds	r7, #24
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_I2C1_Init+0x50>)
 80007d6:	4a13      	ldr	r2, [pc, #76]	; (8000824 <MX_I2C1_Init+0x54>)
 80007d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_I2C1_Init+0x50>)
 80007dc:	4a12      	ldr	r2, [pc, #72]	; (8000828 <MX_I2C1_Init+0x58>)
 80007de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_I2C1_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_I2C1_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_I2C1_Init+0x50>)
 80007ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MX_I2C1_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_I2C1_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <MX_I2C1_Init+0x50>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_I2C1_Init+0x50>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_I2C1_Init+0x50>)
 800080e:	f002 fcd1 	bl	80031b4 <HAL_I2C_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000818:	f000 fa8c 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000a4 	.word	0x200000a4
 8000824:	40005400 	.word	0x40005400
 8000828:	000186a0 	.word	0x000186a0

0800082c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_I2S2_Init+0x50>)
 8000832:	4a13      	ldr	r2, [pc, #76]	; (8000880 <MX_I2S2_Init+0x54>)
 8000834:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_I2S2_Init+0x50>)
 8000838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800083c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_I2S2_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <MX_I2S2_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_I2S2_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_I2S2_Init+0x50>)
 8000852:	4a0c      	ldr	r2, [pc, #48]	; (8000884 <MX_I2S2_Init+0x58>)
 8000854:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_I2S2_Init+0x50>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_I2S2_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_I2S2_Init+0x50>)
 8000864:	2201      	movs	r2, #1
 8000866:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_I2S2_Init+0x50>)
 800086a:	f002 fde7 	bl	800343c <HAL_I2S_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000874:	f000 fa5e 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200000f8 	.word	0x200000f8
 8000880:	40003800 	.word	0x40003800
 8000884:	00017700 	.word	0x00017700

08000888 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_I2S3_Init+0x54>)
 800088e:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <MX_I2S3_Init+0x58>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_I2S3_Init+0x54>)
 8000894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000898:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <MX_I2S3_Init+0x54>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_I2S3_Init+0x54>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <MX_I2S3_Init+0x54>)
 80008a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ac:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_I2S3_Init+0x54>)
 80008b0:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <MX_I2S3_Init+0x5c>)
 80008b2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_I2S3_Init+0x54>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_I2S3_Init+0x54>)
 80008bc:	2200      	movs	r2, #0
 80008be:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_I2S3_Init+0x54>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_I2S3_Init+0x54>)
 80008c8:	f002 fdb8 	bl	800343c <HAL_I2S_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008d2:	f000 fa2f 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000140 	.word	0x20000140
 80008e0:	40003c00 	.word	0x40003c00
 80008e4:	00017700 	.word	0x00017700

080008e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_SPI1_Init+0x64>)
 80008ee:	4a18      	ldr	r2, [pc, #96]	; (8000950 <MX_SPI1_Init+0x68>)
 80008f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_SPI1_Init+0x64>)
 80008f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_SPI1_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_SPI1_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_SPI1_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_SPI1_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_SPI1_Init+0x64>)
 8000914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000918:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_SPI1_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <MX_SPI1_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_SPI1_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <MX_SPI1_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_SPI1_Init+0x64>)
 8000934:	220a      	movs	r2, #10
 8000936:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000938:	4804      	ldr	r0, [pc, #16]	; (800094c <MX_SPI1_Init+0x64>)
 800093a:	f003 fff3 	bl	8004924 <HAL_SPI_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000944:	f000 f9f6 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000188 	.word	0x20000188
 8000950:	40013000 	.word	0x40013000

08000954 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095a:	f107 0308 	add.w	r3, r7, #8
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000968:	463b      	mov	r3, r7
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000970:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <MX_TIM2_Init+0xa0>)
 8000972:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000976:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000978:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <MX_TIM2_Init+0xa0>)
 800097a:	2200      	movs	r2, #0
 800097c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_TIM2_Init+0xa0>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_TIM2_Init+0xa0>)
 8000986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800098a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098c:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <MX_TIM2_Init+0xa0>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_TIM2_Init+0xa0>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000998:	4816      	ldr	r0, [pc, #88]	; (80009f4 <MX_TIM2_Init+0xa0>)
 800099a:	f004 f84c 	bl	8004a36 <HAL_TIM_Base_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009a4:	f000 f9c6 	bl	8000d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80009a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ac:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	4619      	mov	r1, r3
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <MX_TIM2_Init+0xa0>)
 80009c2:	f004 fc17 	bl	80051f4 <HAL_TIM_ConfigClockSource>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80009cc:	f000 f9b2 	bl	8000d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d0:	2300      	movs	r3, #0
 80009d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_TIM2_Init+0xa0>)
 80009de:	f004 ffc5 	bl	800596c <HAL_TIMEx_MasterConfigSynchronization>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80009e8:	f000 f9a4 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200001e0 	.word	0x200001e0

080009f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a14:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <MX_TIM3_Init+0x94>)
 8000a16:	4a1e      	ldr	r2, [pc, #120]	; (8000a90 <MX_TIM3_Init+0x98>)
 8000a18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <MX_TIM3_Init+0x94>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <MX_TIM3_Init+0x94>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 300;
 8000a26:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <MX_TIM3_Init+0x94>)
 8000a28:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000a2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <MX_TIM3_Init+0x94>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <MX_TIM3_Init+0x94>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a3a:	4814      	ldr	r0, [pc, #80]	; (8000a8c <MX_TIM3_Init+0x94>)
 8000a3c:	f003 fffb 	bl	8004a36 <HAL_TIM_Base_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000a46:	f000 f975 	bl	8000d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	4619      	mov	r1, r3
 8000a56:	480d      	ldr	r0, [pc, #52]	; (8000a8c <MX_TIM3_Init+0x94>)
 8000a58:	f004 fbcc 	bl	80051f4 <HAL_TIM_ConfigClockSource>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000a62:	f000 f967 	bl	8000d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a6e:	463b      	mov	r3, r7
 8000a70:	4619      	mov	r1, r3
 8000a72:	4806      	ldr	r0, [pc, #24]	; (8000a8c <MX_TIM3_Init+0x94>)
 8000a74:	f004 ff7a 	bl	800596c <HAL_TIMEx_MasterConfigSynchronization>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000a7e:	f000 f959 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000228 	.word	0x20000228
 8000a90:	40000400 	.word	0x40000400

08000a94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08e      	sub	sp, #56	; 0x38
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa8:	f107 0320 	add.w	r3, r7, #32
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
 8000ac0:	615a      	str	r2, [r3, #20]
 8000ac2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ac4:	4b33      	ldr	r3, [pc, #204]	; (8000b94 <MX_TIM4_Init+0x100>)
 8000ac6:	4a34      	ldr	r2, [pc, #208]	; (8000b98 <MX_TIM4_Init+0x104>)
 8000ac8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000aca:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <MX_TIM4_Init+0x100>)
 8000acc:	2253      	movs	r2, #83	; 0x53
 8000ace:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad0:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <MX_TIM4_Init+0x100>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000ad6:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <MX_TIM4_Init+0x100>)
 8000ad8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000adc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ade:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <MX_TIM4_Init+0x100>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <MX_TIM4_Init+0x100>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000aea:	482a      	ldr	r0, [pc, #168]	; (8000b94 <MX_TIM4_Init+0x100>)
 8000aec:	f003 ffa3 	bl	8004a36 <HAL_TIM_Base_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000af6:	f000 f91d 	bl	8000d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b04:	4619      	mov	r1, r3
 8000b06:	4823      	ldr	r0, [pc, #140]	; (8000b94 <MX_TIM4_Init+0x100>)
 8000b08:	f004 fb74 	bl	80051f4 <HAL_TIM_ConfigClockSource>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000b12:	f000 f90f 	bl	8000d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b16:	481f      	ldr	r0, [pc, #124]	; (8000b94 <MX_TIM4_Init+0x100>)
 8000b18:	f004 f898 	bl	8004c4c <HAL_TIM_PWM_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000b22:	f000 f907 	bl	8000d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b2e:	f107 0320 	add.w	r3, r7, #32
 8000b32:	4619      	mov	r1, r3
 8000b34:	4817      	ldr	r0, [pc, #92]	; (8000b94 <MX_TIM4_Init+0x100>)
 8000b36:	f004 ff19 	bl	800596c <HAL_TIMEx_MasterConfigSynchronization>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000b40:	f000 f8f8 	bl	8000d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b44:	2360      	movs	r3, #96	; 0x60
 8000b46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8000b48:	2364      	movs	r3, #100	; 0x64
 8000b4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480e      	ldr	r0, [pc, #56]	; (8000b94 <MX_TIM4_Init+0x100>)
 8000b5c:	f004 fa88 	bl	8005070 <HAL_TIM_PWM_ConfigChannel>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000b66:	f000 f8e5 	bl	8000d34 <Error_Handler>
  }
  sConfigOC.Pulse = 400;
 8000b6a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2208      	movs	r2, #8
 8000b74:	4619      	mov	r1, r3
 8000b76:	4807      	ldr	r0, [pc, #28]	; (8000b94 <MX_TIM4_Init+0x100>)
 8000b78:	f004 fa7a 	bl	8005070 <HAL_TIM_PWM_ConfigChannel>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8000b82:	f000 f8d7 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b86:	4803      	ldr	r0, [pc, #12]	; (8000b94 <MX_TIM4_Init+0x100>)
 8000b88:	f000 fada 	bl	8001140 <HAL_TIM_MspPostInit>

}
 8000b8c:	bf00      	nop
 8000b8e:	3738      	adds	r7, #56	; 0x38
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000270 	.word	0x20000270
 8000b98:	40000800 	.word	0x40000800

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08c      	sub	sp, #48	; 0x30
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
 8000bb6:	4b5b      	ldr	r3, [pc, #364]	; (8000d24 <MX_GPIO_Init+0x188>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a5a      	ldr	r2, [pc, #360]	; (8000d24 <MX_GPIO_Init+0x188>)
 8000bbc:	f043 0310 	orr.w	r3, r3, #16
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b58      	ldr	r3, [pc, #352]	; (8000d24 <MX_GPIO_Init+0x188>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0310 	and.w	r3, r3, #16
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	4b54      	ldr	r3, [pc, #336]	; (8000d24 <MX_GPIO_Init+0x188>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a53      	ldr	r2, [pc, #332]	; (8000d24 <MX_GPIO_Init+0x188>)
 8000bd8:	f043 0304 	orr.w	r3, r3, #4
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b51      	ldr	r3, [pc, #324]	; (8000d24 <MX_GPIO_Init+0x188>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b4d      	ldr	r3, [pc, #308]	; (8000d24 <MX_GPIO_Init+0x188>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a4c      	ldr	r2, [pc, #304]	; (8000d24 <MX_GPIO_Init+0x188>)
 8000bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b4a      	ldr	r3, [pc, #296]	; (8000d24 <MX_GPIO_Init+0x188>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b46      	ldr	r3, [pc, #280]	; (8000d24 <MX_GPIO_Init+0x188>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a45      	ldr	r2, [pc, #276]	; (8000d24 <MX_GPIO_Init+0x188>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b43      	ldr	r3, [pc, #268]	; (8000d24 <MX_GPIO_Init+0x188>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	4b3f      	ldr	r3, [pc, #252]	; (8000d24 <MX_GPIO_Init+0x188>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a3e      	ldr	r2, [pc, #248]	; (8000d24 <MX_GPIO_Init+0x188>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b3c      	ldr	r3, [pc, #240]	; (8000d24 <MX_GPIO_Init+0x188>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	4b38      	ldr	r3, [pc, #224]	; (8000d24 <MX_GPIO_Init+0x188>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a37      	ldr	r2, [pc, #220]	; (8000d24 <MX_GPIO_Init+0x188>)
 8000c48:	f043 0308 	orr.w	r3, r3, #8
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b35      	ldr	r3, [pc, #212]	; (8000d24 <MX_GPIO_Init+0x188>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0308 	and.w	r3, r3, #8
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2108      	movs	r1, #8
 8000c5e:	4832      	ldr	r0, [pc, #200]	; (8000d28 <MX_GPIO_Init+0x18c>)
 8000c60:	f000 fe84 	bl	800196c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	2101      	movs	r1, #1
 8000c68:	4830      	ldr	r0, [pc, #192]	; (8000d2c <MX_GPIO_Init+0x190>)
 8000c6a:	f000 fe7f 	bl	800196c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_15|Audio_RST_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f24a 0110 	movw	r1, #40976	; 0xa010
 8000c74:	482e      	ldr	r0, [pc, #184]	; (8000d30 <MX_GPIO_Init+0x194>)
 8000c76:	f000 fe79 	bl	800196c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4826      	ldr	r0, [pc, #152]	; (8000d28 <MX_GPIO_Init+0x18c>)
 8000c8e:	f000 fce9 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c92:	2308      	movs	r3, #8
 8000c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	481f      	ldr	r0, [pc, #124]	; (8000d28 <MX_GPIO_Init+0x18c>)
 8000caa:	f000 fcdb 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000cae:	2332      	movs	r3, #50	; 0x32
 8000cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cb2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4819      	ldr	r0, [pc, #100]	; (8000d28 <MX_GPIO_Init+0x18c>)
 8000cc4:	f000 fcce 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4813      	ldr	r0, [pc, #76]	; (8000d2c <MX_GPIO_Init+0x190>)
 8000ce0:	f000 fcc0 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD15 Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|Audio_RST_Pin;
 8000ce4:	f24a 0310 	movw	r3, #40976	; 0xa010
 8000ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480c      	ldr	r0, [pc, #48]	; (8000d30 <MX_GPIO_Init+0x194>)
 8000cfe:	f000 fcb1 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d02:	2320      	movs	r3, #32
 8000d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	4806      	ldr	r0, [pc, #24]	; (8000d30 <MX_GPIO_Init+0x194>)
 8000d16:	f000 fca5 	bl	8001664 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3730      	adds	r7, #48	; 0x30
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40020800 	.word	0x40020800
 8000d30:	40020c00 	.word	0x40020c00

08000d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d38:	b672      	cpsid	i
}
 8000d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <Error_Handler+0x8>
	...

08000d40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	4a0f      	ldr	r2, [pc, #60]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d54:	6453      	str	r3, [r2, #68]	; 0x44
 8000d56:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	603b      	str	r3, [r7, #0]
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d70:	6413      	str	r3, [r2, #64]	; 0x40
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d7e:	2007      	movs	r0, #7
 8000d80:	f000 fc2e 	bl	80015e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40023800 	.word	0x40023800

08000d90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a19      	ldr	r2, [pc, #100]	; (8000e14 <HAL_I2C_MspInit+0x84>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d12c      	bne.n	8000e0c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <HAL_I2C_MspInit+0x88>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a17      	ldr	r2, [pc, #92]	; (8000e18 <HAL_I2C_MspInit+0x88>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <HAL_I2C_MspInit+0x88>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000dce:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd4:	2312      	movs	r3, #18
 8000dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000de0:	2304      	movs	r3, #4
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	480c      	ldr	r0, [pc, #48]	; (8000e1c <HAL_I2C_MspInit+0x8c>)
 8000dec:	f000 fc3a 	bl	8001664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <HAL_I2C_MspInit+0x88>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <HAL_I2C_MspInit+0x88>)
 8000dfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <HAL_I2C_MspInit+0x88>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e0c:	bf00      	nop
 8000e0e:	3728      	adds	r7, #40	; 0x28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40005400 	.word	0x40005400
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020400 	.word	0x40020400

08000e20 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08e      	sub	sp, #56	; 0x38
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a59      	ldr	r2, [pc, #356]	; (8000fa4 <HAL_I2S_MspInit+0x184>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d15b      	bne.n	8000efa <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
 8000e46:	4b58      	ldr	r3, [pc, #352]	; (8000fa8 <HAL_I2S_MspInit+0x188>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	4a57      	ldr	r2, [pc, #348]	; (8000fa8 <HAL_I2S_MspInit+0x188>)
 8000e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
 8000e52:	4b55      	ldr	r3, [pc, #340]	; (8000fa8 <HAL_I2S_MspInit+0x188>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5a:	623b      	str	r3, [r7, #32]
 8000e5c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
 8000e62:	4b51      	ldr	r3, [pc, #324]	; (8000fa8 <HAL_I2S_MspInit+0x188>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a50      	ldr	r2, [pc, #320]	; (8000fa8 <HAL_I2S_MspInit+0x188>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b4e      	ldr	r3, [pc, #312]	; (8000fa8 <HAL_I2S_MspInit+0x188>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	61fb      	str	r3, [r7, #28]
 8000e78:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
 8000e7e:	4b4a      	ldr	r3, [pc, #296]	; (8000fa8 <HAL_I2S_MspInit+0x188>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a49      	ldr	r2, [pc, #292]	; (8000fa8 <HAL_I2S_MspInit+0x188>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b47      	ldr	r3, [pc, #284]	; (8000fa8 <HAL_I2S_MspInit+0x188>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
 8000e94:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e96:	2304      	movs	r3, #4
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000ea6:	2306      	movs	r3, #6
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eae:	4619      	mov	r1, r3
 8000eb0:	483e      	ldr	r0, [pc, #248]	; (8000fac <HAL_I2S_MspInit+0x18c>)
 8000eb2:	f000 fbd7 	bl	8001664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4836      	ldr	r0, [pc, #216]	; (8000fac <HAL_I2S_MspInit+0x18c>)
 8000ed2:	f000 fbc7 	bl	8001664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000ed6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ee8:	2305      	movs	r3, #5
 8000eea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	482f      	ldr	r0, [pc, #188]	; (8000fb0 <HAL_I2S_MspInit+0x190>)
 8000ef4:	f000 fbb6 	bl	8001664 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ef8:	e04f      	b.n	8000f9a <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a2d      	ldr	r2, [pc, #180]	; (8000fb4 <HAL_I2S_MspInit+0x194>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d14a      	bne.n	8000f9a <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <HAL_I2S_MspInit+0x188>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	4a26      	ldr	r2, [pc, #152]	; (8000fa8 <HAL_I2S_MspInit+0x188>)
 8000f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f12:	6413      	str	r3, [r2, #64]	; 0x40
 8000f14:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <HAL_I2S_MspInit+0x188>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	2300      	movs	r3, #0
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <HAL_I2S_MspInit+0x188>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	4a1f      	ldr	r2, [pc, #124]	; (8000fa8 <HAL_I2S_MspInit+0x188>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <HAL_I2S_MspInit+0x188>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <HAL_I2S_MspInit+0x188>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	4a18      	ldr	r2, [pc, #96]	; (8000fa8 <HAL_I2S_MspInit+0x188>)
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <HAL_I2S_MspInit+0x188>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f58:	2310      	movs	r3, #16
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f68:	2306      	movs	r3, #6
 8000f6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f70:	4619      	mov	r1, r3
 8000f72:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <HAL_I2S_MspInit+0x198>)
 8000f74:	f000 fb76 	bl	8001664 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f78:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f8a:	2306      	movs	r3, #6
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <HAL_I2S_MspInit+0x18c>)
 8000f96:	f000 fb65 	bl	8001664 <HAL_GPIO_Init>
}
 8000f9a:	bf00      	nop
 8000f9c:	3738      	adds	r7, #56	; 0x38
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40003800 	.word	0x40003800
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020800 	.word	0x40020800
 8000fb0:	40020400 	.word	0x40020400
 8000fb4:	40003c00 	.word	0x40003c00
 8000fb8:	40020000 	.word	0x40020000

08000fbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a19      	ldr	r2, [pc, #100]	; (8001040 <HAL_SPI_MspInit+0x84>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d12b      	bne.n	8001036 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <HAL_SPI_MspInit+0x88>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	4a17      	ldr	r2, [pc, #92]	; (8001044 <HAL_SPI_MspInit+0x88>)
 8000fe8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fec:	6453      	str	r3, [r2, #68]	; 0x44
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_SPI_MspInit+0x88>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <HAL_SPI_MspInit+0x88>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a10      	ldr	r2, [pc, #64]	; (8001044 <HAL_SPI_MspInit+0x88>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_SPI_MspInit+0x88>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001016:	23e0      	movs	r3, #224	; 0xe0
 8001018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001026:	2305      	movs	r3, #5
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <HAL_SPI_MspInit+0x8c>)
 8001032:	f000 fb17 	bl	8001664 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	; 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40013000 	.word	0x40013000
 8001044:	40023800 	.word	0x40023800
 8001048:	40020000 	.word	0x40020000

0800104c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08c      	sub	sp, #48	; 0x30
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800106c:	d12c      	bne.n	80010c8 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
 8001072:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <HAL_TIM_Base_MspInit+0xe4>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	4a2e      	ldr	r2, [pc, #184]	; (8001130 <HAL_TIM_Base_MspInit+0xe4>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6413      	str	r3, [r2, #64]	; 0x40
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <HAL_TIM_Base_MspInit+0xe4>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	4b28      	ldr	r3, [pc, #160]	; (8001130 <HAL_TIM_Base_MspInit+0xe4>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a27      	ldr	r2, [pc, #156]	; (8001130 <HAL_TIM_Base_MspInit+0xe4>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <HAL_TIM_Base_MspInit+0xe4>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010a6:	2301      	movs	r3, #1
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010b6:	2301      	movs	r3, #1
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4619      	mov	r1, r3
 80010c0:	481c      	ldr	r0, [pc, #112]	; (8001134 <HAL_TIM_Base_MspInit+0xe8>)
 80010c2:	f000 facf 	bl	8001664 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010c6:	e02e      	b.n	8001126 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a1a      	ldr	r2, [pc, #104]	; (8001138 <HAL_TIM_Base_MspInit+0xec>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d116      	bne.n	8001100 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <HAL_TIM_Base_MspInit+0xe4>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	4a15      	ldr	r2, [pc, #84]	; (8001130 <HAL_TIM_Base_MspInit+0xe4>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	6413      	str	r3, [r2, #64]	; 0x40
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <HAL_TIM_Base_MspInit+0xe4>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	201d      	movs	r0, #29
 80010f4:	f000 fa7f 	bl	80015f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010f8:	201d      	movs	r0, #29
 80010fa:	f000 fa98 	bl	800162e <HAL_NVIC_EnableIRQ>
}
 80010fe:	e012      	b.n	8001126 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM4)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <HAL_TIM_Base_MspInit+0xf0>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d10d      	bne.n	8001126 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <HAL_TIM_Base_MspInit+0xe4>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a07      	ldr	r2, [pc, #28]	; (8001130 <HAL_TIM_Base_MspInit+0xe4>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <HAL_TIM_Base_MspInit+0xe4>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
}
 8001126:	bf00      	nop
 8001128:	3730      	adds	r7, #48	; 0x30
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000
 8001138:	40000400 	.word	0x40000400
 800113c:	40000800 	.word	0x40000800

08001140 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <HAL_TIM_MspPostInit+0x68>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d11e      	bne.n	80011a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_TIM_MspPostInit+0x6c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a10      	ldr	r2, [pc, #64]	; (80011ac <HAL_TIM_MspPostInit+0x6c>)
 800116c:	f043 0308 	orr.w	r3, r3, #8
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_TIM_MspPostInit+0x6c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800117e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001182:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001190:	2302      	movs	r3, #2
 8001192:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	4619      	mov	r1, r3
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <HAL_TIM_MspPostInit+0x70>)
 800119c:	f000 fa62 	bl	8001664 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80011a0:	bf00      	nop
 80011a2:	3720      	adds	r7, #32
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40000800 	.word	0x40000800
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020c00 	.word	0x40020c00

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <NMI_Handler+0x4>

080011ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <HardFault_Handler+0x4>

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <MemManage_Handler+0x4>

080011c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001200:	f000 f8da 	bl	80013b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}

08001208 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <TIM3_IRQHandler+0x10>)
 800120e:	f003 fe27 	bl	8004e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000228 	.word	0x20000228

0800121c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <OTG_FS_IRQHandler+0x10>)
 8001222:	f000 fe27 	bl	8001e74 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200006ac 	.word	0x200006ac

08001230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001238:	4a14      	ldr	r2, [pc, #80]	; (800128c <_sbrk+0x5c>)
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <_sbrk+0x60>)
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <_sbrk+0x64>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d102      	bne.n	8001252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <_sbrk+0x64>)
 800124e:	4a12      	ldr	r2, [pc, #72]	; (8001298 <_sbrk+0x68>)
 8001250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <_sbrk+0x64>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	429a      	cmp	r2, r3
 800125e:	d207      	bcs.n	8001270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001260:	f007 ffb8 	bl	80091d4 <__errno>
 8001264:	4603      	mov	r3, r0
 8001266:	220c      	movs	r2, #12
 8001268:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800126a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800126e:	e009      	b.n	8001284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <_sbrk+0x64>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <_sbrk+0x64>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	4a05      	ldr	r2, [pc, #20]	; (8001294 <_sbrk+0x64>)
 8001280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001282:	68fb      	ldr	r3, [r7, #12]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20020000 	.word	0x20020000
 8001290:	00000400 	.word	0x00000400
 8001294:	200002c8 	.word	0x200002c8
 8001298:	20000af8 	.word	0x20000af8

0800129c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <SystemInit+0x20>)
 80012a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <SystemInit+0x20>)
 80012a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012c4:	480d      	ldr	r0, [pc, #52]	; (80012fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012c6:	490e      	ldr	r1, [pc, #56]	; (8001300 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012c8:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012da:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012dc:	4c0b      	ldr	r4, [pc, #44]	; (800130c <LoopFillZerobss+0x26>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ea:	f7ff ffd7 	bl	800129c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ee:	f007 ff77 	bl	80091e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012f2:	f7ff f94b 	bl	800058c <main>
  bx  lr    
 80012f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001300:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001304:	0800931c 	.word	0x0800931c
  ldr r2, =_sbss
 8001308:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800130c:	20000af8 	.word	0x20000af8

08001310 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001310:	e7fe      	b.n	8001310 <ADC_IRQHandler>
	...

08001314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_Init+0x40>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <HAL_Init+0x40>)
 800131e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001322:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <HAL_Init+0x40>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <HAL_Init+0x40>)
 800132a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800132e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_Init+0x40>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_Init+0x40>)
 8001336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133c:	2003      	movs	r0, #3
 800133e:	f000 f94f 	bl	80015e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001342:	2000      	movs	r0, #0
 8001344:	f000 f808 	bl	8001358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001348:	f7ff fcfa 	bl	8000d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023c00 	.word	0x40023c00

08001358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_InitTick+0x54>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_InitTick+0x58>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001372:	fbb2 f3f3 	udiv	r3, r2, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f967 	bl	800164a <HAL_SYSTICK_Config>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e00e      	b.n	80013a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b0f      	cmp	r3, #15
 800138a:	d80a      	bhi.n	80013a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138c:	2200      	movs	r2, #0
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001394:	f000 f92f 	bl	80015f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001398:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <HAL_InitTick+0x5c>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e000      	b.n	80013a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	2000000c 	.word	0x2000000c
 80013b0:	20000014 	.word	0x20000014
 80013b4:	20000010 	.word	0x20000010

080013b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_IncTick+0x20>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_IncTick+0x24>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_IncTick+0x24>)
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000014 	.word	0x20000014
 80013dc:	200002cc 	.word	0x200002cc

080013e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <HAL_GetTick+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	200002cc 	.word	0x200002cc

080013f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001400:	f7ff ffee 	bl	80013e0 <HAL_GetTick>
 8001404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001410:	d005      	beq.n	800141e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_Delay+0x44>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4413      	add	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800141e:	bf00      	nop
 8001420:	f7ff ffde 	bl	80013e0 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	429a      	cmp	r2, r3
 800142e:	d8f7      	bhi.n	8001420 <HAL_Delay+0x28>
  {
  }
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000014 	.word	0x20000014

08001440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800145c:	4013      	ands	r3, r2
 800145e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800146c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001472:	4a04      	ldr	r2, [pc, #16]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	60d3      	str	r3, [r2, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <__NVIC_GetPriorityGrouping+0x18>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	f003 0307 	and.w	r3, r3, #7
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	db0b      	blt.n	80014ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f003 021f 	and.w	r2, r3, #31
 80014bc:	4907      	ldr	r1, [pc, #28]	; (80014dc <__NVIC_EnableIRQ+0x38>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	095b      	lsrs	r3, r3, #5
 80014c4:	2001      	movs	r0, #1
 80014c6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000e100 	.word	0xe000e100

080014e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	6039      	str	r1, [r7, #0]
 80014ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	db0a      	blt.n	800150a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	490c      	ldr	r1, [pc, #48]	; (800152c <__NVIC_SetPriority+0x4c>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	0112      	lsls	r2, r2, #4
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	440b      	add	r3, r1
 8001504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001508:	e00a      	b.n	8001520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4908      	ldr	r1, [pc, #32]	; (8001530 <__NVIC_SetPriority+0x50>)
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	3b04      	subs	r3, #4
 8001518:	0112      	lsls	r2, r2, #4
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	440b      	add	r3, r1
 800151e:	761a      	strb	r2, [r3, #24]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000e100 	.word	0xe000e100
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001534:	b480      	push	{r7}
 8001536:	b089      	sub	sp, #36	; 0x24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f1c3 0307 	rsb	r3, r3, #7
 800154e:	2b04      	cmp	r3, #4
 8001550:	bf28      	it	cs
 8001552:	2304      	movcs	r3, #4
 8001554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3304      	adds	r3, #4
 800155a:	2b06      	cmp	r3, #6
 800155c:	d902      	bls.n	8001564 <NVIC_EncodePriority+0x30>
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3b03      	subs	r3, #3
 8001562:	e000      	b.n	8001566 <NVIC_EncodePriority+0x32>
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	401a      	ands	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800157c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa01 f303 	lsl.w	r3, r1, r3
 8001586:	43d9      	mvns	r1, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	4313      	orrs	r3, r2
         );
}
 800158e:	4618      	mov	r0, r3
 8001590:	3724      	adds	r7, #36	; 0x24
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ac:	d301      	bcc.n	80015b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00f      	b.n	80015d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <SysTick_Config+0x40>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ba:	210f      	movs	r1, #15
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015c0:	f7ff ff8e 	bl	80014e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <SysTick_Config+0x40>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ca:	4b04      	ldr	r3, [pc, #16]	; (80015dc <SysTick_Config+0x40>)
 80015cc:	2207      	movs	r2, #7
 80015ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	e000e010 	.word	0xe000e010

080015e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ff29 	bl	8001440 <__NVIC_SetPriorityGrouping>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001608:	f7ff ff3e 	bl	8001488 <__NVIC_GetPriorityGrouping>
 800160c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	6978      	ldr	r0, [r7, #20]
 8001614:	f7ff ff8e 	bl	8001534 <NVIC_EncodePriority>
 8001618:	4602      	mov	r2, r0
 800161a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff5d 	bl	80014e0 <__NVIC_SetPriority>
}
 8001626:	bf00      	nop
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff31 	bl	80014a4 <__NVIC_EnableIRQ>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ffa2 	bl	800159c <SysTick_Config>
 8001658:	4603      	mov	r3, r0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	; 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	e159      	b.n	8001934 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001680:	2201      	movs	r2, #1
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	429a      	cmp	r2, r3
 800169a:	f040 8148 	bne.w	800192e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d005      	beq.n	80016b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d130      	bne.n	8001718 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	2203      	movs	r2, #3
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ec:	2201      	movs	r2, #1
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	f003 0201 	and.w	r2, r3, #1
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b03      	cmp	r3, #3
 8001722:	d017      	beq.n	8001754 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d123      	bne.n	80017a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	08da      	lsrs	r2, r3, #3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3208      	adds	r2, #8
 8001768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	220f      	movs	r2, #15
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	691a      	ldr	r2, [r3, #16]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	08da      	lsrs	r2, r3, #3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3208      	adds	r2, #8
 80017a2:	69b9      	ldr	r1, [r7, #24]
 80017a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	2203      	movs	r2, #3
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0203 	and.w	r2, r3, #3
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 80a2 	beq.w	800192e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b57      	ldr	r3, [pc, #348]	; (800194c <HAL_GPIO_Init+0x2e8>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4a56      	ldr	r2, [pc, #344]	; (800194c <HAL_GPIO_Init+0x2e8>)
 80017f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
 80017fa:	4b54      	ldr	r3, [pc, #336]	; (800194c <HAL_GPIO_Init+0x2e8>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001806:	4a52      	ldr	r2, [pc, #328]	; (8001950 <HAL_GPIO_Init+0x2ec>)
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	089b      	lsrs	r3, r3, #2
 800180c:	3302      	adds	r3, #2
 800180e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	220f      	movs	r2, #15
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4013      	ands	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a49      	ldr	r2, [pc, #292]	; (8001954 <HAL_GPIO_Init+0x2f0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d019      	beq.n	8001866 <HAL_GPIO_Init+0x202>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a48      	ldr	r2, [pc, #288]	; (8001958 <HAL_GPIO_Init+0x2f4>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d013      	beq.n	8001862 <HAL_GPIO_Init+0x1fe>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a47      	ldr	r2, [pc, #284]	; (800195c <HAL_GPIO_Init+0x2f8>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d00d      	beq.n	800185e <HAL_GPIO_Init+0x1fa>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a46      	ldr	r2, [pc, #280]	; (8001960 <HAL_GPIO_Init+0x2fc>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d007      	beq.n	800185a <HAL_GPIO_Init+0x1f6>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a45      	ldr	r2, [pc, #276]	; (8001964 <HAL_GPIO_Init+0x300>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d101      	bne.n	8001856 <HAL_GPIO_Init+0x1f2>
 8001852:	2304      	movs	r3, #4
 8001854:	e008      	b.n	8001868 <HAL_GPIO_Init+0x204>
 8001856:	2307      	movs	r3, #7
 8001858:	e006      	b.n	8001868 <HAL_GPIO_Init+0x204>
 800185a:	2303      	movs	r3, #3
 800185c:	e004      	b.n	8001868 <HAL_GPIO_Init+0x204>
 800185e:	2302      	movs	r3, #2
 8001860:	e002      	b.n	8001868 <HAL_GPIO_Init+0x204>
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <HAL_GPIO_Init+0x204>
 8001866:	2300      	movs	r3, #0
 8001868:	69fa      	ldr	r2, [r7, #28]
 800186a:	f002 0203 	and.w	r2, r2, #3
 800186e:	0092      	lsls	r2, r2, #2
 8001870:	4093      	lsls	r3, r2
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001878:	4935      	ldr	r1, [pc, #212]	; (8001950 <HAL_GPIO_Init+0x2ec>)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	3302      	adds	r3, #2
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001886:	4b38      	ldr	r3, [pc, #224]	; (8001968 <HAL_GPIO_Init+0x304>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018aa:	4a2f      	ldr	r2, [pc, #188]	; (8001968 <HAL_GPIO_Init+0x304>)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018b0:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <HAL_GPIO_Init+0x304>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d4:	4a24      	ldr	r2, [pc, #144]	; (8001968 <HAL_GPIO_Init+0x304>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018da:	4b23      	ldr	r3, [pc, #140]	; (8001968 <HAL_GPIO_Init+0x304>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018fe:	4a1a      	ldr	r2, [pc, #104]	; (8001968 <HAL_GPIO_Init+0x304>)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <HAL_GPIO_Init+0x304>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001928:	4a0f      	ldr	r2, [pc, #60]	; (8001968 <HAL_GPIO_Init+0x304>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3301      	adds	r3, #1
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	2b0f      	cmp	r3, #15
 8001938:	f67f aea2 	bls.w	8001680 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	40013800 	.word	0x40013800
 8001954:	40020000 	.word	0x40020000
 8001958:	40020400 	.word	0x40020400
 800195c:	40020800 	.word	0x40020800
 8001960:	40020c00 	.word	0x40020c00
 8001964:	40021000 	.word	0x40021000
 8001968:	40013c00 	.word	0x40013c00

0800196c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	807b      	strh	r3, [r7, #2]
 8001978:	4613      	mov	r3, r2
 800197a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800197c:	787b      	ldrb	r3, [r7, #1]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001982:	887a      	ldrh	r2, [r7, #2]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001988:	e003      	b.n	8001992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800198a:	887b      	ldrh	r3, [r7, #2]
 800198c:	041a      	lsls	r2, r3, #16
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	619a      	str	r2, [r3, #24]
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800199e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019a0:	b08f      	sub	sp, #60	; 0x3c
 80019a2:	af0a      	add	r7, sp, #40	; 0x28
 80019a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e054      	b.n	8001a5a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d106      	bne.n	80019d0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f007 f884 	bl	8008ad8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2203      	movs	r2, #3
 80019d4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f004 f8b0 	bl	8005b54 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	687e      	ldr	r6, [r7, #4]
 80019fc:	466d      	mov	r5, sp
 80019fe:	f106 0410 	add.w	r4, r6, #16
 8001a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a12:	1d33      	adds	r3, r6, #4
 8001a14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a16:	6838      	ldr	r0, [r7, #0]
 8001a18:	f004 f82a 	bl	8005a70 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2101      	movs	r1, #1
 8001a22:	4618      	mov	r0, r3
 8001a24:	f004 f8a7 	bl	8005b76 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	603b      	str	r3, [r7, #0]
 8001a2e:	687e      	ldr	r6, [r7, #4]
 8001a30:	466d      	mov	r5, sp
 8001a32:	f106 0410 	add.w	r4, r6, #16
 8001a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a42:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a46:	1d33      	adds	r3, r6, #4
 8001a48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a4a:	6838      	ldr	r0, [r7, #0]
 8001a4c:	f004 fa30 	bl	8005eb0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a62 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001a62:	b590      	push	{r4, r7, lr}
 8001a64:	b089      	sub	sp, #36	; 0x24
 8001a66:	af04      	add	r7, sp, #16
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	4608      	mov	r0, r1
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4603      	mov	r3, r0
 8001a72:	70fb      	strb	r3, [r7, #3]
 8001a74:	460b      	mov	r3, r1
 8001a76:	70bb      	strb	r3, [r7, #2]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_HCD_HC_Init+0x28>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e076      	b.n	8001b78 <HAL_HCD_HC_Init+0x116>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	212c      	movs	r1, #44	; 0x2c
 8001a98:	fb01 f303 	mul.w	r3, r1, r3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	333d      	adds	r3, #61	; 0x3d
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001aa4:	78fb      	ldrb	r3, [r7, #3]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	212c      	movs	r1, #44	; 0x2c
 8001aaa:	fb01 f303 	mul.w	r3, r1, r3
 8001aae:	4413      	add	r3, r2
 8001ab0:	3338      	adds	r3, #56	; 0x38
 8001ab2:	787a      	ldrb	r2, [r7, #1]
 8001ab4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	212c      	movs	r1, #44	; 0x2c
 8001abc:	fb01 f303 	mul.w	r3, r1, r3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3340      	adds	r3, #64	; 0x40
 8001ac4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ac6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	212c      	movs	r1, #44	; 0x2c
 8001ace:	fb01 f303 	mul.w	r3, r1, r3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3339      	adds	r3, #57	; 0x39
 8001ad6:	78fa      	ldrb	r2, [r7, #3]
 8001ad8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001ada:	78fb      	ldrb	r3, [r7, #3]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	212c      	movs	r1, #44	; 0x2c
 8001ae0:	fb01 f303 	mul.w	r3, r1, r3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	333f      	adds	r3, #63	; 0x3f
 8001ae8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001aec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	78ba      	ldrb	r2, [r7, #2]
 8001af2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001af6:	b2d0      	uxtb	r0, r2
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	212c      	movs	r1, #44	; 0x2c
 8001afc:	fb01 f303 	mul.w	r3, r1, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	333a      	adds	r3, #58	; 0x3a
 8001b04:	4602      	mov	r2, r0
 8001b06:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001b08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	da09      	bge.n	8001b24 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	212c      	movs	r1, #44	; 0x2c
 8001b16:	fb01 f303 	mul.w	r3, r1, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	333b      	adds	r3, #59	; 0x3b
 8001b1e:	2201      	movs	r2, #1
 8001b20:	701a      	strb	r2, [r3, #0]
 8001b22:	e008      	b.n	8001b36 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	212c      	movs	r1, #44	; 0x2c
 8001b2a:	fb01 f303 	mul.w	r3, r1, r3
 8001b2e:	4413      	add	r3, r2
 8001b30:	333b      	adds	r3, #59	; 0x3b
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001b36:	78fb      	ldrb	r3, [r7, #3]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	212c      	movs	r1, #44	; 0x2c
 8001b3c:	fb01 f303 	mul.w	r3, r1, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	333c      	adds	r3, #60	; 0x3c
 8001b44:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b48:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6818      	ldr	r0, [r3, #0]
 8001b4e:	787c      	ldrb	r4, [r7, #1]
 8001b50:	78ba      	ldrb	r2, [r7, #2]
 8001b52:	78f9      	ldrb	r1, [r7, #3]
 8001b54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b56:	9302      	str	r3, [sp, #8]
 8001b58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	4623      	mov	r3, r4
 8001b66:	f004 fb29 	bl	80061bc <USB_HC_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd90      	pop	{r4, r7, pc}

08001b80 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d101      	bne.n	8001b9e <HAL_HCD_HC_Halt+0x1e>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e00f      	b.n	8001bbe <HAL_HCD_HC_Halt+0x3e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	78fa      	ldrb	r2, [r7, #3]
 8001bac:	4611      	mov	r1, r2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f004 fd79 	bl	80066a6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	4608      	mov	r0, r1
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	70fb      	strb	r3, [r7, #3]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	70bb      	strb	r3, [r7, #2]
 8001bde:	4613      	mov	r3, r2
 8001be0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	212c      	movs	r1, #44	; 0x2c
 8001be8:	fb01 f303 	mul.w	r3, r1, r3
 8001bec:	4413      	add	r3, r2
 8001bee:	333b      	adds	r3, #59	; 0x3b
 8001bf0:	78ba      	ldrb	r2, [r7, #2]
 8001bf2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	212c      	movs	r1, #44	; 0x2c
 8001bfa:	fb01 f303 	mul.w	r3, r1, r3
 8001bfe:	4413      	add	r3, r2
 8001c00:	333f      	adds	r3, #63	; 0x3f
 8001c02:	787a      	ldrb	r2, [r7, #1]
 8001c04:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001c06:	7c3b      	ldrb	r3, [r7, #16]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d112      	bne.n	8001c32 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	212c      	movs	r1, #44	; 0x2c
 8001c12:	fb01 f303 	mul.w	r3, r1, r3
 8001c16:	4413      	add	r3, r2
 8001c18:	3342      	adds	r3, #66	; 0x42
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	212c      	movs	r1, #44	; 0x2c
 8001c24:	fb01 f303 	mul.w	r3, r1, r3
 8001c28:	4413      	add	r3, r2
 8001c2a:	333d      	adds	r3, #61	; 0x3d
 8001c2c:	7f3a      	ldrb	r2, [r7, #28]
 8001c2e:	701a      	strb	r2, [r3, #0]
 8001c30:	e008      	b.n	8001c44 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	212c      	movs	r1, #44	; 0x2c
 8001c38:	fb01 f303 	mul.w	r3, r1, r3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3342      	adds	r3, #66	; 0x42
 8001c40:	2202      	movs	r2, #2
 8001c42:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001c44:	787b      	ldrb	r3, [r7, #1]
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	f200 80c6 	bhi.w	8001dd8 <HAL_HCD_HC_SubmitRequest+0x210>
 8001c4c:	a201      	add	r2, pc, #4	; (adr r2, 8001c54 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c52:	bf00      	nop
 8001c54:	08001c65 	.word	0x08001c65
 8001c58:	08001dc5 	.word	0x08001dc5
 8001c5c:	08001cc9 	.word	0x08001cc9
 8001c60:	08001d47 	.word	0x08001d47
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001c64:	7c3b      	ldrb	r3, [r7, #16]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	f040 80b8 	bne.w	8001ddc <HAL_HCD_HC_SubmitRequest+0x214>
 8001c6c:	78bb      	ldrb	r3, [r7, #2]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f040 80b4 	bne.w	8001ddc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001c74:	8b3b      	ldrh	r3, [r7, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d108      	bne.n	8001c8c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001c7a:	78fb      	ldrb	r3, [r7, #3]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	212c      	movs	r1, #44	; 0x2c
 8001c80:	fb01 f303 	mul.w	r3, r1, r3
 8001c84:	4413      	add	r3, r2
 8001c86:	3355      	adds	r3, #85	; 0x55
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	212c      	movs	r1, #44	; 0x2c
 8001c92:	fb01 f303 	mul.w	r3, r1, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	3355      	adds	r3, #85	; 0x55
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d109      	bne.n	8001cb4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	212c      	movs	r1, #44	; 0x2c
 8001ca6:	fb01 f303 	mul.w	r3, r1, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	3342      	adds	r3, #66	; 0x42
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001cb2:	e093      	b.n	8001ddc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	212c      	movs	r1, #44	; 0x2c
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3342      	adds	r3, #66	; 0x42
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	701a      	strb	r2, [r3, #0]
      break;
 8001cc6:	e089      	b.n	8001ddc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001cc8:	78bb      	ldrb	r3, [r7, #2]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d11d      	bne.n	8001d0a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	212c      	movs	r1, #44	; 0x2c
 8001cd4:	fb01 f303 	mul.w	r3, r1, r3
 8001cd8:	4413      	add	r3, r2
 8001cda:	3355      	adds	r3, #85	; 0x55
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d109      	bne.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	212c      	movs	r1, #44	; 0x2c
 8001ce8:	fb01 f303 	mul.w	r3, r1, r3
 8001cec:	4413      	add	r3, r2
 8001cee:	3342      	adds	r3, #66	; 0x42
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001cf4:	e073      	b.n	8001dde <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	212c      	movs	r1, #44	; 0x2c
 8001cfc:	fb01 f303 	mul.w	r3, r1, r3
 8001d00:	4413      	add	r3, r2
 8001d02:	3342      	adds	r3, #66	; 0x42
 8001d04:	2202      	movs	r2, #2
 8001d06:	701a      	strb	r2, [r3, #0]
      break;
 8001d08:	e069      	b.n	8001dde <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	212c      	movs	r1, #44	; 0x2c
 8001d10:	fb01 f303 	mul.w	r3, r1, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	3354      	adds	r3, #84	; 0x54
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	212c      	movs	r1, #44	; 0x2c
 8001d24:	fb01 f303 	mul.w	r3, r1, r3
 8001d28:	4413      	add	r3, r2
 8001d2a:	3342      	adds	r3, #66	; 0x42
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
      break;
 8001d30:	e055      	b.n	8001dde <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	212c      	movs	r1, #44	; 0x2c
 8001d38:	fb01 f303 	mul.w	r3, r1, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3342      	adds	r3, #66	; 0x42
 8001d40:	2202      	movs	r2, #2
 8001d42:	701a      	strb	r2, [r3, #0]
      break;
 8001d44:	e04b      	b.n	8001dde <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001d46:	78bb      	ldrb	r3, [r7, #2]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d11d      	bne.n	8001d88 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	212c      	movs	r1, #44	; 0x2c
 8001d52:	fb01 f303 	mul.w	r3, r1, r3
 8001d56:	4413      	add	r3, r2
 8001d58:	3355      	adds	r3, #85	; 0x55
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d109      	bne.n	8001d74 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	212c      	movs	r1, #44	; 0x2c
 8001d66:	fb01 f303 	mul.w	r3, r1, r3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3342      	adds	r3, #66	; 0x42
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d72:	e034      	b.n	8001dde <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	212c      	movs	r1, #44	; 0x2c
 8001d7a:	fb01 f303 	mul.w	r3, r1, r3
 8001d7e:	4413      	add	r3, r2
 8001d80:	3342      	adds	r3, #66	; 0x42
 8001d82:	2202      	movs	r2, #2
 8001d84:	701a      	strb	r2, [r3, #0]
      break;
 8001d86:	e02a      	b.n	8001dde <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	212c      	movs	r1, #44	; 0x2c
 8001d8e:	fb01 f303 	mul.w	r3, r1, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	3354      	adds	r3, #84	; 0x54
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d109      	bne.n	8001db0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	212c      	movs	r1, #44	; 0x2c
 8001da2:	fb01 f303 	mul.w	r3, r1, r3
 8001da6:	4413      	add	r3, r2
 8001da8:	3342      	adds	r3, #66	; 0x42
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
      break;
 8001dae:	e016      	b.n	8001dde <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001db0:	78fb      	ldrb	r3, [r7, #3]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	212c      	movs	r1, #44	; 0x2c
 8001db6:	fb01 f303 	mul.w	r3, r1, r3
 8001dba:	4413      	add	r3, r2
 8001dbc:	3342      	adds	r3, #66	; 0x42
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	701a      	strb	r2, [r3, #0]
      break;
 8001dc2:	e00c      	b.n	8001dde <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	212c      	movs	r1, #44	; 0x2c
 8001dca:	fb01 f303 	mul.w	r3, r1, r3
 8001dce:	4413      	add	r3, r2
 8001dd0:	3342      	adds	r3, #66	; 0x42
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
      break;
 8001dd6:	e002      	b.n	8001dde <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001dd8:	bf00      	nop
 8001dda:	e000      	b.n	8001dde <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001ddc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	212c      	movs	r1, #44	; 0x2c
 8001de4:	fb01 f303 	mul.w	r3, r1, r3
 8001de8:	4413      	add	r3, r2
 8001dea:	3344      	adds	r3, #68	; 0x44
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	8b3a      	ldrh	r2, [r7, #24]
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	202c      	movs	r0, #44	; 0x2c
 8001df8:	fb00 f303 	mul.w	r3, r0, r3
 8001dfc:	440b      	add	r3, r1
 8001dfe:	334c      	adds	r3, #76	; 0x4c
 8001e00:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	212c      	movs	r1, #44	; 0x2c
 8001e08:	fb01 f303 	mul.w	r3, r1, r3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3360      	adds	r3, #96	; 0x60
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	212c      	movs	r1, #44	; 0x2c
 8001e1a:	fb01 f303 	mul.w	r3, r1, r3
 8001e1e:	4413      	add	r3, r2
 8001e20:	3350      	adds	r3, #80	; 0x50
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	212c      	movs	r1, #44	; 0x2c
 8001e2c:	fb01 f303 	mul.w	r3, r1, r3
 8001e30:	4413      	add	r3, r2
 8001e32:	3339      	adds	r3, #57	; 0x39
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	212c      	movs	r1, #44	; 0x2c
 8001e3e:	fb01 f303 	mul.w	r3, r1, r3
 8001e42:	4413      	add	r3, r2
 8001e44:	3361      	adds	r3, #97	; 0x61
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	222c      	movs	r2, #44	; 0x2c
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	3338      	adds	r3, #56	; 0x38
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	18d1      	adds	r1, r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	f004 facc 	bl	8006400 <USB_HC_StartXfer>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop

08001e74 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f003 ffcd 	bl	8005e2a <USB_GetMode>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	f040 80f6 	bne.w	8002084 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 ffb1 	bl	8005e04 <USB_ReadInterrupts>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80ec 	beq.w	8002082 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 ffa8 	bl	8005e04 <USB_ReadInterrupts>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ebe:	d104      	bne.n	8001eca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ec8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f003 ff98 	bl	8005e04 <USB_ReadInterrupts>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ede:	d104      	bne.n	8001eea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ee8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 ff88 	bl	8005e04 <USB_ReadInterrupts>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001efa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001efe:	d104      	bne.n	8001f0a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f003 ff78 	bl	8005e04 <USB_ReadInterrupts>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d103      	bne.n	8001f26 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2202      	movs	r2, #2
 8001f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 ff6a 	bl	8005e04 <USB_ReadInterrupts>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f3a:	d11c      	bne.n	8001f76 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f44:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10f      	bne.n	8001f76 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001f56:	2110      	movs	r1, #16
 8001f58:	6938      	ldr	r0, [r7, #16]
 8001f5a:	f003 fe59 	bl	8005c10 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f5e:	6938      	ldr	r0, [r7, #16]
 8001f60:	f003 fe8a 	bl	8005c78 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2101      	movs	r1, #1
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f004 f860 	bl	8006030 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f006 fe2f 	bl	8008bd4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 ff42 	bl	8005e04 <USB_ReadInterrupts>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f8a:	d102      	bne.n	8001f92 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f001 f89e 	bl	80030ce <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 ff34 	bl	8005e04 <USB_ReadInterrupts>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d106      	bne.n	8001fb4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f006 fdf8 	bl	8008b9c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f003 ff23 	bl	8005e04 <USB_ReadInterrupts>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	2b10      	cmp	r3, #16
 8001fc6:	d101      	bne.n	8001fcc <HAL_HCD_IRQHandler+0x158>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <HAL_HCD_IRQHandler+0x15a>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d012      	beq.n	8001ff8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	699a      	ldr	r2, [r3, #24]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0210 	bic.w	r2, r2, #16
 8001fe0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 ffa1 	bl	8002f2a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0210 	orr.w	r2, r2, #16
 8001ff6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f003 ff01 	bl	8005e04 <USB_ReadInterrupts>
 8002002:	4603      	mov	r3, r0
 8002004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002008:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800200c:	d13a      	bne.n	8002084 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f004 fb36 	bl	8006684 <USB_HC_ReadInterrupt>
 8002018:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	e025      	b.n	800206c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	fa22 f303 	lsr.w	r3, r2, r3
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	d018      	beq.n	8002066 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	015a      	lsls	r2, r3, #5
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800204a:	d106      	bne.n	800205a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	4619      	mov	r1, r3
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f8ab 	bl	80021ae <HCD_HC_IN_IRQHandler>
 8002058:	e005      	b.n	8002066 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	4619      	mov	r1, r3
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 fbf9 	bl	8002858 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3301      	adds	r3, #1
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	429a      	cmp	r2, r3
 8002074:	d3d4      	bcc.n	8002020 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800207e:	615a      	str	r2, [r3, #20]
 8002080:	e000      	b.n	8002084 <HAL_HCD_IRQHandler+0x210>
      return;
 8002082:	bf00      	nop
    }
  }
}
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_HCD_Start+0x16>
 800209c:	2302      	movs	r3, #2
 800209e:	e013      	b.n	80020c8 <HAL_HCD_Start+0x3e>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2101      	movs	r1, #1
 80020ae:	4618      	mov	r0, r3
 80020b0:	f004 f822 	bl	80060f8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f003 fd3a 	bl	8005b32 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_HCD_Stop+0x16>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e00d      	b.n	8002102 <HAL_HCD_Stop+0x32>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f004 fc10 	bl	8006918 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f003 ffc4 	bl	80060a4 <USB_ResetPort>
 800211c:	4603      	mov	r3, r0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	212c      	movs	r1, #44	; 0x2c
 8002138:	fb01 f303 	mul.w	r3, r1, r3
 800213c:	4413      	add	r3, r2
 800213e:	3360      	adds	r3, #96	; 0x60
 8002140:	781b      	ldrb	r3, [r3, #0]
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	460b      	mov	r3, r1
 8002158:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	212c      	movs	r1, #44	; 0x2c
 8002160:	fb01 f303 	mul.w	r3, r1, r3
 8002164:	4413      	add	r3, r2
 8002166:	3350      	adds	r3, #80	; 0x50
 8002168:	681b      	ldr	r3, [r3, #0]
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f004 f808 	bl	8006198 <USB_GetCurrentFrame>
 8002188:	4603      	mov	r3, r0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f003 ffe3 	bl	800616a <USB_GetHostSpeed>
 80021a4:	4603      	mov	r3, r0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	460b      	mov	r3, r1
 80021b8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80021c4:	78fb      	ldrb	r3, [r7, #3]
 80021c6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d11a      	bne.n	8002214 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ea:	461a      	mov	r2, r3
 80021ec:	2304      	movs	r3, #4
 80021ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	212c      	movs	r1, #44	; 0x2c
 80021f6:	fb01 f303 	mul.w	r3, r1, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	3361      	adds	r3, #97	; 0x61
 80021fe:	2206      	movs	r2, #6
 8002200:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f004 fa4a 	bl	80066a6 <USB_HC_Halt>
 8002212:	e0af      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4413      	add	r3, r2
 800221c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800222a:	d11b      	bne.n	8002264 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4413      	add	r3, r2
 8002234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002238:	461a      	mov	r2, r3
 800223a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800223e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	212c      	movs	r1, #44	; 0x2c
 8002246:	fb01 f303 	mul.w	r3, r1, r3
 800224a:	4413      	add	r3, r2
 800224c:	3361      	adds	r3, #97	; 0x61
 800224e:	2207      	movs	r2, #7
 8002250:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f004 fa22 	bl	80066a6 <USB_HC_Halt>
 8002262:	e087      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	015a      	lsls	r2, r3, #5
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4413      	add	r3, r2
 800226c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 0320 	and.w	r3, r3, #32
 8002276:	2b20      	cmp	r3, #32
 8002278:	d109      	bne.n	800228e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4413      	add	r3, r2
 8002282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002286:	461a      	mov	r2, r3
 8002288:	2320      	movs	r3, #32
 800228a:	6093      	str	r3, [r2, #8]
 800228c:	e072      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4413      	add	r3, r2
 8002296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d11a      	bne.n	80022da <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	015a      	lsls	r2, r3, #5
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b0:	461a      	mov	r2, r3
 80022b2:	2308      	movs	r3, #8
 80022b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	212c      	movs	r1, #44	; 0x2c
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	3361      	adds	r3, #97	; 0x61
 80022c4:	2205      	movs	r2, #5
 80022c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	4611      	mov	r1, r2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f004 f9e7 	bl	80066a6 <USB_HC_Halt>
 80022d8:	e04c      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f0:	d11b      	bne.n	800232a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fe:	461a      	mov	r2, r3
 8002300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002304:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	212c      	movs	r1, #44	; 0x2c
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	4413      	add	r3, r2
 8002312:	3361      	adds	r3, #97	; 0x61
 8002314:	2208      	movs	r2, #8
 8002316:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f004 f9bf 	bl	80066a6 <USB_HC_Halt>
 8002328:	e024      	b.n	8002374 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4413      	add	r3, r2
 8002332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233c:	2b80      	cmp	r3, #128	; 0x80
 800233e:	d119      	bne.n	8002374 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4413      	add	r3, r2
 8002348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234c:	461a      	mov	r2, r3
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	212c      	movs	r1, #44	; 0x2c
 8002358:	fb01 f303 	mul.w	r3, r1, r3
 800235c:	4413      	add	r3, r2
 800235e:	3361      	adds	r3, #97	; 0x61
 8002360:	2206      	movs	r2, #6
 8002362:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	4611      	mov	r1, r2
 800236e:	4618      	mov	r0, r3
 8002370:	f004 f999 	bl	80066a6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800238a:	d112      	bne.n	80023b2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	4611      	mov	r1, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f004 f985 	bl	80066a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a8:	461a      	mov	r2, r3
 80023aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023ae:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80023b0:	e24e      	b.n	8002850 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	f040 80df 	bne.w	8002588 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d019      	beq.n	8002406 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	212c      	movs	r1, #44	; 0x2c
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	4413      	add	r3, r2
 80023de:	3348      	adds	r3, #72	; 0x48
 80023e0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	0159      	lsls	r1, r3, #5
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	440b      	add	r3, r1
 80023ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80023f4:	1ad2      	subs	r2, r2, r3
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	202c      	movs	r0, #44	; 0x2c
 80023fc:	fb00 f303 	mul.w	r3, r0, r3
 8002400:	440b      	add	r3, r1
 8002402:	3350      	adds	r3, #80	; 0x50
 8002404:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	3361      	adds	r3, #97	; 0x61
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	4413      	add	r3, r2
 8002424:	335c      	adds	r3, #92	; 0x5c
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4413      	add	r3, r2
 8002432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002436:	461a      	mov	r2, r3
 8002438:	2301      	movs	r3, #1
 800243a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	212c      	movs	r1, #44	; 0x2c
 8002442:	fb01 f303 	mul.w	r3, r1, r3
 8002446:	4413      	add	r3, r2
 8002448:	333f      	adds	r3, #63	; 0x3f
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d009      	beq.n	8002464 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	212c      	movs	r1, #44	; 0x2c
 8002456:	fb01 f303 	mul.w	r3, r1, r3
 800245a:	4413      	add	r3, r2
 800245c:	333f      	adds	r3, #63	; 0x3f
 800245e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002460:	2b02      	cmp	r3, #2
 8002462:	d111      	bne.n	8002488 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	4611      	mov	r1, r2
 800246e:	4618      	mov	r0, r3
 8002470:	f004 f919 	bl	80066a6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	015a      	lsls	r2, r3, #5
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4413      	add	r3, r2
 800247c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002480:	461a      	mov	r2, r3
 8002482:	2310      	movs	r3, #16
 8002484:	6093      	str	r3, [r2, #8]
 8002486:	e03a      	b.n	80024fe <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	212c      	movs	r1, #44	; 0x2c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	333f      	adds	r3, #63	; 0x3f
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d009      	beq.n	80024b0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	212c      	movs	r1, #44	; 0x2c
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	333f      	adds	r3, #63	; 0x3f
 80024aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d126      	bne.n	80024fe <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	0151      	lsls	r1, r2, #5
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	440a      	add	r2, r1
 80024c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024ce:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	212c      	movs	r1, #44	; 0x2c
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	4413      	add	r3, r2
 80024dc:	3360      	adds	r3, #96	; 0x60
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	b2d9      	uxtb	r1, r3
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	202c      	movs	r0, #44	; 0x2c
 80024ec:	fb00 f303 	mul.w	r3, r0, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	3360      	adds	r3, #96	; 0x60
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f006 fb79 	bl	8008bf0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d12b      	bne.n	800255e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	3348      	adds	r3, #72	; 0x48
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	202c      	movs	r0, #44	; 0x2c
 800251c:	fb00 f202 	mul.w	r2, r0, r2
 8002520:	440a      	add	r2, r1
 8002522:	3240      	adds	r2, #64	; 0x40
 8002524:	8812      	ldrh	r2, [r2, #0]
 8002526:	fbb3 f3f2 	udiv	r3, r3, r2
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 818e 	beq.w	8002850 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	212c      	movs	r1, #44	; 0x2c
 800253a:	fb01 f303 	mul.w	r3, r1, r3
 800253e:	4413      	add	r3, r2
 8002540:	3354      	adds	r3, #84	; 0x54
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	f083 0301 	eor.w	r3, r3, #1
 8002548:	b2d8      	uxtb	r0, r3
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	212c      	movs	r1, #44	; 0x2c
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	3354      	adds	r3, #84	; 0x54
 8002558:	4602      	mov	r2, r0
 800255a:	701a      	strb	r2, [r3, #0]
}
 800255c:	e178      	b.n	8002850 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	212c      	movs	r1, #44	; 0x2c
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	4413      	add	r3, r2
 800256a:	3354      	adds	r3, #84	; 0x54
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	f083 0301 	eor.w	r3, r3, #1
 8002572:	b2d8      	uxtb	r0, r3
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	212c      	movs	r1, #44	; 0x2c
 800257a:	fb01 f303 	mul.w	r3, r1, r3
 800257e:	4413      	add	r3, r2
 8002580:	3354      	adds	r3, #84	; 0x54
 8002582:	4602      	mov	r2, r0
 8002584:	701a      	strb	r2, [r3, #0]
}
 8002586:	e163      	b.n	8002850 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b02      	cmp	r3, #2
 800259c:	f040 80f6 	bne.w	800278c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	212c      	movs	r1, #44	; 0x2c
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	3361      	adds	r3, #97	; 0x61
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d109      	bne.n	80025c8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	212c      	movs	r1, #44	; 0x2c
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	4413      	add	r3, r2
 80025c0:	3360      	adds	r3, #96	; 0x60
 80025c2:	2201      	movs	r2, #1
 80025c4:	701a      	strb	r2, [r3, #0]
 80025c6:	e0c9      	b.n	800275c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	212c      	movs	r1, #44	; 0x2c
 80025ce:	fb01 f303 	mul.w	r3, r1, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	3361      	adds	r3, #97	; 0x61
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b05      	cmp	r3, #5
 80025da:	d109      	bne.n	80025f0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	3360      	adds	r3, #96	; 0x60
 80025ea:	2205      	movs	r2, #5
 80025ec:	701a      	strb	r2, [r3, #0]
 80025ee:	e0b5      	b.n	800275c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	212c      	movs	r1, #44	; 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	3361      	adds	r3, #97	; 0x61
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b06      	cmp	r3, #6
 8002602:	d009      	beq.n	8002618 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	212c      	movs	r1, #44	; 0x2c
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	3361      	adds	r3, #97	; 0x61
 8002612:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002614:	2b08      	cmp	r3, #8
 8002616:	d150      	bne.n	80026ba <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	335c      	adds	r3, #92	; 0x5c
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	202c      	movs	r0, #44	; 0x2c
 8002630:	fb00 f303 	mul.w	r3, r0, r3
 8002634:	440b      	add	r3, r1
 8002636:	335c      	adds	r3, #92	; 0x5c
 8002638:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	212c      	movs	r1, #44	; 0x2c
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	4413      	add	r3, r2
 8002646:	335c      	adds	r3, #92	; 0x5c
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d912      	bls.n	8002674 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	212c      	movs	r1, #44	; 0x2c
 8002654:	fb01 f303 	mul.w	r3, r1, r3
 8002658:	4413      	add	r3, r2
 800265a:	335c      	adds	r3, #92	; 0x5c
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	212c      	movs	r1, #44	; 0x2c
 8002666:	fb01 f303 	mul.w	r3, r1, r3
 800266a:	4413      	add	r3, r2
 800266c:	3360      	adds	r3, #96	; 0x60
 800266e:	2204      	movs	r2, #4
 8002670:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002672:	e073      	b.n	800275c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	212c      	movs	r1, #44	; 0x2c
 800267a:	fb01 f303 	mul.w	r3, r1, r3
 800267e:	4413      	add	r3, r2
 8002680:	3360      	adds	r3, #96	; 0x60
 8002682:	2202      	movs	r2, #2
 8002684:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800269c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026a4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b2:	461a      	mov	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026b8:	e050      	b.n	800275c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	212c      	movs	r1, #44	; 0x2c
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	3361      	adds	r3, #97	; 0x61
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d122      	bne.n	8002714 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	212c      	movs	r1, #44	; 0x2c
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	4413      	add	r3, r2
 80026da:	3360      	adds	r3, #96	; 0x60
 80026dc:	2202      	movs	r2, #2
 80026de:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026f6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026fe:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	461a      	mov	r2, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e023      	b.n	800275c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	3361      	adds	r3, #97	; 0x61
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b07      	cmp	r3, #7
 8002726:	d119      	bne.n	800275c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	212c      	movs	r1, #44	; 0x2c
 800272e:	fb01 f303 	mul.w	r3, r1, r3
 8002732:	4413      	add	r3, r2
 8002734:	335c      	adds	r3, #92	; 0x5c
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	202c      	movs	r0, #44	; 0x2c
 8002740:	fb00 f303 	mul.w	r3, r0, r3
 8002744:	440b      	add	r3, r1
 8002746:	335c      	adds	r3, #92	; 0x5c
 8002748:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	212c      	movs	r1, #44	; 0x2c
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	4413      	add	r3, r2
 8002756:	3360      	adds	r3, #96	; 0x60
 8002758:	2204      	movs	r2, #4
 800275a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4413      	add	r3, r2
 8002764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002768:	461a      	mov	r2, r3
 800276a:	2302      	movs	r3, #2
 800276c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	b2d9      	uxtb	r1, r3
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	202c      	movs	r0, #44	; 0x2c
 8002778:	fb00 f303 	mul.w	r3, r0, r3
 800277c:	4413      	add	r3, r2
 800277e:	3360      	adds	r3, #96	; 0x60
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f006 fa33 	bl	8008bf0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800278a:	e061      	b.n	8002850 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4413      	add	r3, r2
 8002794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	2b10      	cmp	r3, #16
 80027a0:	d156      	bne.n	8002850 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	333f      	adds	r3, #63	; 0x3f
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d111      	bne.n	80027da <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	212c      	movs	r1, #44	; 0x2c
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	335c      	adds	r3, #92	; 0x5c
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f003 ff67 	bl	80066a6 <USB_HC_Halt>
 80027d8:	e031      	b.n	800283e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	212c      	movs	r1, #44	; 0x2c
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	4413      	add	r3, r2
 80027e6:	333f      	adds	r3, #63	; 0x3f
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d009      	beq.n	8002802 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	212c      	movs	r1, #44	; 0x2c
 80027f4:	fb01 f303 	mul.w	r3, r1, r3
 80027f8:	4413      	add	r3, r2
 80027fa:	333f      	adds	r3, #63	; 0x3f
 80027fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d11d      	bne.n	800283e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	212c      	movs	r1, #44	; 0x2c
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	4413      	add	r3, r2
 800280e:	335c      	adds	r3, #92	; 0x5c
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d110      	bne.n	800283e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	212c      	movs	r1, #44	; 0x2c
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	4413      	add	r3, r2
 8002828:	3361      	adds	r3, #97	; 0x61
 800282a:	2203      	movs	r2, #3
 800282c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f003 ff34 	bl	80066a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	461a      	mov	r2, r3
 800284c:	2310      	movs	r3, #16
 800284e:	6093      	str	r3, [r2, #8]
}
 8002850:	bf00      	nop
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b04      	cmp	r3, #4
 8002886:	d11a      	bne.n	80028be <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002894:	461a      	mov	r2, r3
 8002896:	2304      	movs	r3, #4
 8002898:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	3361      	adds	r3, #97	; 0x61
 80028a8:	2206      	movs	r2, #6
 80028aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	4611      	mov	r1, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f003 fef5 	bl	80066a6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80028bc:	e331      	b.n	8002f22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	015a      	lsls	r2, r3, #5
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	4413      	add	r3, r2
 80028c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b20      	cmp	r3, #32
 80028d2:	d12e      	bne.n	8002932 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e0:	461a      	mov	r2, r3
 80028e2:	2320      	movs	r3, #32
 80028e4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	212c      	movs	r1, #44	; 0x2c
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	333d      	adds	r3, #61	; 0x3d
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	f040 8313 	bne.w	8002f22 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	212c      	movs	r1, #44	; 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	333d      	adds	r3, #61	; 0x3d
 800290a:	2200      	movs	r2, #0
 800290c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	212c      	movs	r1, #44	; 0x2c
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	4413      	add	r3, r2
 800291a:	3360      	adds	r3, #96	; 0x60
 800291c:	2202      	movs	r2, #2
 800291e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f003 febb 	bl	80066a6 <USB_HC_Halt>
}
 8002930:	e2f7      	b.n	8002f22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	4413      	add	r3, r2
 800293a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002948:	d112      	bne.n	8002970 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002956:	461a      	mov	r2, r3
 8002958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800295c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	4611      	mov	r1, r2
 8002968:	4618      	mov	r0, r3
 800296a:	f003 fe9c 	bl	80066a6 <USB_HC_Halt>
}
 800296e:	e2d8      	b.n	8002f22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b01      	cmp	r3, #1
 8002984:	d140      	bne.n	8002a08 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	212c      	movs	r1, #44	; 0x2c
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	4413      	add	r3, r2
 8002992:	335c      	adds	r3, #92	; 0x5c
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029aa:	2b40      	cmp	r3, #64	; 0x40
 80029ac:	d111      	bne.n	80029d2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	333d      	adds	r3, #61	; 0x3d
 80029bc:	2201      	movs	r2, #1
 80029be:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029cc:	461a      	mov	r2, r3
 80029ce:	2340      	movs	r3, #64	; 0x40
 80029d0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029de:	461a      	mov	r2, r3
 80029e0:	2301      	movs	r3, #1
 80029e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	212c      	movs	r1, #44	; 0x2c
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	3361      	adds	r3, #97	; 0x61
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f003 fe50 	bl	80066a6 <USB_HC_Halt>
}
 8002a06:	e28c      	b.n	8002f22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1a:	2b40      	cmp	r3, #64	; 0x40
 8002a1c:	d12c      	bne.n	8002a78 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	3361      	adds	r3, #97	; 0x61
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	212c      	movs	r1, #44	; 0x2c
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	333d      	adds	r3, #61	; 0x3d
 8002a3e:	2201      	movs	r2, #1
 8002a40:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	212c      	movs	r1, #44	; 0x2c
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	335c      	adds	r3, #92	; 0x5c
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f003 fe21 	bl	80066a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a70:	461a      	mov	r2, r3
 8002a72:	2340      	movs	r3, #64	; 0x40
 8002a74:	6093      	str	r3, [r2, #8]
}
 8002a76:	e254      	b.n	8002f22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d11a      	bne.n	8002ac4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2308      	movs	r3, #8
 8002a9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	212c      	movs	r1, #44	; 0x2c
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	3361      	adds	r3, #97	; 0x61
 8002aae:	2205      	movs	r2, #5
 8002ab0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f003 fdf2 	bl	80066a6 <USB_HC_Halt>
}
 8002ac2:	e22e      	b.n	8002f22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b10      	cmp	r3, #16
 8002ad8:	d140      	bne.n	8002b5c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	212c      	movs	r1, #44	; 0x2c
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	335c      	adds	r3, #92	; 0x5c
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	212c      	movs	r1, #44	; 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	3361      	adds	r3, #97	; 0x61
 8002afa:	2203      	movs	r2, #3
 8002afc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	333d      	adds	r3, #61	; 0x3d
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d112      	bne.n	8002b38 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	212c      	movs	r1, #44	; 0x2c
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	333c      	adds	r3, #60	; 0x3c
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d108      	bne.n	8002b38 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	333d      	adds	r3, #61	; 0x3d
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f003 fdaf 	bl	80066a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	461a      	mov	r2, r3
 8002b56:	2310      	movs	r3, #16
 8002b58:	6093      	str	r3, [r2, #8]
}
 8002b5a:	e1e2      	b.n	8002f22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6e:	2b80      	cmp	r3, #128	; 0x80
 8002b70:	d164      	bne.n	8002c3c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d111      	bne.n	8002b9e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	212c      	movs	r1, #44	; 0x2c
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	3361      	adds	r3, #97	; 0x61
 8002b88:	2206      	movs	r2, #6
 8002b8a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f003 fd85 	bl	80066a6 <USB_HC_Halt>
 8002b9c:	e044      	b.n	8002c28 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	212c      	movs	r1, #44	; 0x2c
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	335c      	adds	r3, #92	; 0x5c
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	202c      	movs	r0, #44	; 0x2c
 8002bb6:	fb00 f303 	mul.w	r3, r0, r3
 8002bba:	440b      	add	r3, r1
 8002bbc:	335c      	adds	r3, #92	; 0x5c
 8002bbe:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	335c      	adds	r3, #92	; 0x5c
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d920      	bls.n	8002c16 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	335c      	adds	r3, #92	; 0x5c
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3360      	adds	r3, #96	; 0x60
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	b2d9      	uxtb	r1, r3
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	202c      	movs	r0, #44	; 0x2c
 8002c02:	fb00 f303 	mul.w	r3, r0, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	3360      	adds	r3, #96	; 0x60
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f005 ffee 	bl	8008bf0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c14:	e008      	b.n	8002c28 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	212c      	movs	r1, #44	; 0x2c
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	3360      	adds	r3, #96	; 0x60
 8002c24:	2202      	movs	r2, #2
 8002c26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c34:	461a      	mov	r2, r3
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	6093      	str	r3, [r2, #8]
}
 8002c3a:	e172      	b.n	8002f22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c52:	d11b      	bne.n	8002c8c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	212c      	movs	r1, #44	; 0x2c
 8002c5a:	fb01 f303 	mul.w	r3, r1, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	3361      	adds	r3, #97	; 0x61
 8002c62:	2208      	movs	r2, #8
 8002c64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f003 fd18 	bl	80066a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c82:	461a      	mov	r2, r3
 8002c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c88:	6093      	str	r3, [r2, #8]
}
 8002c8a:	e14a      	b.n	8002f22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	015a      	lsls	r2, r3, #5
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	f040 813f 	bne.w	8002f22 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	212c      	movs	r1, #44	; 0x2c
 8002caa:	fb01 f303 	mul.w	r3, r1, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	3361      	adds	r3, #97	; 0x61
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d17d      	bne.n	8002db4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	212c      	movs	r1, #44	; 0x2c
 8002cbe:	fb01 f303 	mul.w	r3, r1, r3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3360      	adds	r3, #96	; 0x60
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	212c      	movs	r1, #44	; 0x2c
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	333f      	adds	r3, #63	; 0x3f
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d00a      	beq.n	8002cf4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	212c      	movs	r1, #44	; 0x2c
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	333f      	adds	r3, #63	; 0x3f
 8002cec:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	f040 8100 	bne.w	8002ef4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d113      	bne.n	8002d24 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	3355      	adds	r3, #85	; 0x55
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	f083 0301 	eor.w	r3, r3, #1
 8002d10:	b2d8      	uxtb	r0, r3
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	212c      	movs	r1, #44	; 0x2c
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3355      	adds	r3, #85	; 0x55
 8002d20:	4602      	mov	r2, r0
 8002d22:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	f040 80e3 	bne.w	8002ef4 <HCD_HC_OUT_IRQHandler+0x69c>
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	212c      	movs	r1, #44	; 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	334c      	adds	r3, #76	; 0x4c
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 80d8 	beq.w	8002ef4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	334c      	adds	r3, #76	; 0x4c
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	202c      	movs	r0, #44	; 0x2c
 8002d5a:	fb00 f202 	mul.w	r2, r0, r2
 8002d5e:	440a      	add	r2, r1
 8002d60:	3240      	adds	r2, #64	; 0x40
 8002d62:	8812      	ldrh	r2, [r2, #0]
 8002d64:	4413      	add	r3, r2
 8002d66:	3b01      	subs	r3, #1
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	202c      	movs	r0, #44	; 0x2c
 8002d6e:	fb00 f202 	mul.w	r2, r0, r2
 8002d72:	440a      	add	r2, r1
 8002d74:	3240      	adds	r2, #64	; 0x40
 8002d76:	8812      	ldrh	r2, [r2, #0]
 8002d78:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80b5 	beq.w	8002ef4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	212c      	movs	r1, #44	; 0x2c
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	4413      	add	r3, r2
 8002d96:	3355      	adds	r3, #85	; 0x55
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	f083 0301 	eor.w	r3, r3, #1
 8002d9e:	b2d8      	uxtb	r0, r3
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	212c      	movs	r1, #44	; 0x2c
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	3355      	adds	r3, #85	; 0x55
 8002dae:	4602      	mov	r2, r0
 8002db0:	701a      	strb	r2, [r3, #0]
 8002db2:	e09f      	b.n	8002ef4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3361      	adds	r3, #97	; 0x61
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d109      	bne.n	8002ddc <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	212c      	movs	r1, #44	; 0x2c
 8002dce:	fb01 f303 	mul.w	r3, r1, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3360      	adds	r3, #96	; 0x60
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	701a      	strb	r2, [r3, #0]
 8002dda:	e08b      	b.n	8002ef4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	212c      	movs	r1, #44	; 0x2c
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	3361      	adds	r3, #97	; 0x61
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d109      	bne.n	8002e04 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	212c      	movs	r1, #44	; 0x2c
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3360      	adds	r3, #96	; 0x60
 8002dfe:	2202      	movs	r2, #2
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	e077      	b.n	8002ef4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	212c      	movs	r1, #44	; 0x2c
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	3361      	adds	r3, #97	; 0x61
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b05      	cmp	r3, #5
 8002e16:	d109      	bne.n	8002e2c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	212c      	movs	r1, #44	; 0x2c
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	3360      	adds	r3, #96	; 0x60
 8002e26:	2205      	movs	r2, #5
 8002e28:	701a      	strb	r2, [r3, #0]
 8002e2a:	e063      	b.n	8002ef4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	212c      	movs	r1, #44	; 0x2c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	3361      	adds	r3, #97	; 0x61
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b06      	cmp	r3, #6
 8002e3e:	d009      	beq.n	8002e54 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	212c      	movs	r1, #44	; 0x2c
 8002e46:	fb01 f303 	mul.w	r3, r1, r3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3361      	adds	r3, #97	; 0x61
 8002e4e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d14f      	bne.n	8002ef4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	212c      	movs	r1, #44	; 0x2c
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	335c      	adds	r3, #92	; 0x5c
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	202c      	movs	r0, #44	; 0x2c
 8002e6c:	fb00 f303 	mul.w	r3, r0, r3
 8002e70:	440b      	add	r3, r1
 8002e72:	335c      	adds	r3, #92	; 0x5c
 8002e74:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	212c      	movs	r1, #44	; 0x2c
 8002e7c:	fb01 f303 	mul.w	r3, r1, r3
 8002e80:	4413      	add	r3, r2
 8002e82:	335c      	adds	r3, #92	; 0x5c
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d912      	bls.n	8002eb0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	212c      	movs	r1, #44	; 0x2c
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	4413      	add	r3, r2
 8002e96:	335c      	adds	r3, #92	; 0x5c
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	212c      	movs	r1, #44	; 0x2c
 8002ea2:	fb01 f303 	mul.w	r3, r1, r3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3360      	adds	r3, #96	; 0x60
 8002eaa:	2204      	movs	r2, #4
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e021      	b.n	8002ef4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	212c      	movs	r1, #44	; 0x2c
 8002eb6:	fb01 f303 	mul.w	r3, r1, r3
 8002eba:	4413      	add	r3, r2
 8002ebc:	3360      	adds	r3, #96	; 0x60
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ed8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ee0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eee:	461a      	mov	r2, r3
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f00:	461a      	mov	r2, r3
 8002f02:	2302      	movs	r3, #2
 8002f04:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	b2d9      	uxtb	r1, r3
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	202c      	movs	r0, #44	; 0x2c
 8002f10:	fb00 f303 	mul.w	r3, r0, r3
 8002f14:	4413      	add	r3, r2
 8002f16:	3360      	adds	r3, #96	; 0x60
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f005 fe67 	bl	8008bf0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f22:	bf00      	nop
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b08a      	sub	sp, #40	; 0x28
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	0c5b      	lsrs	r3, r3, #17
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	091b      	lsrs	r3, r3, #4
 8002f5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f5e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d004      	beq.n	8002f70 <HCD_RXQLVL_IRQHandler+0x46>
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b05      	cmp	r3, #5
 8002f6a:	f000 80a9 	beq.w	80030c0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002f6e:	e0aa      	b.n	80030c6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 80a6 	beq.w	80030c4 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	212c      	movs	r1, #44	; 0x2c
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	3344      	adds	r3, #68	; 0x44
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 809b 	beq.w	80030c4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	212c      	movs	r1, #44	; 0x2c
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	3350      	adds	r3, #80	; 0x50
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	441a      	add	r2, r3
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	202c      	movs	r0, #44	; 0x2c
 8002fa8:	fb00 f303 	mul.w	r3, r0, r3
 8002fac:	440b      	add	r3, r1
 8002fae:	334c      	adds	r3, #76	; 0x4c
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d87a      	bhi.n	80030ac <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	212c      	movs	r1, #44	; 0x2c
 8002fc0:	fb01 f303 	mul.w	r3, r1, r3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3344      	adds	r3, #68	; 0x44
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	b292      	uxth	r2, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	f002 fec0 	bl	8005d54 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	212c      	movs	r1, #44	; 0x2c
 8002fda:	fb01 f303 	mul.w	r3, r1, r3
 8002fde:	4413      	add	r3, r2
 8002fe0:	3344      	adds	r3, #68	; 0x44
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	441a      	add	r2, r3
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	202c      	movs	r0, #44	; 0x2c
 8002fee:	fb00 f303 	mul.w	r3, r0, r3
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3344      	adds	r3, #68	; 0x44
 8002ff6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	212c      	movs	r1, #44	; 0x2c
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	4413      	add	r3, r2
 8003004:	3350      	adds	r3, #80	; 0x50
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	441a      	add	r2, r3
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	202c      	movs	r0, #44	; 0x2c
 8003012:	fb00 f303 	mul.w	r3, r0, r3
 8003016:	440b      	add	r3, r1
 8003018:	3350      	adds	r3, #80	; 0x50
 800301a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	4413      	add	r3, r2
 8003024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	0cdb      	lsrs	r3, r3, #19
 800302c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003030:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	212c      	movs	r1, #44	; 0x2c
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	4413      	add	r3, r2
 800303e:	3340      	adds	r3, #64	; 0x40
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4293      	cmp	r3, r2
 8003048:	d13c      	bne.n	80030c4 <HCD_RXQLVL_IRQHandler+0x19a>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d039      	beq.n	80030c4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003066:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800306e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	4413      	add	r3, r2
 8003078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307c:	461a      	mov	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	212c      	movs	r1, #44	; 0x2c
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	4413      	add	r3, r2
 800308e:	3354      	adds	r3, #84	; 0x54
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	f083 0301 	eor.w	r3, r3, #1
 8003096:	b2d8      	uxtb	r0, r3
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	212c      	movs	r1, #44	; 0x2c
 800309e:	fb01 f303 	mul.w	r3, r1, r3
 80030a2:	4413      	add	r3, r2
 80030a4:	3354      	adds	r3, #84	; 0x54
 80030a6:	4602      	mov	r2, r0
 80030a8:	701a      	strb	r2, [r3, #0]
      break;
 80030aa:	e00b      	b.n	80030c4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	212c      	movs	r1, #44	; 0x2c
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	4413      	add	r3, r2
 80030b8:	3360      	adds	r3, #96	; 0x60
 80030ba:	2204      	movs	r2, #4
 80030bc:	701a      	strb	r2, [r3, #0]
      break;
 80030be:	e001      	b.n	80030c4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80030c0:	bf00      	nop
 80030c2:	e000      	b.n	80030c6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80030c4:	bf00      	nop
  }
}
 80030c6:	bf00      	nop
 80030c8:	3728      	adds	r7, #40	; 0x28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b086      	sub	sp, #24
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80030fa:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b02      	cmp	r3, #2
 8003104:	d10b      	bne.n	800311e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b01      	cmp	r3, #1
 800310e:	d102      	bne.n	8003116 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f005 fd51 	bl	8008bb8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f043 0302 	orr.w	r3, r3, #2
 800311c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f003 0308 	and.w	r3, r3, #8
 8003124:	2b08      	cmp	r3, #8
 8003126:	d132      	bne.n	800318e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f043 0308 	orr.w	r3, r3, #8
 800312e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b04      	cmp	r3, #4
 8003138:	d126      	bne.n	8003188 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d113      	bne.n	800316a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003148:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800314c:	d106      	bne.n	800315c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2102      	movs	r1, #2
 8003154:	4618      	mov	r0, r3
 8003156:	f002 ff6b 	bl	8006030 <USB_InitFSLSPClkSel>
 800315a:	e011      	b.n	8003180 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2101      	movs	r1, #1
 8003162:	4618      	mov	r0, r3
 8003164:	f002 ff64 	bl	8006030 <USB_InitFSLSPClkSel>
 8003168:	e00a      	b.n	8003180 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d106      	bne.n	8003180 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003178:	461a      	mov	r2, r3
 800317a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800317e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f005 fd43 	bl	8008c0c <HAL_HCD_PortEnabled_Callback>
 8003186:	e002      	b.n	800318e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f005 fd4d 	bl	8008c28 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f003 0320 	and.w	r3, r3, #32
 8003194:	2b20      	cmp	r3, #32
 8003196:	d103      	bne.n	80031a0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f043 0320 	orr.w	r3, r3, #32
 800319e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031a6:	461a      	mov	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	6013      	str	r3, [r2, #0]
}
 80031ac:	bf00      	nop
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e12b      	b.n	800341e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fd fdd8 	bl	8000d90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2224      	movs	r2, #36	; 0x24
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003206:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003216:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003218:	f001 fa20 	bl	800465c <HAL_RCC_GetPCLK1Freq>
 800321c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4a81      	ldr	r2, [pc, #516]	; (8003428 <HAL_I2C_Init+0x274>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d807      	bhi.n	8003238 <HAL_I2C_Init+0x84>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4a80      	ldr	r2, [pc, #512]	; (800342c <HAL_I2C_Init+0x278>)
 800322c:	4293      	cmp	r3, r2
 800322e:	bf94      	ite	ls
 8003230:	2301      	movls	r3, #1
 8003232:	2300      	movhi	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	e006      	b.n	8003246 <HAL_I2C_Init+0x92>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a7d      	ldr	r2, [pc, #500]	; (8003430 <HAL_I2C_Init+0x27c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	bf94      	ite	ls
 8003240:	2301      	movls	r3, #1
 8003242:	2300      	movhi	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e0e7      	b.n	800341e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4a78      	ldr	r2, [pc, #480]	; (8003434 <HAL_I2C_Init+0x280>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	0c9b      	lsrs	r3, r3, #18
 8003258:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	4a6a      	ldr	r2, [pc, #424]	; (8003428 <HAL_I2C_Init+0x274>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d802      	bhi.n	8003288 <HAL_I2C_Init+0xd4>
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	3301      	adds	r3, #1
 8003286:	e009      	b.n	800329c <HAL_I2C_Init+0xe8>
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	4a69      	ldr	r2, [pc, #420]	; (8003438 <HAL_I2C_Init+0x284>)
 8003294:	fba2 2303 	umull	r2, r3, r2, r3
 8003298:	099b      	lsrs	r3, r3, #6
 800329a:	3301      	adds	r3, #1
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	430b      	orrs	r3, r1
 80032a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	495c      	ldr	r1, [pc, #368]	; (8003428 <HAL_I2C_Init+0x274>)
 80032b8:	428b      	cmp	r3, r1
 80032ba:	d819      	bhi.n	80032f0 <HAL_I2C_Init+0x13c>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1e59      	subs	r1, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80032ca:	1c59      	adds	r1, r3, #1
 80032cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032d0:	400b      	ands	r3, r1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <HAL_I2C_Init+0x138>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1e59      	subs	r1, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032e4:	3301      	adds	r3, #1
 80032e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ea:	e051      	b.n	8003390 <HAL_I2C_Init+0x1dc>
 80032ec:	2304      	movs	r3, #4
 80032ee:	e04f      	b.n	8003390 <HAL_I2C_Init+0x1dc>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d111      	bne.n	800331c <HAL_I2C_Init+0x168>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	1e58      	subs	r0, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6859      	ldr	r1, [r3, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	440b      	add	r3, r1
 8003306:	fbb0 f3f3 	udiv	r3, r0, r3
 800330a:	3301      	adds	r3, #1
 800330c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	e012      	b.n	8003342 <HAL_I2C_Init+0x18e>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1e58      	subs	r0, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	0099      	lsls	r1, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003332:	3301      	adds	r3, #1
 8003334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_I2C_Init+0x196>
 8003346:	2301      	movs	r3, #1
 8003348:	e022      	b.n	8003390 <HAL_I2C_Init+0x1dc>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10e      	bne.n	8003370 <HAL_I2C_Init+0x1bc>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1e58      	subs	r0, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6859      	ldr	r1, [r3, #4]
 800335a:	460b      	mov	r3, r1
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	440b      	add	r3, r1
 8003360:	fbb0 f3f3 	udiv	r3, r0, r3
 8003364:	3301      	adds	r3, #1
 8003366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800336a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800336e:	e00f      	b.n	8003390 <HAL_I2C_Init+0x1dc>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1e58      	subs	r0, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6859      	ldr	r1, [r3, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	0099      	lsls	r1, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	fbb0 f3f3 	udiv	r3, r0, r3
 8003386:	3301      	adds	r3, #1
 8003388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	6809      	ldr	r1, [r1, #0]
 8003394:	4313      	orrs	r3, r2
 8003396:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69da      	ldr	r2, [r3, #28]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6911      	ldr	r1, [r2, #16]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	68d2      	ldr	r2, [r2, #12]
 80033ca:	4311      	orrs	r1, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	430b      	orrs	r3, r1
 80033d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	000186a0 	.word	0x000186a0
 800342c:	001e847f 	.word	0x001e847f
 8003430:	003d08ff 	.word	0x003d08ff
 8003434:	431bde83 	.word	0x431bde83
 8003438:	10624dd3 	.word	0x10624dd3

0800343c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e128      	b.n	80036a0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d109      	bne.n	800346e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a90      	ldr	r2, [pc, #576]	; (80036a8 <HAL_I2S_Init+0x26c>)
 8003466:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7fd fcd9 	bl	8000e20 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2202      	movs	r2, #2
 8003472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003484:	f023 030f 	bic.w	r3, r3, #15
 8003488:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2202      	movs	r2, #2
 8003490:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	2b02      	cmp	r3, #2
 8003498:	d060      	beq.n	800355c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d102      	bne.n	80034a8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80034a2:	2310      	movs	r3, #16
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	e001      	b.n	80034ac <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80034a8:	2320      	movs	r3, #32
 80034aa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d802      	bhi.n	80034ba <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80034ba:	2001      	movs	r0, #1
 80034bc:	f001 f9d2 	bl	8004864 <HAL_RCCEx_GetPeriphCLKFreq>
 80034c0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ca:	d125      	bne.n	8003518 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d010      	beq.n	80034f6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	fbb2 f2f3 	udiv	r2, r2, r3
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	461a      	mov	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f0:	3305      	adds	r3, #5
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	e01f      	b.n	8003536 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	461a      	mov	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003512:	3305      	adds	r3, #5
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	e00e      	b.n	8003536 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	461a      	mov	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003532:	3305      	adds	r3, #5
 8003534:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4a5c      	ldr	r2, [pc, #368]	; (80036ac <HAL_I2S_Init+0x270>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	08db      	lsrs	r3, r3, #3
 8003540:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	085b      	lsrs	r3, r3, #1
 8003552:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	61bb      	str	r3, [r7, #24]
 800355a:	e003      	b.n	8003564 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800355c:	2302      	movs	r3, #2
 800355e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d902      	bls.n	8003570 <HAL_I2S_Init+0x134>
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	2bff      	cmp	r3, #255	; 0xff
 800356e:	d907      	bls.n	8003580 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003574:	f043 0210 	orr.w	r2, r3, #16
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e08f      	b.n	80036a0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	ea42 0103 	orr.w	r1, r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69fa      	ldr	r2, [r7, #28]
 8003590:	430a      	orrs	r2, r1
 8003592:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800359e:	f023 030f 	bic.w	r3, r3, #15
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6851      	ldr	r1, [r2, #4]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6892      	ldr	r2, [r2, #8]
 80035aa:	4311      	orrs	r1, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	68d2      	ldr	r2, [r2, #12]
 80035b0:	4311      	orrs	r1, r2
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6992      	ldr	r2, [r2, #24]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	431a      	orrs	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035c2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d161      	bne.n	8003690 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a38      	ldr	r2, [pc, #224]	; (80036b0 <HAL_I2S_Init+0x274>)
 80035d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a37      	ldr	r2, [pc, #220]	; (80036b4 <HAL_I2S_Init+0x278>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d101      	bne.n	80035e0 <HAL_I2S_Init+0x1a4>
 80035dc:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <HAL_I2S_Init+0x27c>)
 80035de:	e001      	b.n	80035e4 <HAL_I2S_Init+0x1a8>
 80035e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	4932      	ldr	r1, [pc, #200]	; (80036b4 <HAL_I2S_Init+0x278>)
 80035ec:	428a      	cmp	r2, r1
 80035ee:	d101      	bne.n	80035f4 <HAL_I2S_Init+0x1b8>
 80035f0:	4a31      	ldr	r2, [pc, #196]	; (80036b8 <HAL_I2S_Init+0x27c>)
 80035f2:	e001      	b.n	80035f8 <HAL_I2S_Init+0x1bc>
 80035f4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80035f8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80035fc:	f023 030f 	bic.w	r3, r3, #15
 8003600:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a2b      	ldr	r2, [pc, #172]	; (80036b4 <HAL_I2S_Init+0x278>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d101      	bne.n	8003610 <HAL_I2S_Init+0x1d4>
 800360c:	4b2a      	ldr	r3, [pc, #168]	; (80036b8 <HAL_I2S_Init+0x27c>)
 800360e:	e001      	b.n	8003614 <HAL_I2S_Init+0x1d8>
 8003610:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003614:	2202      	movs	r2, #2
 8003616:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a25      	ldr	r2, [pc, #148]	; (80036b4 <HAL_I2S_Init+0x278>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d101      	bne.n	8003626 <HAL_I2S_Init+0x1ea>
 8003622:	4b25      	ldr	r3, [pc, #148]	; (80036b8 <HAL_I2S_Init+0x27c>)
 8003624:	e001      	b.n	800362a <HAL_I2S_Init+0x1ee>
 8003626:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003636:	d003      	beq.n	8003640 <HAL_I2S_Init+0x204>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d103      	bne.n	8003648 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	e001      	b.n	800364c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003648:	2300      	movs	r3, #0
 800364a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003656:	4313      	orrs	r3, r2
 8003658:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003660:	4313      	orrs	r3, r2
 8003662:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800366a:	4313      	orrs	r3, r2
 800366c:	b29a      	uxth	r2, r3
 800366e:	897b      	ldrh	r3, [r7, #10]
 8003670:	4313      	orrs	r3, r2
 8003672:	b29b      	uxth	r3, r3
 8003674:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003678:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a0d      	ldr	r2, [pc, #52]	; (80036b4 <HAL_I2S_Init+0x278>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d101      	bne.n	8003688 <HAL_I2S_Init+0x24c>
 8003684:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <HAL_I2S_Init+0x27c>)
 8003686:	e001      	b.n	800368c <HAL_I2S_Init+0x250>
 8003688:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800368c:	897a      	ldrh	r2, [r7, #10]
 800368e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3720      	adds	r7, #32
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	080037b3 	.word	0x080037b3
 80036ac:	cccccccd 	.word	0xcccccccd
 80036b0:	080038c9 	.word	0x080038c9
 80036b4:	40003800 	.word	0x40003800
 80036b8:	40003400 	.word	0x40003400

080036bc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	881a      	ldrh	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	1c9a      	adds	r2, r3, #2
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10e      	bne.n	800374c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800373c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff ffb8 	bl	80036bc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800374c:	bf00      	nop
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	b292      	uxth	r2, r2
 8003768:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	1c9a      	adds	r2, r3, #2
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10e      	bne.n	80037aa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800379a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff ff93 	bl	80036d0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b086      	sub	sp, #24
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d13a      	bne.n	8003844 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d109      	bne.n	80037ec <I2S_IRQHandler+0x3a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e2:	2b40      	cmp	r3, #64	; 0x40
 80037e4:	d102      	bne.n	80037ec <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff ffb4 	bl	8003754 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f2:	2b40      	cmp	r3, #64	; 0x40
 80037f4:	d126      	bne.n	8003844 <I2S_IRQHandler+0x92>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f003 0320 	and.w	r3, r3, #32
 8003800:	2b20      	cmp	r3, #32
 8003802:	d11f      	bne.n	8003844 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003812:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003814:	2300      	movs	r3, #0
 8003816:	613b      	str	r3, [r7, #16]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	f043 0202 	orr.w	r2, r3, #2
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff ff50 	bl	80036e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b03      	cmp	r3, #3
 800384e:	d136      	bne.n	80038be <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b02      	cmp	r3, #2
 8003858:	d109      	bne.n	800386e <I2S_IRQHandler+0xbc>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003864:	2b80      	cmp	r3, #128	; 0x80
 8003866:	d102      	bne.n	800386e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff ff45 	bl	80036f8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b08      	cmp	r3, #8
 8003876:	d122      	bne.n	80038be <I2S_IRQHandler+0x10c>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	2b20      	cmp	r3, #32
 8003884:	d11b      	bne.n	80038be <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003894:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b0:	f043 0204 	orr.w	r2, r3, #4
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff ff13 	bl	80036e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038be:	bf00      	nop
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
	...

080038c8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a92      	ldr	r2, [pc, #584]	; (8003b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d101      	bne.n	80038e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80038e2:	4b92      	ldr	r3, [pc, #584]	; (8003b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038e4:	e001      	b.n	80038ea <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80038e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a8b      	ldr	r2, [pc, #556]	; (8003b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d101      	bne.n	8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003900:	4b8a      	ldr	r3, [pc, #552]	; (8003b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003902:	e001      	b.n	8003908 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003904:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003914:	d004      	beq.n	8003920 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	f040 8099 	bne.w	8003a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b02      	cmp	r3, #2
 8003928:	d107      	bne.n	800393a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f925 	bl	8003b84 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b01      	cmp	r3, #1
 8003942:	d107      	bne.n	8003954 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f9c8 	bl	8003ce4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395a:	2b40      	cmp	r3, #64	; 0x40
 800395c:	d13a      	bne.n	80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	2b00      	cmp	r3, #0
 8003966:	d035      	beq.n	80039d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a6e      	ldr	r2, [pc, #440]	; (8003b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d101      	bne.n	8003976 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003972:	4b6e      	ldr	r3, [pc, #440]	; (8003b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003974:	e001      	b.n	800397a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003976:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4969      	ldr	r1, [pc, #420]	; (8003b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003982:	428b      	cmp	r3, r1
 8003984:	d101      	bne.n	800398a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003986:	4b69      	ldr	r3, [pc, #420]	; (8003b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003988:	e001      	b.n	800398e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800398a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800398e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003992:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039a2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039a4:	2300      	movs	r3, #0
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	f043 0202 	orr.w	r2, r3, #2
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff fe88 	bl	80036e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b08      	cmp	r3, #8
 80039dc:	f040 80c3 	bne.w	8003b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 80bd 	beq.w	8003b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039fa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a49      	ldr	r2, [pc, #292]	; (8003b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d101      	bne.n	8003a0a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003a06:	4b49      	ldr	r3, [pc, #292]	; (8003b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a08:	e001      	b.n	8003a0e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003a0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4944      	ldr	r1, [pc, #272]	; (8003b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a16:	428b      	cmp	r3, r1
 8003a18:	d101      	bne.n	8003a1e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003a1a:	4b44      	ldr	r3, [pc, #272]	; (8003b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a1c:	e001      	b.n	8003a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003a1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a26:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60bb      	str	r3, [r7, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	60bb      	str	r3, [r7, #8]
 8003a34:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a42:	f043 0204 	orr.w	r2, r3, #4
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff fe4a 	bl	80036e4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a50:	e089      	b.n	8003b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d107      	bne.n	8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f8be 	bl	8003be8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d107      	bne.n	8003a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f8fd 	bl	8003c80 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8c:	2b40      	cmp	r3, #64	; 0x40
 8003a8e:	d12f      	bne.n	8003af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f003 0320 	and.w	r3, r3, #32
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d02a      	beq.n	8003af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003aa8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1e      	ldr	r2, [pc, #120]	; (8003b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d101      	bne.n	8003ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ab4:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ab6:	e001      	b.n	8003abc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003ab8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4919      	ldr	r1, [pc, #100]	; (8003b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ac4:	428b      	cmp	r3, r1
 8003ac6:	d101      	bne.n	8003acc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003ac8:	4b18      	ldr	r3, [pc, #96]	; (8003b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003aca:	e001      	b.n	8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003acc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ad0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ad4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	f043 0202 	orr.w	r2, r3, #2
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff fdfa 	bl	80036e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d136      	bne.n	8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d031      	beq.n	8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a07      	ldr	r2, [pc, #28]	; (8003b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d101      	bne.n	8003b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003b0e:	4b07      	ldr	r3, [pc, #28]	; (8003b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b10:	e001      	b.n	8003b16 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003b12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4902      	ldr	r1, [pc, #8]	; (8003b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b1e:	428b      	cmp	r3, r1
 8003b20:	d106      	bne.n	8003b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003b22:	4b02      	ldr	r3, [pc, #8]	; (8003b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b24:	e006      	b.n	8003b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003b26:	bf00      	nop
 8003b28:	40003800 	.word	0x40003800
 8003b2c:	40003400 	.word	0x40003400
 8003b30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b38:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b48:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	f043 0204 	orr.w	r2, r3, #4
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff fdc0 	bl	80036e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b64:	e000      	b.n	8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b66:	bf00      	nop
}
 8003b68:	bf00      	nop
 8003b6a:	3720      	adds	r7, #32
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	1c99      	adds	r1, r3, #2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6251      	str	r1, [r2, #36]	; 0x24
 8003b96:	881a      	ldrh	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d113      	bne.n	8003bde <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bc4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d106      	bne.n	8003bde <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff ffc9 	bl	8003b70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bde:	bf00      	nop
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	1c99      	adds	r1, r3, #2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6251      	str	r1, [r2, #36]	; 0x24
 8003bfa:	8819      	ldrh	r1, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a1d      	ldr	r2, [pc, #116]	; (8003c78 <I2SEx_TxISR_I2SExt+0x90>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d101      	bne.n	8003c0a <I2SEx_TxISR_I2SExt+0x22>
 8003c06:	4b1d      	ldr	r3, [pc, #116]	; (8003c7c <I2SEx_TxISR_I2SExt+0x94>)
 8003c08:	e001      	b.n	8003c0e <I2SEx_TxISR_I2SExt+0x26>
 8003c0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c0e:	460a      	mov	r2, r1
 8003c10:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d121      	bne.n	8003c6e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a12      	ldr	r2, [pc, #72]	; (8003c78 <I2SEx_TxISR_I2SExt+0x90>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d101      	bne.n	8003c38 <I2SEx_TxISR_I2SExt+0x50>
 8003c34:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <I2SEx_TxISR_I2SExt+0x94>)
 8003c36:	e001      	b.n	8003c3c <I2SEx_TxISR_I2SExt+0x54>
 8003c38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	490d      	ldr	r1, [pc, #52]	; (8003c78 <I2SEx_TxISR_I2SExt+0x90>)
 8003c44:	428b      	cmp	r3, r1
 8003c46:	d101      	bne.n	8003c4c <I2SEx_TxISR_I2SExt+0x64>
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <I2SEx_TxISR_I2SExt+0x94>)
 8003c4a:	e001      	b.n	8003c50 <I2SEx_TxISR_I2SExt+0x68>
 8003c4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d106      	bne.n	8003c6e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff ff81 	bl	8003b70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40003800 	.word	0x40003800
 8003c7c:	40003400 	.word	0x40003400

08003c80 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68d8      	ldr	r0, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	1c99      	adds	r1, r3, #2
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c98:	b282      	uxth	r2, r0
 8003c9a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d113      	bne.n	8003cdc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cc2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff ff4a 	bl	8003b70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cdc:	bf00      	nop
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a20      	ldr	r2, [pc, #128]	; (8003d74 <I2SEx_RxISR_I2SExt+0x90>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d101      	bne.n	8003cfa <I2SEx_RxISR_I2SExt+0x16>
 8003cf6:	4b20      	ldr	r3, [pc, #128]	; (8003d78 <I2SEx_RxISR_I2SExt+0x94>)
 8003cf8:	e001      	b.n	8003cfe <I2SEx_RxISR_I2SExt+0x1a>
 8003cfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cfe:	68d8      	ldr	r0, [r3, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	1c99      	adds	r1, r3, #2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d0a:	b282      	uxth	r2, r0
 8003d0c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d121      	bne.n	8003d6a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a12      	ldr	r2, [pc, #72]	; (8003d74 <I2SEx_RxISR_I2SExt+0x90>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d101      	bne.n	8003d34 <I2SEx_RxISR_I2SExt+0x50>
 8003d30:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <I2SEx_RxISR_I2SExt+0x94>)
 8003d32:	e001      	b.n	8003d38 <I2SEx_RxISR_I2SExt+0x54>
 8003d34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	490d      	ldr	r1, [pc, #52]	; (8003d74 <I2SEx_RxISR_I2SExt+0x90>)
 8003d40:	428b      	cmp	r3, r1
 8003d42:	d101      	bne.n	8003d48 <I2SEx_RxISR_I2SExt+0x64>
 8003d44:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <I2SEx_RxISR_I2SExt+0x94>)
 8003d46:	e001      	b.n	8003d4c <I2SEx_RxISR_I2SExt+0x68>
 8003d48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d50:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d106      	bne.n	8003d6a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff ff03 	bl	8003b70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40003800 	.word	0x40003800
 8003d78:	40003400 	.word	0x40003400

08003d7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e267      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d075      	beq.n	8003e86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d9a:	4b88      	ldr	r3, [pc, #544]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d00c      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003da6:	4b85      	ldr	r3, [pc, #532]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d112      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003db2:	4b82      	ldr	r3, [pc, #520]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dbe:	d10b      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc0:	4b7e      	ldr	r3, [pc, #504]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d05b      	beq.n	8003e84 <HAL_RCC_OscConfig+0x108>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d157      	bne.n	8003e84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e242      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de0:	d106      	bne.n	8003df0 <HAL_RCC_OscConfig+0x74>
 8003de2:	4b76      	ldr	r3, [pc, #472]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a75      	ldr	r2, [pc, #468]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	e01d      	b.n	8003e2c <HAL_RCC_OscConfig+0xb0>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003df8:	d10c      	bne.n	8003e14 <HAL_RCC_OscConfig+0x98>
 8003dfa:	4b70      	ldr	r3, [pc, #448]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a6f      	ldr	r2, [pc, #444]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	4b6d      	ldr	r3, [pc, #436]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a6c      	ldr	r2, [pc, #432]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	e00b      	b.n	8003e2c <HAL_RCC_OscConfig+0xb0>
 8003e14:	4b69      	ldr	r3, [pc, #420]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a68      	ldr	r2, [pc, #416]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	4b66      	ldr	r3, [pc, #408]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a65      	ldr	r2, [pc, #404]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d013      	beq.n	8003e5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e34:	f7fd fad4 	bl	80013e0 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e3c:	f7fd fad0 	bl	80013e0 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b64      	cmp	r3, #100	; 0x64
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e207      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4e:	4b5b      	ldr	r3, [pc, #364]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f0      	beq.n	8003e3c <HAL_RCC_OscConfig+0xc0>
 8003e5a:	e014      	b.n	8003e86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5c:	f7fd fac0 	bl	80013e0 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e64:	f7fd fabc 	bl	80013e0 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b64      	cmp	r3, #100	; 0x64
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e1f3      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e76:	4b51      	ldr	r3, [pc, #324]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0xe8>
 8003e82:	e000      	b.n	8003e86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d063      	beq.n	8003f5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e92:	4b4a      	ldr	r3, [pc, #296]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00b      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e9e:	4b47      	ldr	r3, [pc, #284]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d11c      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eaa:	4b44      	ldr	r3, [pc, #272]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d116      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb6:	4b41      	ldr	r3, [pc, #260]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <HAL_RCC_OscConfig+0x152>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d001      	beq.n	8003ece <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e1c7      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ece:	4b3b      	ldr	r3, [pc, #236]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4937      	ldr	r1, [pc, #220]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ee2:	e03a      	b.n	8003f5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d020      	beq.n	8003f2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eec:	4b34      	ldr	r3, [pc, #208]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef2:	f7fd fa75 	bl	80013e0 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003efa:	f7fd fa71 	bl	80013e0 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e1a8      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f0c:	4b2b      	ldr	r3, [pc, #172]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f18:	4b28      	ldr	r3, [pc, #160]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4925      	ldr	r1, [pc, #148]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	600b      	str	r3, [r1, #0]
 8003f2c:	e015      	b.n	8003f5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f2e:	4b24      	ldr	r3, [pc, #144]	; (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7fd fa54 	bl	80013e0 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f3c:	f7fd fa50 	bl	80013e0 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e187      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f4e:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d036      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d016      	beq.n	8003f9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f6e:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <HAL_RCC_OscConfig+0x248>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f74:	f7fd fa34 	bl	80013e0 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f7c:	f7fd fa30 	bl	80013e0 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e167      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f8e:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCC_OscConfig+0x200>
 8003f9a:	e01b      	b.n	8003fd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f9c:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <HAL_RCC_OscConfig+0x248>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa2:	f7fd fa1d 	bl	80013e0 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa8:	e00e      	b.n	8003fc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003faa:	f7fd fa19 	bl	80013e0 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d907      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e150      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	42470000 	.word	0x42470000
 8003fc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc8:	4b88      	ldr	r3, [pc, #544]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8003fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1ea      	bne.n	8003faa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 8097 	beq.w	8004110 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fe6:	4b81      	ldr	r3, [pc, #516]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10f      	bne.n	8004012 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	4b7d      	ldr	r3, [pc, #500]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	4a7c      	ldr	r2, [pc, #496]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8003ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004000:	6413      	str	r3, [r2, #64]	; 0x40
 8004002:	4b7a      	ldr	r3, [pc, #488]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800400e:	2301      	movs	r3, #1
 8004010:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004012:	4b77      	ldr	r3, [pc, #476]	; (80041f0 <HAL_RCC_OscConfig+0x474>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d118      	bne.n	8004050 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800401e:	4b74      	ldr	r3, [pc, #464]	; (80041f0 <HAL_RCC_OscConfig+0x474>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a73      	ldr	r2, [pc, #460]	; (80041f0 <HAL_RCC_OscConfig+0x474>)
 8004024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800402a:	f7fd f9d9 	bl	80013e0 <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004032:	f7fd f9d5 	bl	80013e0 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e10c      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004044:	4b6a      	ldr	r3, [pc, #424]	; (80041f0 <HAL_RCC_OscConfig+0x474>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0f0      	beq.n	8004032 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d106      	bne.n	8004066 <HAL_RCC_OscConfig+0x2ea>
 8004058:	4b64      	ldr	r3, [pc, #400]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800405a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405c:	4a63      	ldr	r2, [pc, #396]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	6713      	str	r3, [r2, #112]	; 0x70
 8004064:	e01c      	b.n	80040a0 <HAL_RCC_OscConfig+0x324>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	2b05      	cmp	r3, #5
 800406c:	d10c      	bne.n	8004088 <HAL_RCC_OscConfig+0x30c>
 800406e:	4b5f      	ldr	r3, [pc, #380]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004072:	4a5e      	ldr	r2, [pc, #376]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004074:	f043 0304 	orr.w	r3, r3, #4
 8004078:	6713      	str	r3, [r2, #112]	; 0x70
 800407a:	4b5c      	ldr	r3, [pc, #368]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800407c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407e:	4a5b      	ldr	r2, [pc, #364]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	6713      	str	r3, [r2, #112]	; 0x70
 8004086:	e00b      	b.n	80040a0 <HAL_RCC_OscConfig+0x324>
 8004088:	4b58      	ldr	r3, [pc, #352]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	4a57      	ldr	r2, [pc, #348]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800408e:	f023 0301 	bic.w	r3, r3, #1
 8004092:	6713      	str	r3, [r2, #112]	; 0x70
 8004094:	4b55      	ldr	r3, [pc, #340]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	4a54      	ldr	r2, [pc, #336]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800409a:	f023 0304 	bic.w	r3, r3, #4
 800409e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d015      	beq.n	80040d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a8:	f7fd f99a 	bl	80013e0 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ae:	e00a      	b.n	80040c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040b0:	f7fd f996 	bl	80013e0 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80040be:	4293      	cmp	r3, r2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e0cb      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c6:	4b49      	ldr	r3, [pc, #292]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 80040c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0ee      	beq.n	80040b0 <HAL_RCC_OscConfig+0x334>
 80040d2:	e014      	b.n	80040fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040d4:	f7fd f984 	bl	80013e0 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040da:	e00a      	b.n	80040f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040dc:	f7fd f980 	bl	80013e0 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e0b5      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f2:	4b3e      	ldr	r3, [pc, #248]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1ee      	bne.n	80040dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040fe:	7dfb      	ldrb	r3, [r7, #23]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d105      	bne.n	8004110 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004104:	4b39      	ldr	r3, [pc, #228]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	4a38      	ldr	r2, [pc, #224]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800410a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800410e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 80a1 	beq.w	800425c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800411a:	4b34      	ldr	r3, [pc, #208]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
 8004122:	2b08      	cmp	r3, #8
 8004124:	d05c      	beq.n	80041e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d141      	bne.n	80041b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412e:	4b31      	ldr	r3, [pc, #196]	; (80041f4 <HAL_RCC_OscConfig+0x478>)
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004134:	f7fd f954 	bl	80013e0 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800413c:	f7fd f950 	bl	80013e0 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e087      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414e:	4b27      	ldr	r3, [pc, #156]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69da      	ldr	r2, [r3, #28]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	019b      	lsls	r3, r3, #6
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	085b      	lsrs	r3, r3, #1
 8004172:	3b01      	subs	r3, #1
 8004174:	041b      	lsls	r3, r3, #16
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	061b      	lsls	r3, r3, #24
 800417e:	491b      	ldr	r1, [pc, #108]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 8004180:	4313      	orrs	r3, r2
 8004182:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004184:	4b1b      	ldr	r3, [pc, #108]	; (80041f4 <HAL_RCC_OscConfig+0x478>)
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418a:	f7fd f929 	bl	80013e0 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004192:	f7fd f925 	bl	80013e0 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e05c      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a4:	4b11      	ldr	r3, [pc, #68]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x416>
 80041b0:	e054      	b.n	800425c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b2:	4b10      	ldr	r3, [pc, #64]	; (80041f4 <HAL_RCC_OscConfig+0x478>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b8:	f7fd f912 	bl	80013e0 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c0:	f7fd f90e 	bl	80013e0 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e045      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d2:	4b06      	ldr	r3, [pc, #24]	; (80041ec <HAL_RCC_OscConfig+0x470>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x444>
 80041de:	e03d      	b.n	800425c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d107      	bne.n	80041f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e038      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
 80041ec:	40023800 	.word	0x40023800
 80041f0:	40007000 	.word	0x40007000
 80041f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041f8:	4b1b      	ldr	r3, [pc, #108]	; (8004268 <HAL_RCC_OscConfig+0x4ec>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d028      	beq.n	8004258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d121      	bne.n	8004258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421e:	429a      	cmp	r2, r3
 8004220:	d11a      	bne.n	8004258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004228:	4013      	ands	r3, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800422e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004230:	4293      	cmp	r3, r2
 8004232:	d111      	bne.n	8004258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	085b      	lsrs	r3, r3, #1
 8004240:	3b01      	subs	r3, #1
 8004242:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004244:	429a      	cmp	r2, r3
 8004246:	d107      	bne.n	8004258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004252:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004254:	429a      	cmp	r2, r3
 8004256:	d001      	beq.n	800425c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e000      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40023800 	.word	0x40023800

0800426c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0cc      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004280:	4b68      	ldr	r3, [pc, #416]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d90c      	bls.n	80042a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428e:	4b65      	ldr	r3, [pc, #404]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004296:	4b63      	ldr	r3, [pc, #396]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0b8      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d020      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042c0:	4b59      	ldr	r3, [pc, #356]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	4a58      	ldr	r2, [pc, #352]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042d8:	4b53      	ldr	r3, [pc, #332]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	4a52      	ldr	r2, [pc, #328]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e4:	4b50      	ldr	r3, [pc, #320]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	494d      	ldr	r1, [pc, #308]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d044      	beq.n	800438c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d107      	bne.n	800431a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430a:	4b47      	ldr	r3, [pc, #284]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d119      	bne.n	800434a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e07f      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d003      	beq.n	800432a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004326:	2b03      	cmp	r3, #3
 8004328:	d107      	bne.n	800433a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800432a:	4b3f      	ldr	r3, [pc, #252]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e06f      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433a:	4b3b      	ldr	r3, [pc, #236]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e067      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800434a:	4b37      	ldr	r3, [pc, #220]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f023 0203 	bic.w	r2, r3, #3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	4934      	ldr	r1, [pc, #208]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 8004358:	4313      	orrs	r3, r2
 800435a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800435c:	f7fd f840 	bl	80013e0 <HAL_GetTick>
 8004360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004362:	e00a      	b.n	800437a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004364:	f7fd f83c 	bl	80013e0 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004372:	4293      	cmp	r3, r2
 8004374:	d901      	bls.n	800437a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e04f      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437a:	4b2b      	ldr	r3, [pc, #172]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 020c 	and.w	r2, r3, #12
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	429a      	cmp	r2, r3
 800438a:	d1eb      	bne.n	8004364 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800438c:	4b25      	ldr	r3, [pc, #148]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d20c      	bcs.n	80043b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439a:	4b22      	ldr	r3, [pc, #136]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a2:	4b20      	ldr	r3, [pc, #128]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d001      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e032      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d008      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043c0:	4b19      	ldr	r3, [pc, #100]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4916      	ldr	r1, [pc, #88]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d009      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	490e      	ldr	r1, [pc, #56]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043f2:	f000 f821 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 80043f6:	4602      	mov	r2, r0
 80043f8:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	091b      	lsrs	r3, r3, #4
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	490a      	ldr	r1, [pc, #40]	; (800442c <HAL_RCC_ClockConfig+0x1c0>)
 8004404:	5ccb      	ldrb	r3, [r1, r3]
 8004406:	fa22 f303 	lsr.w	r3, r2, r3
 800440a:	4a09      	ldr	r2, [pc, #36]	; (8004430 <HAL_RCC_ClockConfig+0x1c4>)
 800440c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800440e:	4b09      	ldr	r3, [pc, #36]	; (8004434 <HAL_RCC_ClockConfig+0x1c8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7fc ffa0 	bl	8001358 <HAL_InitTick>

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40023c00 	.word	0x40023c00
 8004428:	40023800 	.word	0x40023800
 800442c:	080092f4 	.word	0x080092f4
 8004430:	2000000c 	.word	0x2000000c
 8004434:	20000010 	.word	0x20000010

08004438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800443c:	b094      	sub	sp, #80	; 0x50
 800443e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	647b      	str	r3, [r7, #68]	; 0x44
 8004444:	2300      	movs	r3, #0
 8004446:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004448:	2300      	movs	r3, #0
 800444a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004450:	4b79      	ldr	r3, [pc, #484]	; (8004638 <HAL_RCC_GetSysClockFreq+0x200>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 030c 	and.w	r3, r3, #12
 8004458:	2b08      	cmp	r3, #8
 800445a:	d00d      	beq.n	8004478 <HAL_RCC_GetSysClockFreq+0x40>
 800445c:	2b08      	cmp	r3, #8
 800445e:	f200 80e1 	bhi.w	8004624 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <HAL_RCC_GetSysClockFreq+0x34>
 8004466:	2b04      	cmp	r3, #4
 8004468:	d003      	beq.n	8004472 <HAL_RCC_GetSysClockFreq+0x3a>
 800446a:	e0db      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800446c:	4b73      	ldr	r3, [pc, #460]	; (800463c <HAL_RCC_GetSysClockFreq+0x204>)
 800446e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004470:	e0db      	b.n	800462a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004472:	4b73      	ldr	r3, [pc, #460]	; (8004640 <HAL_RCC_GetSysClockFreq+0x208>)
 8004474:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004476:	e0d8      	b.n	800462a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004478:	4b6f      	ldr	r3, [pc, #444]	; (8004638 <HAL_RCC_GetSysClockFreq+0x200>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004480:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004482:	4b6d      	ldr	r3, [pc, #436]	; (8004638 <HAL_RCC_GetSysClockFreq+0x200>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d063      	beq.n	8004556 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800448e:	4b6a      	ldr	r3, [pc, #424]	; (8004638 <HAL_RCC_GetSysClockFreq+0x200>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	099b      	lsrs	r3, r3, #6
 8004494:	2200      	movs	r2, #0
 8004496:	63bb      	str	r3, [r7, #56]	; 0x38
 8004498:	63fa      	str	r2, [r7, #60]	; 0x3c
 800449a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a0:	633b      	str	r3, [r7, #48]	; 0x30
 80044a2:	2300      	movs	r3, #0
 80044a4:	637b      	str	r3, [r7, #52]	; 0x34
 80044a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80044aa:	4622      	mov	r2, r4
 80044ac:	462b      	mov	r3, r5
 80044ae:	f04f 0000 	mov.w	r0, #0
 80044b2:	f04f 0100 	mov.w	r1, #0
 80044b6:	0159      	lsls	r1, r3, #5
 80044b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044bc:	0150      	lsls	r0, r2, #5
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4621      	mov	r1, r4
 80044c4:	1a51      	subs	r1, r2, r1
 80044c6:	6139      	str	r1, [r7, #16]
 80044c8:	4629      	mov	r1, r5
 80044ca:	eb63 0301 	sbc.w	r3, r3, r1
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044dc:	4659      	mov	r1, fp
 80044de:	018b      	lsls	r3, r1, #6
 80044e0:	4651      	mov	r1, sl
 80044e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044e6:	4651      	mov	r1, sl
 80044e8:	018a      	lsls	r2, r1, #6
 80044ea:	4651      	mov	r1, sl
 80044ec:	ebb2 0801 	subs.w	r8, r2, r1
 80044f0:	4659      	mov	r1, fp
 80044f2:	eb63 0901 	sbc.w	r9, r3, r1
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004502:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004506:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800450a:	4690      	mov	r8, r2
 800450c:	4699      	mov	r9, r3
 800450e:	4623      	mov	r3, r4
 8004510:	eb18 0303 	adds.w	r3, r8, r3
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	462b      	mov	r3, r5
 8004518:	eb49 0303 	adc.w	r3, r9, r3
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800452a:	4629      	mov	r1, r5
 800452c:	024b      	lsls	r3, r1, #9
 800452e:	4621      	mov	r1, r4
 8004530:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004534:	4621      	mov	r1, r4
 8004536:	024a      	lsls	r2, r1, #9
 8004538:	4610      	mov	r0, r2
 800453a:	4619      	mov	r1, r3
 800453c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800453e:	2200      	movs	r2, #0
 8004540:	62bb      	str	r3, [r7, #40]	; 0x28
 8004542:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004544:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004548:	f7fb fe46 	bl	80001d8 <__aeabi_uldivmod>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4613      	mov	r3, r2
 8004552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004554:	e058      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004556:	4b38      	ldr	r3, [pc, #224]	; (8004638 <HAL_RCC_GetSysClockFreq+0x200>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	099b      	lsrs	r3, r3, #6
 800455c:	2200      	movs	r2, #0
 800455e:	4618      	mov	r0, r3
 8004560:	4611      	mov	r1, r2
 8004562:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004566:	623b      	str	r3, [r7, #32]
 8004568:	2300      	movs	r3, #0
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
 800456c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004570:	4642      	mov	r2, r8
 8004572:	464b      	mov	r3, r9
 8004574:	f04f 0000 	mov.w	r0, #0
 8004578:	f04f 0100 	mov.w	r1, #0
 800457c:	0159      	lsls	r1, r3, #5
 800457e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004582:	0150      	lsls	r0, r2, #5
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4641      	mov	r1, r8
 800458a:	ebb2 0a01 	subs.w	sl, r2, r1
 800458e:	4649      	mov	r1, r9
 8004590:	eb63 0b01 	sbc.w	fp, r3, r1
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045a8:	ebb2 040a 	subs.w	r4, r2, sl
 80045ac:	eb63 050b 	sbc.w	r5, r3, fp
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	00eb      	lsls	r3, r5, #3
 80045ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045be:	00e2      	lsls	r2, r4, #3
 80045c0:	4614      	mov	r4, r2
 80045c2:	461d      	mov	r5, r3
 80045c4:	4643      	mov	r3, r8
 80045c6:	18e3      	adds	r3, r4, r3
 80045c8:	603b      	str	r3, [r7, #0]
 80045ca:	464b      	mov	r3, r9
 80045cc:	eb45 0303 	adc.w	r3, r5, r3
 80045d0:	607b      	str	r3, [r7, #4]
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045de:	4629      	mov	r1, r5
 80045e0:	028b      	lsls	r3, r1, #10
 80045e2:	4621      	mov	r1, r4
 80045e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045e8:	4621      	mov	r1, r4
 80045ea:	028a      	lsls	r2, r1, #10
 80045ec:	4610      	mov	r0, r2
 80045ee:	4619      	mov	r1, r3
 80045f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045f2:	2200      	movs	r2, #0
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	61fa      	str	r2, [r7, #28]
 80045f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045fc:	f7fb fdec 	bl	80001d8 <__aeabi_uldivmod>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4613      	mov	r3, r2
 8004606:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004608:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <HAL_RCC_GetSysClockFreq+0x200>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	0c1b      	lsrs	r3, r3, #16
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	3301      	adds	r3, #1
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004618:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800461a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800461c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004620:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004622:	e002      	b.n	800462a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004624:	4b05      	ldr	r3, [pc, #20]	; (800463c <HAL_RCC_GetSysClockFreq+0x204>)
 8004626:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800462a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800462c:	4618      	mov	r0, r3
 800462e:	3750      	adds	r7, #80	; 0x50
 8004630:	46bd      	mov	sp, r7
 8004632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004636:	bf00      	nop
 8004638:	40023800 	.word	0x40023800
 800463c:	00f42400 	.word	0x00f42400
 8004640:	007a1200 	.word	0x007a1200

08004644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004648:	4b03      	ldr	r3, [pc, #12]	; (8004658 <HAL_RCC_GetHCLKFreq+0x14>)
 800464a:	681b      	ldr	r3, [r3, #0]
}
 800464c:	4618      	mov	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	2000000c 	.word	0x2000000c

0800465c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004660:	f7ff fff0 	bl	8004644 <HAL_RCC_GetHCLKFreq>
 8004664:	4602      	mov	r2, r0
 8004666:	4b05      	ldr	r3, [pc, #20]	; (800467c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	0a9b      	lsrs	r3, r3, #10
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	4903      	ldr	r1, [pc, #12]	; (8004680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004672:	5ccb      	ldrb	r3, [r1, r3]
 8004674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004678:	4618      	mov	r0, r3
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40023800 	.word	0x40023800
 8004680:	08009304 	.word	0x08009304

08004684 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d105      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d038      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046ac:	4b68      	ldr	r3, [pc, #416]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046b2:	f7fc fe95 	bl	80013e0 <HAL_GetTick>
 80046b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046b8:	e008      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046ba:	f7fc fe91 	bl	80013e0 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e0bd      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046cc:	4b61      	ldr	r3, [pc, #388]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f0      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	019b      	lsls	r3, r3, #6
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	071b      	lsls	r3, r3, #28
 80046ea:	495a      	ldr	r1, [pc, #360]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046f2:	4b57      	ldr	r3, [pc, #348]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046f8:	f7fc fe72 	bl	80013e0 <HAL_GetTick>
 80046fc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004700:	f7fc fe6e 	bl	80013e0 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e09a      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004712:	4b50      	ldr	r3, [pc, #320]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 8083 	beq.w	8004832 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800472c:	2300      	movs	r3, #0
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	4b48      	ldr	r3, [pc, #288]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	4a47      	ldr	r2, [pc, #284]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473a:	6413      	str	r3, [r2, #64]	; 0x40
 800473c:	4b45      	ldr	r3, [pc, #276]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004748:	4b43      	ldr	r3, [pc, #268]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a42      	ldr	r2, [pc, #264]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800474e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004752:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004754:	f7fc fe44 	bl	80013e0 <HAL_GetTick>
 8004758:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800475a:	e008      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800475c:	f7fc fe40 	bl	80013e0 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e06c      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800476e:	4b3a      	ldr	r3, [pc, #232]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f0      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800477a:	4b36      	ldr	r3, [pc, #216]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004782:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d02f      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x166>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	429a      	cmp	r2, r3
 8004796:	d028      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004798:	4b2e      	ldr	r3, [pc, #184]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800479a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047a2:	4b2e      	ldr	r3, [pc, #184]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047a8:	4b2c      	ldr	r3, [pc, #176]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80047ae:	4a29      	ldr	r2, [pc, #164]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047b4:	4b27      	ldr	r3, [pc, #156]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d114      	bne.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80047c0:	f7fc fe0e 	bl	80013e0 <HAL_GetTick>
 80047c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c6:	e00a      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047c8:	f7fc fe0a 	bl	80013e0 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d901      	bls.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e034      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047de:	4b1d      	ldr	r3, [pc, #116]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0ee      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047f6:	d10d      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80047f8:	4b16      	ldr	r3, [pc, #88]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800480c:	4911      	ldr	r1, [pc, #68]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800480e:	4313      	orrs	r3, r2
 8004810:	608b      	str	r3, [r1, #8]
 8004812:	e005      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004814:	4b0f      	ldr	r3, [pc, #60]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	4a0e      	ldr	r2, [pc, #56]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800481a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800481e:	6093      	str	r3, [r2, #8]
 8004820:	4b0c      	ldr	r3, [pc, #48]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004822:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800482c:	4909      	ldr	r1, [pc, #36]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800482e:	4313      	orrs	r3, r2
 8004830:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0308 	and.w	r3, r3, #8
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	7d1a      	ldrb	r2, [r3, #20]
 8004842:	4b07      	ldr	r3, [pc, #28]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004844:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	42470068 	.word	0x42470068
 8004854:	40023800 	.word	0x40023800
 8004858:	40007000 	.word	0x40007000
 800485c:	42470e40 	.word	0x42470e40
 8004860:	424711e0 	.word	0x424711e0

08004864 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d140      	bne.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004882:	4b24      	ldr	r3, [pc, #144]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d005      	beq.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d131      	bne.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004898:	4b1f      	ldr	r3, [pc, #124]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800489a:	617b      	str	r3, [r7, #20]
          break;
 800489c:	e031      	b.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800489e:	4b1d      	ldr	r3, [pc, #116]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048aa:	d109      	bne.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80048ac:	4b19      	ldr	r3, [pc, #100]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048b6:	4a19      	ldr	r2, [pc, #100]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80048b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	e008      	b.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80048c0:	4b14      	ldr	r3, [pc, #80]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048ca:	4a15      	ldr	r2, [pc, #84]	; (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80048cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d0:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80048d2:	4b10      	ldr	r3, [pc, #64]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d8:	099b      	lsrs	r3, r3, #6
 80048da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	fb02 f303 	mul.w	r3, r2, r3
 80048e4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80048e6:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ec:	0f1b      	lsrs	r3, r3, #28
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f8:	617b      	str	r3, [r7, #20]
          break;
 80048fa:	e002      	b.n	8004902 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]
          break;
 8004900:	bf00      	nop
        }
      }
      break;
 8004902:	bf00      	nop
    }
  }
  return frequency;
 8004904:	697b      	ldr	r3, [r7, #20]
}
 8004906:	4618      	mov	r0, r3
 8004908:	371c      	adds	r7, #28
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40023800 	.word	0x40023800
 8004918:	00bb8000 	.word	0x00bb8000
 800491c:	007a1200 	.word	0x007a1200
 8004920:	00f42400 	.word	0x00f42400

08004924 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e07b      	b.n	8004a2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	2b00      	cmp	r3, #0
 800493c:	d108      	bne.n	8004950 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004946:	d009      	beq.n	800495c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	61da      	str	r2, [r3, #28]
 800494e:	e005      	b.n	800495c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fc fb20 	bl	8000fbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004992:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e0:	ea42 0103 	orr.w	r1, r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	0c1b      	lsrs	r3, r3, #16
 80049fa:	f003 0104 	and.w	r1, r3, #4
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	f003 0210 	and.w	r2, r3, #16
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69da      	ldr	r2, [r3, #28]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b082      	sub	sp, #8
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e041      	b.n	8004acc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d106      	bne.n	8004a62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7fc faf5 	bl	800104c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2202      	movs	r2, #2
 8004a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	3304      	adds	r3, #4
 8004a72:	4619      	mov	r1, r3
 8004a74:	4610      	mov	r0, r2
 8004a76:	f000 fcad 	bl	80053d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d001      	beq.n	8004aec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e03c      	b.n	8004b66 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a1e      	ldr	r2, [pc, #120]	; (8004b74 <HAL_TIM_Base_Start+0xa0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d018      	beq.n	8004b30 <HAL_TIM_Base_Start+0x5c>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b06:	d013      	beq.n	8004b30 <HAL_TIM_Base_Start+0x5c>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a1a      	ldr	r2, [pc, #104]	; (8004b78 <HAL_TIM_Base_Start+0xa4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d00e      	beq.n	8004b30 <HAL_TIM_Base_Start+0x5c>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a19      	ldr	r2, [pc, #100]	; (8004b7c <HAL_TIM_Base_Start+0xa8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d009      	beq.n	8004b30 <HAL_TIM_Base_Start+0x5c>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a17      	ldr	r2, [pc, #92]	; (8004b80 <HAL_TIM_Base_Start+0xac>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d004      	beq.n	8004b30 <HAL_TIM_Base_Start+0x5c>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a16      	ldr	r2, [pc, #88]	; (8004b84 <HAL_TIM_Base_Start+0xb0>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d111      	bne.n	8004b54 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b06      	cmp	r3, #6
 8004b40:	d010      	beq.n	8004b64 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0201 	orr.w	r2, r2, #1
 8004b50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b52:	e007      	b.n	8004b64 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40010000 	.word	0x40010000
 8004b78:	40000400 	.word	0x40000400
 8004b7c:	40000800 	.word	0x40000800
 8004b80:	40000c00 	.word	0x40000c00
 8004b84:	40014000 	.word	0x40014000

08004b88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d001      	beq.n	8004ba0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e044      	b.n	8004c2a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0201 	orr.w	r2, r2, #1
 8004bb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a1e      	ldr	r2, [pc, #120]	; (8004c38 <HAL_TIM_Base_Start_IT+0xb0>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d018      	beq.n	8004bf4 <HAL_TIM_Base_Start_IT+0x6c>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bca:	d013      	beq.n	8004bf4 <HAL_TIM_Base_Start_IT+0x6c>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a1a      	ldr	r2, [pc, #104]	; (8004c3c <HAL_TIM_Base_Start_IT+0xb4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00e      	beq.n	8004bf4 <HAL_TIM_Base_Start_IT+0x6c>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a19      	ldr	r2, [pc, #100]	; (8004c40 <HAL_TIM_Base_Start_IT+0xb8>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d009      	beq.n	8004bf4 <HAL_TIM_Base_Start_IT+0x6c>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a17      	ldr	r2, [pc, #92]	; (8004c44 <HAL_TIM_Base_Start_IT+0xbc>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d004      	beq.n	8004bf4 <HAL_TIM_Base_Start_IT+0x6c>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a16      	ldr	r2, [pc, #88]	; (8004c48 <HAL_TIM_Base_Start_IT+0xc0>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d111      	bne.n	8004c18 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b06      	cmp	r3, #6
 8004c04:	d010      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f042 0201 	orr.w	r2, r2, #1
 8004c14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c16:	e007      	b.n	8004c28 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	40010000 	.word	0x40010000
 8004c3c:	40000400 	.word	0x40000400
 8004c40:	40000800 	.word	0x40000800
 8004c44:	40000c00 	.word	0x40000c00
 8004c48:	40014000 	.word	0x40014000

08004c4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e041      	b.n	8004ce2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f839 	bl	8004cea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3304      	adds	r3, #4
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	f000 fba2 	bl	80053d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
	...

08004d00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d109      	bne.n	8004d24 <HAL_TIM_PWM_Start+0x24>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	bf14      	ite	ne
 8004d1c:	2301      	movne	r3, #1
 8004d1e:	2300      	moveq	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	e022      	b.n	8004d6a <HAL_TIM_PWM_Start+0x6a>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d109      	bne.n	8004d3e <HAL_TIM_PWM_Start+0x3e>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	bf14      	ite	ne
 8004d36:	2301      	movne	r3, #1
 8004d38:	2300      	moveq	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	e015      	b.n	8004d6a <HAL_TIM_PWM_Start+0x6a>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d109      	bne.n	8004d58 <HAL_TIM_PWM_Start+0x58>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	bf14      	ite	ne
 8004d50:	2301      	movne	r3, #1
 8004d52:	2300      	moveq	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	e008      	b.n	8004d6a <HAL_TIM_PWM_Start+0x6a>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	bf14      	ite	ne
 8004d64:	2301      	movne	r3, #1
 8004d66:	2300      	moveq	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e068      	b.n	8004e44 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d104      	bne.n	8004d82 <HAL_TIM_PWM_Start+0x82>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d80:	e013      	b.n	8004daa <HAL_TIM_PWM_Start+0xaa>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d104      	bne.n	8004d92 <HAL_TIM_PWM_Start+0x92>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d90:	e00b      	b.n	8004daa <HAL_TIM_PWM_Start+0xaa>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d104      	bne.n	8004da2 <HAL_TIM_PWM_Start+0xa2>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da0:	e003      	b.n	8004daa <HAL_TIM_PWM_Start+0xaa>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2202      	movs	r2, #2
 8004da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2201      	movs	r2, #1
 8004db0:	6839      	ldr	r1, [r7, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fdb4 	bl	8005920 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a23      	ldr	r2, [pc, #140]	; (8004e4c <HAL_TIM_PWM_Start+0x14c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d107      	bne.n	8004dd2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a1d      	ldr	r2, [pc, #116]	; (8004e4c <HAL_TIM_PWM_Start+0x14c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d018      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x10e>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de4:	d013      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x10e>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a19      	ldr	r2, [pc, #100]	; (8004e50 <HAL_TIM_PWM_Start+0x150>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00e      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x10e>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a17      	ldr	r2, [pc, #92]	; (8004e54 <HAL_TIM_PWM_Start+0x154>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d009      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x10e>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a16      	ldr	r2, [pc, #88]	; (8004e58 <HAL_TIM_PWM_Start+0x158>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d004      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x10e>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a14      	ldr	r2, [pc, #80]	; (8004e5c <HAL_TIM_PWM_Start+0x15c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d111      	bne.n	8004e32 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b06      	cmp	r3, #6
 8004e1e:	d010      	beq.n	8004e42 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0201 	orr.w	r2, r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e30:	e007      	b.n	8004e42 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f042 0201 	orr.w	r2, r2, #1
 8004e40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	40000400 	.word	0x40000400
 8004e54:	40000800 	.word	0x40000800
 8004e58:	40000c00 	.word	0x40000c00
 8004e5c:	40014000 	.word	0x40014000

08004e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d122      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d11b      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0202 	mvn.w	r2, #2
 8004e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fa77 	bl	8005396 <HAL_TIM_IC_CaptureCallback>
 8004ea8:	e005      	b.n	8004eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fa69 	bl	8005382 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fa7a 	bl	80053aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d122      	bne.n	8004f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d11b      	bne.n	8004f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0204 	mvn.w	r2, #4
 8004ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fa4d 	bl	8005396 <HAL_TIM_IC_CaptureCallback>
 8004efc:	e005      	b.n	8004f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fa3f 	bl	8005382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fa50 	bl	80053aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d122      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d11b      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0208 	mvn.w	r2, #8
 8004f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2204      	movs	r2, #4
 8004f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 fa23 	bl	8005396 <HAL_TIM_IC_CaptureCallback>
 8004f50:	e005      	b.n	8004f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fa15 	bl	8005382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fa26 	bl	80053aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0310 	and.w	r3, r3, #16
 8004f6e:	2b10      	cmp	r3, #16
 8004f70:	d122      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0310 	and.w	r3, r3, #16
 8004f7c:	2b10      	cmp	r3, #16
 8004f7e:	d11b      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0210 	mvn.w	r2, #16
 8004f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2208      	movs	r2, #8
 8004f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f9f9 	bl	8005396 <HAL_TIM_IC_CaptureCallback>
 8004fa4:	e005      	b.n	8004fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f9eb 	bl	8005382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f9fc 	bl	80053aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d10e      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d107      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f06f 0201 	mvn.w	r2, #1
 8004fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fb fa9c 	bl	800051c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fee:	2b80      	cmp	r3, #128	; 0x80
 8004ff0:	d10e      	bne.n	8005010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffc:	2b80      	cmp	r3, #128	; 0x80
 8004ffe:	d107      	bne.n	8005010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fd26 	bl	8005a5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501a:	2b40      	cmp	r3, #64	; 0x40
 800501c:	d10e      	bne.n	800503c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005028:	2b40      	cmp	r3, #64	; 0x40
 800502a:	d107      	bne.n	800503c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f9c1 	bl	80053be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b20      	cmp	r3, #32
 8005048:	d10e      	bne.n	8005068 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b20      	cmp	r3, #32
 8005056:	d107      	bne.n	8005068 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f06f 0220 	mvn.w	r2, #32
 8005060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fcf0 	bl	8005a48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005068:	bf00      	nop
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800508a:	2302      	movs	r3, #2
 800508c:	e0ae      	b.n	80051ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b0c      	cmp	r3, #12
 800509a:	f200 809f 	bhi.w	80051dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800509e:	a201      	add	r2, pc, #4	; (adr r2, 80050a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a4:	080050d9 	.word	0x080050d9
 80050a8:	080051dd 	.word	0x080051dd
 80050ac:	080051dd 	.word	0x080051dd
 80050b0:	080051dd 	.word	0x080051dd
 80050b4:	08005119 	.word	0x08005119
 80050b8:	080051dd 	.word	0x080051dd
 80050bc:	080051dd 	.word	0x080051dd
 80050c0:	080051dd 	.word	0x080051dd
 80050c4:	0800515b 	.word	0x0800515b
 80050c8:	080051dd 	.word	0x080051dd
 80050cc:	080051dd 	.word	0x080051dd
 80050d0:	080051dd 	.word	0x080051dd
 80050d4:	0800519b 	.word	0x0800519b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68b9      	ldr	r1, [r7, #8]
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 f9f8 	bl	80054d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0208 	orr.w	r2, r2, #8
 80050f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699a      	ldr	r2, [r3, #24]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0204 	bic.w	r2, r2, #4
 8005102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6999      	ldr	r1, [r3, #24]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	691a      	ldr	r2, [r3, #16]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	619a      	str	r2, [r3, #24]
      break;
 8005116:	e064      	b.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68b9      	ldr	r1, [r7, #8]
 800511e:	4618      	mov	r0, r3
 8005120:	f000 fa3e 	bl	80055a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6999      	ldr	r1, [r3, #24]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	021a      	lsls	r2, r3, #8
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	619a      	str	r2, [r3, #24]
      break;
 8005158:	e043      	b.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fa89 	bl	8005678 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69da      	ldr	r2, [r3, #28]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0208 	orr.w	r2, r2, #8
 8005174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69da      	ldr	r2, [r3, #28]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0204 	bic.w	r2, r2, #4
 8005184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69d9      	ldr	r1, [r3, #28]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	61da      	str	r2, [r3, #28]
      break;
 8005198:	e023      	b.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68b9      	ldr	r1, [r7, #8]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 fad3 	bl	800574c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69da      	ldr	r2, [r3, #28]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69d9      	ldr	r1, [r3, #28]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	021a      	lsls	r2, r3, #8
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	61da      	str	r2, [r3, #28]
      break;
 80051da:	e002      	b.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	75fb      	strb	r3, [r7, #23]
      break;
 80051e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_TIM_ConfigClockSource+0x1c>
 800520c:	2302      	movs	r3, #2
 800520e:	e0b4      	b.n	800537a <HAL_TIM_ConfigClockSource+0x186>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800522e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005248:	d03e      	beq.n	80052c8 <HAL_TIM_ConfigClockSource+0xd4>
 800524a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800524e:	f200 8087 	bhi.w	8005360 <HAL_TIM_ConfigClockSource+0x16c>
 8005252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005256:	f000 8086 	beq.w	8005366 <HAL_TIM_ConfigClockSource+0x172>
 800525a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800525e:	d87f      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x16c>
 8005260:	2b70      	cmp	r3, #112	; 0x70
 8005262:	d01a      	beq.n	800529a <HAL_TIM_ConfigClockSource+0xa6>
 8005264:	2b70      	cmp	r3, #112	; 0x70
 8005266:	d87b      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x16c>
 8005268:	2b60      	cmp	r3, #96	; 0x60
 800526a:	d050      	beq.n	800530e <HAL_TIM_ConfigClockSource+0x11a>
 800526c:	2b60      	cmp	r3, #96	; 0x60
 800526e:	d877      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x16c>
 8005270:	2b50      	cmp	r3, #80	; 0x50
 8005272:	d03c      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0xfa>
 8005274:	2b50      	cmp	r3, #80	; 0x50
 8005276:	d873      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x16c>
 8005278:	2b40      	cmp	r3, #64	; 0x40
 800527a:	d058      	beq.n	800532e <HAL_TIM_ConfigClockSource+0x13a>
 800527c:	2b40      	cmp	r3, #64	; 0x40
 800527e:	d86f      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x16c>
 8005280:	2b30      	cmp	r3, #48	; 0x30
 8005282:	d064      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x15a>
 8005284:	2b30      	cmp	r3, #48	; 0x30
 8005286:	d86b      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x16c>
 8005288:	2b20      	cmp	r3, #32
 800528a:	d060      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x15a>
 800528c:	2b20      	cmp	r3, #32
 800528e:	d867      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x16c>
 8005290:	2b00      	cmp	r3, #0
 8005292:	d05c      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x15a>
 8005294:	2b10      	cmp	r3, #16
 8005296:	d05a      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x15a>
 8005298:	e062      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	6899      	ldr	r1, [r3, #8]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f000 fb19 	bl	80058e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	609a      	str	r2, [r3, #8]
      break;
 80052c6:	e04f      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6818      	ldr	r0, [r3, #0]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	6899      	ldr	r1, [r3, #8]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f000 fb02 	bl	80058e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052ea:	609a      	str	r2, [r3, #8]
      break;
 80052ec:	e03c      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	6859      	ldr	r1, [r3, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	461a      	mov	r2, r3
 80052fc:	f000 fa76 	bl	80057ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2150      	movs	r1, #80	; 0x50
 8005306:	4618      	mov	r0, r3
 8005308:	f000 facf 	bl	80058aa <TIM_ITRx_SetConfig>
      break;
 800530c:	e02c      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6818      	ldr	r0, [r3, #0]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	6859      	ldr	r1, [r3, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	461a      	mov	r2, r3
 800531c:	f000 fa95 	bl	800584a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2160      	movs	r1, #96	; 0x60
 8005326:	4618      	mov	r0, r3
 8005328:	f000 fabf 	bl	80058aa <TIM_ITRx_SetConfig>
      break;
 800532c:	e01c      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6818      	ldr	r0, [r3, #0]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	6859      	ldr	r1, [r3, #4]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	461a      	mov	r2, r3
 800533c:	f000 fa56 	bl	80057ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2140      	movs	r1, #64	; 0x40
 8005346:	4618      	mov	r0, r3
 8005348:	f000 faaf 	bl	80058aa <TIM_ITRx_SetConfig>
      break;
 800534c:	e00c      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4619      	mov	r1, r3
 8005358:	4610      	mov	r0, r2
 800535a:	f000 faa6 	bl	80058aa <TIM_ITRx_SetConfig>
      break;
 800535e:	e003      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	73fb      	strb	r3, [r7, #15]
      break;
 8005364:	e000      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005378:	7bfb      	ldrb	r3, [r7, #15]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
	...

080053d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a34      	ldr	r2, [pc, #208]	; (80054b8 <TIM_Base_SetConfig+0xe4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00f      	beq.n	800540c <TIM_Base_SetConfig+0x38>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f2:	d00b      	beq.n	800540c <TIM_Base_SetConfig+0x38>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a31      	ldr	r2, [pc, #196]	; (80054bc <TIM_Base_SetConfig+0xe8>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d007      	beq.n	800540c <TIM_Base_SetConfig+0x38>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a30      	ldr	r2, [pc, #192]	; (80054c0 <TIM_Base_SetConfig+0xec>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d003      	beq.n	800540c <TIM_Base_SetConfig+0x38>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a2f      	ldr	r2, [pc, #188]	; (80054c4 <TIM_Base_SetConfig+0xf0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d108      	bne.n	800541e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a25      	ldr	r2, [pc, #148]	; (80054b8 <TIM_Base_SetConfig+0xe4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d01b      	beq.n	800545e <TIM_Base_SetConfig+0x8a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800542c:	d017      	beq.n	800545e <TIM_Base_SetConfig+0x8a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a22      	ldr	r2, [pc, #136]	; (80054bc <TIM_Base_SetConfig+0xe8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d013      	beq.n	800545e <TIM_Base_SetConfig+0x8a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a21      	ldr	r2, [pc, #132]	; (80054c0 <TIM_Base_SetConfig+0xec>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d00f      	beq.n	800545e <TIM_Base_SetConfig+0x8a>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a20      	ldr	r2, [pc, #128]	; (80054c4 <TIM_Base_SetConfig+0xf0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d00b      	beq.n	800545e <TIM_Base_SetConfig+0x8a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a1f      	ldr	r2, [pc, #124]	; (80054c8 <TIM_Base_SetConfig+0xf4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d007      	beq.n	800545e <TIM_Base_SetConfig+0x8a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a1e      	ldr	r2, [pc, #120]	; (80054cc <TIM_Base_SetConfig+0xf8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d003      	beq.n	800545e <TIM_Base_SetConfig+0x8a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a1d      	ldr	r2, [pc, #116]	; (80054d0 <TIM_Base_SetConfig+0xfc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d108      	bne.n	8005470 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4313      	orrs	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a08      	ldr	r2, [pc, #32]	; (80054b8 <TIM_Base_SetConfig+0xe4>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d103      	bne.n	80054a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	691a      	ldr	r2, [r3, #16]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	615a      	str	r2, [r3, #20]
}
 80054aa:	bf00      	nop
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40010000 	.word	0x40010000
 80054bc:	40000400 	.word	0x40000400
 80054c0:	40000800 	.word	0x40000800
 80054c4:	40000c00 	.word	0x40000c00
 80054c8:	40014000 	.word	0x40014000
 80054cc:	40014400 	.word	0x40014400
 80054d0:	40014800 	.word	0x40014800

080054d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	f023 0201 	bic.w	r2, r3, #1
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0303 	bic.w	r3, r3, #3
 800550a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f023 0302 	bic.w	r3, r3, #2
 800551c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	4313      	orrs	r3, r2
 8005526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a1c      	ldr	r2, [pc, #112]	; (800559c <TIM_OC1_SetConfig+0xc8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d10c      	bne.n	800554a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f023 0308 	bic.w	r3, r3, #8
 8005536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	4313      	orrs	r3, r2
 8005540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f023 0304 	bic.w	r3, r3, #4
 8005548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a13      	ldr	r2, [pc, #76]	; (800559c <TIM_OC1_SetConfig+0xc8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d111      	bne.n	8005576 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	621a      	str	r2, [r3, #32]
}
 8005590:	bf00      	nop
 8005592:	371c      	adds	r7, #28
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	40010000 	.word	0x40010000

080055a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	f023 0210 	bic.w	r2, r3, #16
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	021b      	lsls	r3, r3, #8
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f023 0320 	bic.w	r3, r3, #32
 80055ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a1e      	ldr	r2, [pc, #120]	; (8005674 <TIM_OC2_SetConfig+0xd4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d10d      	bne.n	800561c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800561a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a15      	ldr	r2, [pc, #84]	; (8005674 <TIM_OC2_SetConfig+0xd4>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d113      	bne.n	800564c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800562a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005632:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	4313      	orrs	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	621a      	str	r2, [r3, #32]
}
 8005666:	bf00      	nop
 8005668:	371c      	adds	r7, #28
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	40010000 	.word	0x40010000

08005678 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0303 	bic.w	r3, r3, #3
 80056ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	021b      	lsls	r3, r3, #8
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a1d      	ldr	r2, [pc, #116]	; (8005748 <TIM_OC3_SetConfig+0xd0>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d10d      	bne.n	80056f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	021b      	lsls	r3, r3, #8
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a14      	ldr	r2, [pc, #80]	; (8005748 <TIM_OC3_SetConfig+0xd0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d113      	bne.n	8005722 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	4313      	orrs	r3, r2
 8005720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	621a      	str	r2, [r3, #32]
}
 800573c:	bf00      	nop
 800573e:	371c      	adds	r7, #28
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	40010000 	.word	0x40010000

0800574c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800577a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	021b      	lsls	r3, r3, #8
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	4313      	orrs	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005796:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	031b      	lsls	r3, r3, #12
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a10      	ldr	r2, [pc, #64]	; (80057e8 <TIM_OC4_SetConfig+0x9c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d109      	bne.n	80057c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	019b      	lsls	r3, r3, #6
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	4313      	orrs	r3, r2
 80057be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	621a      	str	r2, [r3, #32]
}
 80057da:	bf00      	nop
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40010000 	.word	0x40010000

080057ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f023 0201 	bic.w	r2, r3, #1
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4313      	orrs	r3, r2
 8005820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f023 030a 	bic.w	r3, r3, #10
 8005828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	621a      	str	r2, [r3, #32]
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800584a:	b480      	push	{r7}
 800584c:	b087      	sub	sp, #28
 800584e:	af00      	add	r7, sp, #0
 8005850:	60f8      	str	r0, [r7, #12]
 8005852:	60b9      	str	r1, [r7, #8]
 8005854:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	f023 0210 	bic.w	r2, r3, #16
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	031b      	lsls	r3, r3, #12
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	4313      	orrs	r3, r2
 800587e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005886:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	4313      	orrs	r3, r2
 8005890:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	621a      	str	r2, [r3, #32]
}
 800589e:	bf00      	nop
 80058a0:	371c      	adds	r7, #28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b085      	sub	sp, #20
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f043 0307 	orr.w	r3, r3, #7
 80058cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	609a      	str	r2, [r3, #8]
}
 80058d4:	bf00      	nop
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	021a      	lsls	r2, r3, #8
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	431a      	orrs	r2, r3
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	4313      	orrs	r3, r2
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	609a      	str	r2, [r3, #8]
}
 8005914:	bf00      	nop
 8005916:	371c      	adds	r7, #28
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f003 031f 	and.w	r3, r3, #31
 8005932:	2201      	movs	r2, #1
 8005934:	fa02 f303 	lsl.w	r3, r2, r3
 8005938:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a1a      	ldr	r2, [r3, #32]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	43db      	mvns	r3, r3
 8005942:	401a      	ands	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6a1a      	ldr	r2, [r3, #32]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f003 031f 	and.w	r3, r3, #31
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	fa01 f303 	lsl.w	r3, r1, r3
 8005958:	431a      	orrs	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	621a      	str	r2, [r3, #32]
}
 800595e:	bf00      	nop
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
	...

0800596c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005980:	2302      	movs	r3, #2
 8005982:	e050      	b.n	8005a26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a1c      	ldr	r2, [pc, #112]	; (8005a34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d018      	beq.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d0:	d013      	beq.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a18      	ldr	r2, [pc, #96]	; (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00e      	beq.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a16      	ldr	r2, [pc, #88]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d009      	beq.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a15      	ldr	r2, [pc, #84]	; (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d004      	beq.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a13      	ldr	r2, [pc, #76]	; (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d10c      	bne.n	8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40010000 	.word	0x40010000
 8005a38:	40000400 	.word	0x40000400
 8005a3c:	40000800 	.word	0x40000800
 8005a40:	40000c00 	.word	0x40000c00
 8005a44:	40014000 	.word	0x40014000

08005a48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a70:	b084      	sub	sp, #16
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	f107 001c 	add.w	r0, r7, #28
 8005a7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d122      	bne.n	8005ace <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d105      	bne.n	8005ac2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f9c0 	bl	8005e48 <USB_CoreReset>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	73fb      	strb	r3, [r7, #15]
 8005acc:	e01a      	b.n	8005b04 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f9b4 	bl	8005e48 <USB_CoreReset>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d106      	bne.n	8005af8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	639a      	str	r2, [r3, #56]	; 0x38
 8005af6:	e005      	b.n	8005b04 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d10b      	bne.n	8005b22 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f043 0206 	orr.w	r2, r3, #6
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f043 0220 	orr.w	r2, r3, #32
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b2e:	b004      	add	sp, #16
 8005b30:	4770      	bx	lr

08005b32 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f043 0201 	orr.w	r2, r3, #1
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f023 0201 	bic.w	r2, r3, #1
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b92:	78fb      	ldrb	r3, [r7, #3]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d115      	bne.n	8005bc4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ba4:	2001      	movs	r0, #1
 8005ba6:	f7fb fc27 	bl	80013f8 <HAL_Delay>
      ms++;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3301      	adds	r3, #1
 8005bae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f93a 	bl	8005e2a <USB_GetMode>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d01e      	beq.n	8005bfa <USB_SetCurrentMode+0x84>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b31      	cmp	r3, #49	; 0x31
 8005bc0:	d9f0      	bls.n	8005ba4 <USB_SetCurrentMode+0x2e>
 8005bc2:	e01a      	b.n	8005bfa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bc4:	78fb      	ldrb	r3, [r7, #3]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d115      	bne.n	8005bf6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bd6:	2001      	movs	r0, #1
 8005bd8:	f7fb fc0e 	bl	80013f8 <HAL_Delay>
      ms++;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3301      	adds	r3, #1
 8005be0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f921 	bl	8005e2a <USB_GetMode>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d005      	beq.n	8005bfa <USB_SetCurrentMode+0x84>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b31      	cmp	r3, #49	; 0x31
 8005bf2:	d9f0      	bls.n	8005bd6 <USB_SetCurrentMode+0x60>
 8005bf4:	e001      	b.n	8005bfa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e005      	b.n	8005c06 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b32      	cmp	r3, #50	; 0x32
 8005bfe:	d101      	bne.n	8005c04 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e000      	b.n	8005c06 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	3301      	adds	r3, #1
 8005c22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4a13      	ldr	r2, [pc, #76]	; (8005c74 <USB_FlushTxFifo+0x64>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d901      	bls.n	8005c30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e01b      	b.n	8005c68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	daf2      	bge.n	8005c1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	019b      	lsls	r3, r3, #6
 8005c40:	f043 0220 	orr.w	r2, r3, #32
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4a08      	ldr	r2, [pc, #32]	; (8005c74 <USB_FlushTxFifo+0x64>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d901      	bls.n	8005c5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e006      	b.n	8005c68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b20      	cmp	r3, #32
 8005c64:	d0f0      	beq.n	8005c48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	00030d40 	.word	0x00030d40

08005c78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4a11      	ldr	r2, [pc, #68]	; (8005cd4 <USB_FlushRxFifo+0x5c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d901      	bls.n	8005c96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e018      	b.n	8005cc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	daf2      	bge.n	8005c84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2210      	movs	r2, #16
 8005ca6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	3301      	adds	r3, #1
 8005cac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4a08      	ldr	r2, [pc, #32]	; (8005cd4 <USB_FlushRxFifo+0x5c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d901      	bls.n	8005cba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e006      	b.n	8005cc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	f003 0310 	and.w	r3, r3, #16
 8005cc2:	2b10      	cmp	r3, #16
 8005cc4:	d0f0      	beq.n	8005ca8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	00030d40 	.word	0x00030d40

08005cd8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b089      	sub	sp, #36	; 0x24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	4611      	mov	r1, r2
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	71fb      	strb	r3, [r7, #7]
 8005cea:	4613      	mov	r3, r2
 8005cec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005cf6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d123      	bne.n	8005d46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005cfe:	88bb      	ldrh	r3, [r7, #4]
 8005d00:	3303      	adds	r3, #3
 8005d02:	089b      	lsrs	r3, r3, #2
 8005d04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d06:	2300      	movs	r3, #0
 8005d08:	61bb      	str	r3, [r7, #24]
 8005d0a:	e018      	b.n	8005d3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d0c:	79fb      	ldrb	r3, [r7, #7]
 8005d0e:	031a      	lsls	r2, r3, #12
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d18:	461a      	mov	r2, r3
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	3301      	adds	r3, #1
 8005d24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	3301      	adds	r3, #1
 8005d36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	61bb      	str	r3, [r7, #24]
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d3e2      	bcc.n	8005d0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3724      	adds	r7, #36	; 0x24
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b08b      	sub	sp, #44	; 0x2c
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d6a:	88fb      	ldrh	r3, [r7, #6]
 8005d6c:	089b      	lsrs	r3, r3, #2
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d72:	88fb      	ldrh	r3, [r7, #6]
 8005d74:	f003 0303 	and.w	r3, r3, #3
 8005d78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	623b      	str	r3, [r7, #32]
 8005d7e:	e014      	b.n	8005daa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	3301      	adds	r3, #1
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	3301      	adds	r3, #1
 8005d96:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	3301      	adds	r3, #1
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	3301      	adds	r3, #1
 8005da8:	623b      	str	r3, [r7, #32]
 8005daa:	6a3a      	ldr	r2, [r7, #32]
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d3e6      	bcc.n	8005d80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005db2:	8bfb      	ldrh	r3, [r7, #30]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01e      	beq.n	8005df6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f107 0310 	add.w	r3, r7, #16
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	701a      	strb	r2, [r3, #0]
      i++;
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	3301      	adds	r3, #1
 8005de2:	623b      	str	r3, [r7, #32]
      pDest++;
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	3301      	adds	r3, #1
 8005de8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005dea:	8bfb      	ldrh	r3, [r7, #30]
 8005dec:	3b01      	subs	r3, #1
 8005dee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005df0:	8bfb      	ldrh	r3, [r7, #30]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1ea      	bne.n	8005dcc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	372c      	adds	r7, #44	; 0x2c
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	f003 0301 	and.w	r3, r3, #1
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
	...

08005e48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e50:	2300      	movs	r3, #0
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	3301      	adds	r3, #1
 8005e58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4a13      	ldr	r2, [pc, #76]	; (8005eac <USB_CoreReset+0x64>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d901      	bls.n	8005e66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e01b      	b.n	8005e9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	daf2      	bge.n	8005e54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f043 0201 	orr.w	r2, r3, #1
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3301      	adds	r3, #1
 8005e82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4a09      	ldr	r2, [pc, #36]	; (8005eac <USB_CoreReset+0x64>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d901      	bls.n	8005e90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e006      	b.n	8005e9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d0f0      	beq.n	8005e7e <USB_CoreReset+0x36>

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	00030d40 	.word	0x00030d40

08005eb0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b086      	sub	sp, #24
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d018      	beq.n	8005f38 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d10a      	bne.n	8005f22 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f1a:	f043 0304 	orr.w	r3, r3, #4
 8005f1e:	6013      	str	r3, [r2, #0]
 8005f20:	e014      	b.n	8005f4c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f30:	f023 0304 	bic.w	r3, r3, #4
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	e009      	b.n	8005f4c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f46:	f023 0304 	bic.w	r3, r3, #4
 8005f4a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f4c:	2110      	movs	r1, #16
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7ff fe5e 	bl	8005c10 <USB_FlushTxFifo>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7ff fe8a 	bl	8005c78 <USB_FlushRxFifo>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f6e:	2300      	movs	r3, #0
 8005f70:	613b      	str	r3, [r7, #16]
 8005f72:	e015      	b.n	8005fa0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f80:	461a      	mov	r2, r3
 8005f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f86:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f94:	461a      	mov	r2, r3
 8005f96:	2300      	movs	r3, #0
 8005f98:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	613b      	str	r3, [r7, #16]
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d3e5      	bcc.n	8005f74 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fb4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00b      	beq.n	8005fda <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fc8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a13      	ldr	r2, [pc, #76]	; (800601c <USB_HostInit+0x16c>)
 8005fce:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a13      	ldr	r2, [pc, #76]	; (8006020 <USB_HostInit+0x170>)
 8005fd4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005fd8:	e009      	b.n	8005fee <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2280      	movs	r2, #128	; 0x80
 8005fde:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a10      	ldr	r2, [pc, #64]	; (8006024 <USB_HostInit+0x174>)
 8005fe4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a0f      	ldr	r2, [pc, #60]	; (8006028 <USB_HostInit+0x178>)
 8005fea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d105      	bne.n	8006000 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	f043 0210 	orr.w	r2, r3, #16
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	699a      	ldr	r2, [r3, #24]
 8006004:	4b09      	ldr	r3, [pc, #36]	; (800602c <USB_HostInit+0x17c>)
 8006006:	4313      	orrs	r3, r2
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800600c:	7dfb      	ldrb	r3, [r7, #23]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006018:	b004      	add	sp, #16
 800601a:	4770      	bx	lr
 800601c:	01000200 	.word	0x01000200
 8006020:	00e00300 	.word	0x00e00300
 8006024:	00600080 	.word	0x00600080
 8006028:	004000e0 	.word	0x004000e0
 800602c:	a3200008 	.word	0xa3200008

08006030 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800604e:	f023 0303 	bic.w	r3, r3, #3
 8006052:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	78fb      	ldrb	r3, [r7, #3]
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	68f9      	ldr	r1, [r7, #12]
 8006064:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006068:	4313      	orrs	r3, r2
 800606a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d107      	bne.n	8006082 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006078:	461a      	mov	r2, r3
 800607a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800607e:	6053      	str	r3, [r2, #4]
 8006080:	e009      	b.n	8006096 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006082:	78fb      	ldrb	r3, [r7, #3]
 8006084:	2b02      	cmp	r3, #2
 8006086:	d106      	bne.n	8006096 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800608e:	461a      	mov	r2, r3
 8006090:	f241 7370 	movw	r3, #6000	; 0x1770
 8006094:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80060c4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060d2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80060d4:	2064      	movs	r0, #100	; 0x64
 80060d6:	f7fb f98f 	bl	80013f8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060e6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80060e8:	200a      	movs	r0, #10
 80060ea:	f7fb f985 	bl	80013f8 <HAL_Delay>

  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	460b      	mov	r3, r1
 8006102:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006108:	2300      	movs	r3, #0
 800610a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800611c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d109      	bne.n	800613c <USB_DriveVbus+0x44>
 8006128:	78fb      	ldrb	r3, [r7, #3]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d106      	bne.n	800613c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006136:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800613a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006146:	d109      	bne.n	800615c <USB_DriveVbus+0x64>
 8006148:	78fb      	ldrb	r3, [r7, #3]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d106      	bne.n	800615c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006156:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800615a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800616a:	b480      	push	{r7}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	0c5b      	lsrs	r3, r3, #17
 8006188:	f003 0303 	and.w	r3, r3, #3
}
 800618c:	4618      	mov	r0, r3
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	b29b      	uxth	r3, r3
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
	...

080061bc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b088      	sub	sp, #32
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	4608      	mov	r0, r1
 80061c6:	4611      	mov	r1, r2
 80061c8:	461a      	mov	r2, r3
 80061ca:	4603      	mov	r3, r0
 80061cc:	70fb      	strb	r3, [r7, #3]
 80061ce:	460b      	mov	r3, r1
 80061d0:	70bb      	strb	r3, [r7, #2]
 80061d2:	4613      	mov	r3, r2
 80061d4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80061de:	78fb      	ldrb	r3, [r7, #3]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ea:	461a      	mov	r2, r3
 80061ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061f0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80061f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	d87e      	bhi.n	80062f8 <USB_HC_Init+0x13c>
 80061fa:	a201      	add	r2, pc, #4	; (adr r2, 8006200 <USB_HC_Init+0x44>)
 80061fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006200:	08006211 	.word	0x08006211
 8006204:	080062bb 	.word	0x080062bb
 8006208:	08006211 	.word	0x08006211
 800620c:	0800627d 	.word	0x0800627d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	4413      	add	r3, r2
 8006218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621c:	461a      	mov	r2, r3
 800621e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006222:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006224:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006228:	2b00      	cmp	r3, #0
 800622a:	da10      	bge.n	800624e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800622c:	78fb      	ldrb	r3, [r7, #3]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	4413      	add	r3, r2
 8006234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	78fa      	ldrb	r2, [r7, #3]
 800623c:	0151      	lsls	r1, r2, #5
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	440a      	add	r2, r1
 8006242:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800624a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800624c:	e057      	b.n	80062fe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006256:	2b00      	cmp	r3, #0
 8006258:	d051      	beq.n	80062fe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800625a:	78fb      	ldrb	r3, [r7, #3]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	4413      	add	r3, r2
 8006262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	78fa      	ldrb	r2, [r7, #3]
 800626a:	0151      	lsls	r1, r2, #5
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	440a      	add	r2, r1
 8006270:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006274:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006278:	60d3      	str	r3, [r2, #12]
      break;
 800627a:	e040      	b.n	80062fe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800627c:	78fb      	ldrb	r3, [r7, #3]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	4413      	add	r3, r2
 8006284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006288:	461a      	mov	r2, r3
 800628a:	f240 639d 	movw	r3, #1693	; 0x69d
 800628e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006290:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006294:	2b00      	cmp	r3, #0
 8006296:	da34      	bge.n	8006302 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006298:	78fb      	ldrb	r3, [r7, #3]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	78fa      	ldrb	r2, [r7, #3]
 80062a8:	0151      	lsls	r1, r2, #5
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	440a      	add	r2, r1
 80062ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062b6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80062b8:	e023      	b.n	8006302 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062ba:	78fb      	ldrb	r3, [r7, #3]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c6:	461a      	mov	r2, r3
 80062c8:	f240 2325 	movw	r3, #549	; 0x225
 80062cc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80062ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	da17      	bge.n	8006306 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80062d6:	78fb      	ldrb	r3, [r7, #3]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	78fa      	ldrb	r2, [r7, #3]
 80062e6:	0151      	lsls	r1, r2, #5
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	440a      	add	r2, r1
 80062ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062f0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80062f4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80062f6:	e006      	b.n	8006306 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	77fb      	strb	r3, [r7, #31]
      break;
 80062fc:	e004      	b.n	8006308 <USB_HC_Init+0x14c>
      break;
 80062fe:	bf00      	nop
 8006300:	e002      	b.n	8006308 <USB_HC_Init+0x14c>
      break;
 8006302:	bf00      	nop
 8006304:	e000      	b.n	8006308 <USB_HC_Init+0x14c>
      break;
 8006306:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006308:	78fb      	ldrb	r3, [r7, #3]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	4413      	add	r3, r2
 8006310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	78fa      	ldrb	r2, [r7, #3]
 8006318:	0151      	lsls	r1, r2, #5
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	440a      	add	r2, r1
 800631e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006322:	f043 0302 	orr.w	r3, r3, #2
 8006326:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800632e:	699a      	ldr	r2, [r3, #24]
 8006330:	78fb      	ldrb	r3, [r7, #3]
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	2101      	movs	r1, #1
 8006338:	fa01 f303 	lsl.w	r3, r1, r3
 800633c:	6939      	ldr	r1, [r7, #16]
 800633e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006342:	4313      	orrs	r3, r2
 8006344:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006352:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006356:	2b00      	cmp	r3, #0
 8006358:	da03      	bge.n	8006362 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800635a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800635e:	61bb      	str	r3, [r7, #24]
 8006360:	e001      	b.n	8006366 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7ff feff 	bl	800616a <USB_GetHostSpeed>
 800636c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800636e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006372:	2b02      	cmp	r3, #2
 8006374:	d106      	bne.n	8006384 <USB_HC_Init+0x1c8>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2b02      	cmp	r3, #2
 800637a:	d003      	beq.n	8006384 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800637c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006380:	617b      	str	r3, [r7, #20]
 8006382:	e001      	b.n	8006388 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006388:	787b      	ldrb	r3, [r7, #1]
 800638a:	059b      	lsls	r3, r3, #22
 800638c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006390:	78bb      	ldrb	r3, [r7, #2]
 8006392:	02db      	lsls	r3, r3, #11
 8006394:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006398:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800639a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800639e:	049b      	lsls	r3, r3, #18
 80063a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80063a4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80063a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80063a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80063ac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063b2:	78fb      	ldrb	r3, [r7, #3]
 80063b4:	0159      	lsls	r1, r3, #5
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	440b      	add	r3, r1
 80063ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063be:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063c4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80063c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d003      	beq.n	80063d6 <USB_HC_Init+0x21a>
 80063ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d10f      	bne.n	80063f6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80063d6:	78fb      	ldrb	r3, [r7, #3]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	78fa      	ldrb	r2, [r7, #3]
 80063e6:	0151      	lsls	r1, r2, #5
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	440a      	add	r2, r1
 80063ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063f4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80063f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3720      	adds	r7, #32
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08c      	sub	sp, #48	; 0x30
 8006404:	af02      	add	r7, sp, #8
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	4613      	mov	r3, r2
 800640c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	785b      	ldrb	r3, [r3, #1]
 8006416:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800641c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006426:	2b00      	cmp	r3, #0
 8006428:	d02d      	beq.n	8006486 <USB_HC_StartXfer+0x86>
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	791b      	ldrb	r3, [r3, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d129      	bne.n	8006486 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006432:	79fb      	ldrb	r3, [r7, #7]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d117      	bne.n	8006468 <USB_HC_StartXfer+0x68>
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	79db      	ldrb	r3, [r3, #7]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <USB_HC_StartXfer+0x48>
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	79db      	ldrb	r3, [r3, #7]
 8006444:	2b02      	cmp	r3, #2
 8006446:	d10f      	bne.n	8006468 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	4413      	add	r3, r2
 8006450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	69fa      	ldr	r2, [r7, #28]
 8006458:	0151      	lsls	r1, r2, #5
 800645a:	6a3a      	ldr	r2, [r7, #32]
 800645c:	440a      	add	r2, r1
 800645e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006466:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006468:	79fb      	ldrb	r3, [r7, #7]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10b      	bne.n	8006486 <USB_HC_StartXfer+0x86>
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	795b      	ldrb	r3, [r3, #5]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d107      	bne.n	8006486 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	785b      	ldrb	r3, [r3, #1]
 800647a:	4619      	mov	r1, r3
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 fa0f 	bl	80068a0 <USB_DoPing>
      return HAL_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	e0f8      	b.n	8006678 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d018      	beq.n	80064c0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	8912      	ldrh	r2, [r2, #8]
 8006496:	4413      	add	r3, r2
 8006498:	3b01      	subs	r3, #1
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	8912      	ldrh	r2, [r2, #8]
 800649e:	fbb3 f3f2 	udiv	r3, r3, r2
 80064a2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80064a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80064a6:	8b7b      	ldrh	r3, [r7, #26]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d90b      	bls.n	80064c4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80064ac:	8b7b      	ldrh	r3, [r7, #26]
 80064ae:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80064b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	8912      	ldrh	r2, [r2, #8]
 80064b6:	fb03 f202 	mul.w	r2, r3, r2
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	611a      	str	r2, [r3, #16]
 80064be:	e001      	b.n	80064c4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80064c0:	2301      	movs	r3, #1
 80064c2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	78db      	ldrb	r3, [r3, #3]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d007      	beq.n	80064dc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80064cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	8912      	ldrh	r2, [r2, #8]
 80064d2:	fb03 f202 	mul.w	r2, r3, r2
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	611a      	str	r2, [r3, #16]
 80064da:	e003      	b.n	80064e4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	695a      	ldr	r2, [r3, #20]
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064ee:	04d9      	lsls	r1, r3, #19
 80064f0:	4b63      	ldr	r3, [pc, #396]	; (8006680 <USB_HC_StartXfer+0x280>)
 80064f2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064f4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	7a9b      	ldrb	r3, [r3, #10]
 80064fa:	075b      	lsls	r3, r3, #29
 80064fc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006500:	69f9      	ldr	r1, [r7, #28]
 8006502:	0148      	lsls	r0, r1, #5
 8006504:	6a39      	ldr	r1, [r7, #32]
 8006506:	4401      	add	r1, r0
 8006508:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800650c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800650e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006510:	79fb      	ldrb	r3, [r7, #7]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d009      	beq.n	800652a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	68d9      	ldr	r1, [r3, #12]
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	6a3b      	ldr	r3, [r7, #32]
 8006520:	4413      	add	r3, r2
 8006522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006526:	460a      	mov	r2, r1
 8006528:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	bf0c      	ite	eq
 800653a:	2301      	moveq	r3, #1
 800653c:	2300      	movne	r3, #0
 800653e:	b2db      	uxtb	r3, r3
 8006540:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	4413      	add	r3, r2
 800654a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	69fa      	ldr	r2, [r7, #28]
 8006552:	0151      	lsls	r1, r2, #5
 8006554:	6a3a      	ldr	r2, [r7, #32]
 8006556:	440a      	add	r2, r1
 8006558:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800655c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006560:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	4413      	add	r3, r2
 800656a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	7e7b      	ldrb	r3, [r7, #25]
 8006572:	075b      	lsls	r3, r3, #29
 8006574:	69f9      	ldr	r1, [r7, #28]
 8006576:	0148      	lsls	r0, r1, #5
 8006578:	6a39      	ldr	r1, [r7, #32]
 800657a:	4401      	add	r1, r0
 800657c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006580:	4313      	orrs	r3, r2
 8006582:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	4413      	add	r3, r2
 800658c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800659a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	78db      	ldrb	r3, [r3, #3]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d004      	beq.n	80065ae <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	e003      	b.n	80065b6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065b4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065bc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ca:	461a      	mov	r2, r3
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80065d0:	79fb      	ldrb	r3, [r7, #7]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	e04e      	b.n	8006678 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	78db      	ldrb	r3, [r3, #3]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d149      	bne.n	8006676 <USB_HC_StartXfer+0x276>
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d045      	beq.n	8006676 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	79db      	ldrb	r3, [r3, #7]
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	d830      	bhi.n	8006654 <USB_HC_StartXfer+0x254>
 80065f2:	a201      	add	r2, pc, #4	; (adr r2, 80065f8 <USB_HC_StartXfer+0x1f8>)
 80065f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f8:	08006609 	.word	0x08006609
 80065fc:	0800662d 	.word	0x0800662d
 8006600:	08006609 	.word	0x08006609
 8006604:	0800662d 	.word	0x0800662d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	3303      	adds	r3, #3
 800660e:	089b      	lsrs	r3, r3, #2
 8006610:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006612:	8afa      	ldrh	r2, [r7, #22]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006618:	b29b      	uxth	r3, r3
 800661a:	429a      	cmp	r2, r3
 800661c:	d91c      	bls.n	8006658 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	f043 0220 	orr.w	r2, r3, #32
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	619a      	str	r2, [r3, #24]
        }
        break;
 800662a:	e015      	b.n	8006658 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	3303      	adds	r3, #3
 8006632:	089b      	lsrs	r3, r3, #2
 8006634:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006636:	8afa      	ldrh	r2, [r7, #22]
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	b29b      	uxth	r3, r3
 8006642:	429a      	cmp	r2, r3
 8006644:	d90a      	bls.n	800665c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	619a      	str	r2, [r3, #24]
        }
        break;
 8006652:	e003      	b.n	800665c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006654:	bf00      	nop
 8006656:	e002      	b.n	800665e <USB_HC_StartXfer+0x25e>
        break;
 8006658:	bf00      	nop
 800665a:	e000      	b.n	800665e <USB_HC_StartXfer+0x25e>
        break;
 800665c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	68d9      	ldr	r1, [r3, #12]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	785a      	ldrb	r2, [r3, #1]
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	b29b      	uxth	r3, r3
 800666c:	2000      	movs	r0, #0
 800666e:	9000      	str	r0, [sp, #0]
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f7ff fb31 	bl	8005cd8 <USB_WritePacket>
  }

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3728      	adds	r7, #40	; 0x28
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	1ff80000 	.word	0x1ff80000

08006684 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	b29b      	uxth	r3, r3
}
 800669a:	4618      	mov	r0, r3
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b089      	sub	sp, #36	; 0x24
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	460b      	mov	r3, r1
 80066b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80066b6:	78fb      	ldrb	r3, [r7, #3]
 80066b8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	0c9b      	lsrs	r3, r3, #18
 80066ce:	f003 0303 	and.w	r3, r3, #3
 80066d2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	0fdb      	lsrs	r3, r3, #31
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f003 0320 	and.w	r3, r3, #32
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d104      	bne.n	8006700 <USB_HC_Halt+0x5a>
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	e0c8      	b.n	8006892 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <USB_HC_Halt+0x66>
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2b02      	cmp	r3, #2
 800670a:	d163      	bne.n	80067d4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	4413      	add	r3, r2
 8006714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69ba      	ldr	r2, [r7, #24]
 800671c:	0151      	lsls	r1, r2, #5
 800671e:	69fa      	ldr	r2, [r7, #28]
 8006720:	440a      	add	r2, r1
 8006722:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006726:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800672a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f003 0320 	and.w	r3, r3, #32
 8006734:	2b00      	cmp	r3, #0
 8006736:	f040 80ab 	bne.w	8006890 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d133      	bne.n	80067ae <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	4413      	add	r3, r2
 800674e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	0151      	lsls	r1, r2, #5
 8006758:	69fa      	ldr	r2, [r7, #28]
 800675a:	440a      	add	r2, r1
 800675c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006760:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006764:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	4413      	add	r3, r2
 800676e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	0151      	lsls	r1, r2, #5
 8006778:	69fa      	ldr	r2, [r7, #28]
 800677a:	440a      	add	r2, r1
 800677c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006780:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006784:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3301      	adds	r3, #1
 800678a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006792:	d81d      	bhi.n	80067d0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	4413      	add	r3, r2
 800679c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067aa:	d0ec      	beq.n	8006786 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067ac:	e070      	b.n	8006890 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	0151      	lsls	r1, r2, #5
 80067c0:	69fa      	ldr	r2, [r7, #28]
 80067c2:	440a      	add	r2, r1
 80067c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067cc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067ce:	e05f      	b.n	8006890 <USB_HC_Halt+0x1ea>
            break;
 80067d0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067d2:	e05d      	b.n	8006890 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	0151      	lsls	r1, r2, #5
 80067e6:	69fa      	ldr	r2, [r7, #28]
 80067e8:	440a      	add	r2, r1
 80067ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067f2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d133      	bne.n	800686c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	4413      	add	r3, r2
 800680c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	0151      	lsls	r1, r2, #5
 8006816:	69fa      	ldr	r2, [r7, #28]
 8006818:	440a      	add	r2, r1
 800681a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800681e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006822:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	4413      	add	r3, r2
 800682c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	69ba      	ldr	r2, [r7, #24]
 8006834:	0151      	lsls	r1, r2, #5
 8006836:	69fa      	ldr	r2, [r7, #28]
 8006838:	440a      	add	r2, r1
 800683a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800683e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006842:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	3301      	adds	r3, #1
 8006848:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006850:	d81d      	bhi.n	800688e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	4413      	add	r3, r2
 800685a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006868:	d0ec      	beq.n	8006844 <USB_HC_Halt+0x19e>
 800686a:	e011      	b.n	8006890 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	4413      	add	r3, r2
 8006874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	0151      	lsls	r1, r2, #5
 800687e:	69fa      	ldr	r2, [r7, #28]
 8006880:	440a      	add	r2, r1
 8006882:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800688a:	6013      	str	r3, [r2, #0]
 800688c:	e000      	b.n	8006890 <USB_HC_Halt+0x1ea>
          break;
 800688e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3724      	adds	r7, #36	; 0x24
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
	...

080068a0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80068b0:	78fb      	ldrb	r3, [r7, #3]
 80068b2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80068b4:	2301      	movs	r3, #1
 80068b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	04da      	lsls	r2, r3, #19
 80068bc:	4b15      	ldr	r3, [pc, #84]	; (8006914 <USB_DoPing+0x74>)
 80068be:	4013      	ands	r3, r2
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	0151      	lsls	r1, r2, #5
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	440a      	add	r2, r1
 80068c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068d0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068e8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068f0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fe:	461a      	mov	r2, r3
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	371c      	adds	r7, #28
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	1ff80000 	.word	0x1ff80000

08006918 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f7ff f911 	bl	8005b54 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006932:	2110      	movs	r1, #16
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff f96b 	bl	8005c10 <USB_FlushTxFifo>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f7ff f997 	bl	8005c78 <USB_FlushRxFifo>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006954:	2300      	movs	r3, #0
 8006956:	61bb      	str	r3, [r7, #24]
 8006958:	e01f      	b.n	800699a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	4413      	add	r3, r2
 8006962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006970:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006978:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006980:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	4413      	add	r3, r2
 800698a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800698e:	461a      	mov	r2, r3
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	3301      	adds	r3, #1
 8006998:	61bb      	str	r3, [r7, #24]
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	2b0f      	cmp	r3, #15
 800699e:	d9dc      	bls.n	800695a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80069a0:	2300      	movs	r3, #0
 80069a2:	61bb      	str	r3, [r7, #24]
 80069a4:	e034      	b.n	8006a10 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069cc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	015a      	lsls	r2, r3, #5
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069da:	461a      	mov	r2, r3
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3301      	adds	r3, #1
 80069e4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069ec:	d80c      	bhi.n	8006a08 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a04:	d0ec      	beq.n	80069e0 <USB_StopHost+0xc8>
 8006a06:	e000      	b.n	8006a0a <USB_StopHost+0xf2>
        break;
 8006a08:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	61bb      	str	r3, [r7, #24]
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	2b0f      	cmp	r3, #15
 8006a14:	d9c7      	bls.n	80069a6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a22:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a2a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff f880 	bl	8005b32 <USB_EnableGlobalInt>

  return ret;
 8006a32:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3720      	adds	r7, #32
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006a3c:	b590      	push	{r4, r7, lr}
 8006a3e:	b089      	sub	sp, #36	; 0x24
 8006a40:	af04      	add	r7, sp, #16
 8006a42:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006a44:	2301      	movs	r3, #1
 8006a46:	2202      	movs	r2, #2
 8006a48:	2102      	movs	r1, #2
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fc66 	bl	800731c <USBH_FindInterface>
 8006a50:	4603      	mov	r3, r0
 8006a52:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
 8006a56:	2bff      	cmp	r3, #255	; 0xff
 8006a58:	d002      	beq.n	8006a60 <USBH_CDC_InterfaceInit+0x24>
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d901      	bls.n	8006a64 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a60:	2302      	movs	r3, #2
 8006a62:	e13d      	b.n	8006ce0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fc3b 	bl	80072e4 <USBH_SelectInterface>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006a72:	7bbb      	ldrb	r3, [r7, #14]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006a78:	2302      	movs	r3, #2
 8006a7a:	e131      	b.n	8006ce0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006a82:	2050      	movs	r0, #80	; 0x50
 8006a84:	f002 fad2 	bl	800902c <malloc>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	e11f      	b.n	8006ce0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006aa0:	2250      	movs	r2, #80	; 0x50
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	68b8      	ldr	r0, [r7, #8]
 8006aa6:	f002 fb7d 	bl	80091a4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	211a      	movs	r1, #26
 8006ab0:	fb01 f303 	mul.w	r3, r1, r3
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	b25b      	sxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	da15      	bge.n	8006aee <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	211a      	movs	r1, #26
 8006ac8:	fb01 f303 	mul.w	r3, r1, r3
 8006acc:	4413      	add	r3, r2
 8006ace:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ad2:	781a      	ldrb	r2, [r3, #0]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	211a      	movs	r1, #26
 8006ade:	fb01 f303 	mul.w	r3, r1, r3
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ae8:	881a      	ldrh	r2, [r3, #0]
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	785b      	ldrb	r3, [r3, #1]
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f001 ff2e 	bl	8008956 <USBH_AllocPipe>
 8006afa:	4603      	mov	r3, r0
 8006afc:	461a      	mov	r2, r3
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	7819      	ldrb	r1, [r3, #0]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	7858      	ldrb	r0, [r3, #1]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	8952      	ldrh	r2, [r2, #10]
 8006b1a:	9202      	str	r2, [sp, #8]
 8006b1c:	2203      	movs	r2, #3
 8006b1e:	9201      	str	r2, [sp, #4]
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	4623      	mov	r3, r4
 8006b24:	4602      	mov	r2, r0
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 fee6 	bl	80088f8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	2200      	movs	r2, #0
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f002 f9f5 	bl	8008f24 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	210a      	movs	r1, #10
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fbeb 	bl	800731c <USBH_FindInterface>
 8006b46:	4603      	mov	r3, r0
 8006b48:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
 8006b4c:	2bff      	cmp	r3, #255	; 0xff
 8006b4e:	d002      	beq.n	8006b56 <USBH_CDC_InterfaceInit+0x11a>
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d901      	bls.n	8006b5a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006b56:	2302      	movs	r3, #2
 8006b58:	e0c2      	b.n	8006ce0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	211a      	movs	r1, #26
 8006b60:	fb01 f303 	mul.w	r3, r1, r3
 8006b64:	4413      	add	r3, r2
 8006b66:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	b25b      	sxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	da16      	bge.n	8006ba0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	211a      	movs	r1, #26
 8006b78:	fb01 f303 	mul.w	r3, r1, r3
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b82:	781a      	ldrb	r2, [r3, #0]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	211a      	movs	r1, #26
 8006b8e:	fb01 f303 	mul.w	r3, r1, r3
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b98:	881a      	ldrh	r2, [r3, #0]
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	835a      	strh	r2, [r3, #26]
 8006b9e:	e015      	b.n	8006bcc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	211a      	movs	r1, #26
 8006ba6:	fb01 f303 	mul.w	r3, r1, r3
 8006baa:	4413      	add	r3, r2
 8006bac:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006bb0:	781a      	ldrb	r2, [r3, #0]
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006bb6:	7bfb      	ldrb	r3, [r7, #15]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	211a      	movs	r1, #26
 8006bbc:	fb01 f303 	mul.w	r3, r1, r3
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006bc6:	881a      	ldrh	r2, [r3, #0]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	211a      	movs	r1, #26
 8006bd2:	fb01 f303 	mul.w	r3, r1, r3
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	b25b      	sxtb	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	da16      	bge.n	8006c12 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	211a      	movs	r1, #26
 8006bea:	fb01 f303 	mul.w	r3, r1, r3
 8006bee:	4413      	add	r3, r2
 8006bf0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006bf4:	781a      	ldrb	r2, [r3, #0]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	211a      	movs	r1, #26
 8006c00:	fb01 f303 	mul.w	r3, r1, r3
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006c0a:	881a      	ldrh	r2, [r3, #0]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	835a      	strh	r2, [r3, #26]
 8006c10:	e015      	b.n	8006c3e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	211a      	movs	r1, #26
 8006c18:	fb01 f303 	mul.w	r3, r1, r3
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c22:	781a      	ldrb	r2, [r3, #0]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	211a      	movs	r1, #26
 8006c2e:	fb01 f303 	mul.w	r3, r1, r3
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006c38:	881a      	ldrh	r2, [r3, #0]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	7b9b      	ldrb	r3, [r3, #14]
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 fe86 	bl	8008956 <USBH_AllocPipe>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	7bdb      	ldrb	r3, [r3, #15]
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f001 fe7c 	bl	8008956 <USBH_AllocPipe>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	461a      	mov	r2, r3
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	7b59      	ldrb	r1, [r3, #13]
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	7b98      	ldrb	r0, [r3, #14]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	8b12      	ldrh	r2, [r2, #24]
 8006c7e:	9202      	str	r2, [sp, #8]
 8006c80:	2202      	movs	r2, #2
 8006c82:	9201      	str	r2, [sp, #4]
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	4623      	mov	r3, r4
 8006c88:	4602      	mov	r2, r0
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 fe34 	bl	80088f8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	7b19      	ldrb	r1, [r3, #12]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	7bd8      	ldrb	r0, [r3, #15]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	8b52      	ldrh	r2, [r2, #26]
 8006ca8:	9202      	str	r2, [sp, #8]
 8006caa:	2202      	movs	r2, #2
 8006cac:	9201      	str	r2, [sp, #4]
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	4623      	mov	r3, r4
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f001 fe1f 	bl	80088f8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	7b5b      	ldrb	r3, [r3, #13]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	4619      	mov	r1, r3
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f002 f92a 	bl	8008f24 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	7b1b      	ldrb	r3, [r3, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f002 f923 	bl	8008f24 <USBH_LL_SetToggle>

  return USBH_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd90      	pop	{r4, r7, pc}

08006ce8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00e      	beq.n	8006d20 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 fe14 	bl	8008936 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f001 fe3f 	bl	8008998 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	7b1b      	ldrb	r3, [r3, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00e      	beq.n	8006d46 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	7b1b      	ldrb	r3, [r3, #12]
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f001 fe01 	bl	8008936 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	7b1b      	ldrb	r3, [r3, #12]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 fe2c 	bl	8008998 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	7b5b      	ldrb	r3, [r3, #13]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00e      	beq.n	8006d6c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	7b5b      	ldrb	r3, [r3, #13]
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f001 fdee 	bl	8008936 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	7b5b      	ldrb	r3, [r3, #13]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 fe19 	bl	8008998 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d72:	69db      	ldr	r3, [r3, #28]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00b      	beq.n	8006d90 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	4618      	mov	r0, r3
 8006d82:	f002 f95b 	bl	800903c <free>
    phost->pActiveClass->pData = 0U;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	3340      	adds	r3, #64	; 0x40
 8006db0:	4619      	mov	r1, r3
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f8b1 	bl	8006f1a <GetLineCoding>
 8006db8:	4603      	mov	r3, r0
 8006dba:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006dbc:	7afb      	ldrb	r3, [r7, #11]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d105      	bne.n	8006dce <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dc8:	2102      	movs	r1, #2
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006dce:	7afb      	ldrb	r3, [r7, #11]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006de0:	2301      	movs	r3, #1
 8006de2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dee:	69db      	ldr	r3, [r3, #28]
 8006df0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006df8:	2b04      	cmp	r3, #4
 8006dfa:	d877      	bhi.n	8006eec <USBH_CDC_Process+0x114>
 8006dfc:	a201      	add	r2, pc, #4	; (adr r2, 8006e04 <USBH_CDC_Process+0x2c>)
 8006dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e02:	bf00      	nop
 8006e04:	08006e19 	.word	0x08006e19
 8006e08:	08006e1f 	.word	0x08006e1f
 8006e0c:	08006e4f 	.word	0x08006e4f
 8006e10:	08006ec3 	.word	0x08006ec3
 8006e14:	08006ed1 	.word	0x08006ed1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e1c:	e06d      	b.n	8006efa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f897 	bl	8006f58 <SetLineCoding>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e2e:	7bbb      	ldrb	r3, [r7, #14]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d104      	bne.n	8006e3e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e3c:	e058      	b.n	8006ef0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006e3e:	7bbb      	ldrb	r3, [r7, #14]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d055      	beq.n	8006ef0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2204      	movs	r2, #4
 8006e48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006e4c:	e050      	b.n	8006ef0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	3340      	adds	r3, #64	; 0x40
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f860 	bl	8006f1a <GetLineCoding>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d126      	bne.n	8006eb2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e76:	791b      	ldrb	r3, [r3, #4]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d13b      	bne.n	8006ef4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e86:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d133      	bne.n	8006ef4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e96:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d12b      	bne.n	8006ef4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d124      	bne.n	8006ef4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f958 	bl	8007160 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006eb0:	e020      	b.n	8006ef4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006eb2:	7bbb      	ldrb	r3, [r7, #14]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d01d      	beq.n	8006ef4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2204      	movs	r2, #4
 8006ebc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006ec0:	e018      	b.n	8006ef4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f867 	bl	8006f96 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f8da 	bl	8007082 <CDC_ProcessReception>
      break;
 8006ece:	e014      	b.n	8006efa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 ffef 	bl	8007eb6 <USBH_ClrFeature>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006edc:	7bbb      	ldrb	r3, [r7, #14]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10a      	bne.n	8006ef8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006eea:	e005      	b.n	8006ef8 <USBH_CDC_Process+0x120>

    default:
      break;
 8006eec:	bf00      	nop
 8006eee:	e004      	b.n	8006efa <USBH_CDC_Process+0x122>
      break;
 8006ef0:	bf00      	nop
 8006ef2:	e002      	b.n	8006efa <USBH_CDC_Process+0x122>
      break;
 8006ef4:	bf00      	nop
 8006ef6:	e000      	b.n	8006efa <USBH_CDC_Process+0x122>
      break;
 8006ef8:	bf00      	nop

  }

  return status;
 8006efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	370c      	adds	r7, #12
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr

08006f1a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b082      	sub	sp, #8
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
 8006f22:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	22a1      	movs	r2, #161	; 0xa1
 8006f28:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2221      	movs	r2, #33	; 0x21
 8006f2e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2207      	movs	r2, #7
 8006f40:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2207      	movs	r2, #7
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 fa83 	bl	8008454 <USBH_CtlReq>
 8006f4e:	4603      	mov	r3, r0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2221      	movs	r2, #33	; 0x21
 8006f66:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2207      	movs	r2, #7
 8006f7e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	2207      	movs	r2, #7
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f001 fa64 	bl	8008454 <USBH_CtlReq>
 8006f8c:	4603      	mov	r3, r0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b086      	sub	sp, #24
 8006f9a:	af02      	add	r7, sp, #8
 8006f9c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d002      	beq.n	8006fbc <CDC_ProcessTransmission+0x26>
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d023      	beq.n	8007002 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006fba:	e05e      	b.n	800707a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	8b12      	ldrh	r2, [r2, #24]
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d90b      	bls.n	8006fe0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	69d9      	ldr	r1, [r3, #28]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8b1a      	ldrh	r2, [r3, #24]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	7b5b      	ldrb	r3, [r3, #13]
 8006fd4:	2001      	movs	r0, #1
 8006fd6:	9000      	str	r0, [sp, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f001 fc4a 	bl	8008872 <USBH_BulkSendData>
 8006fde:	e00b      	b.n	8006ff8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	7b5b      	ldrb	r3, [r3, #13]
 8006fee:	2001      	movs	r0, #1
 8006ff0:	9000      	str	r0, [sp, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f001 fc3d 	bl	8008872 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007000:	e03b      	b.n	800707a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	7b5b      	ldrb	r3, [r3, #13]
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f001 ff61 	bl	8008ed0 <USBH_LL_GetURBState>
 800700e:	4603      	mov	r3, r0
 8007010:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007012:	7afb      	ldrb	r3, [r7, #11]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d128      	bne.n	800706a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	8b12      	ldrh	r2, [r2, #24]
 8007020:	4293      	cmp	r3, r2
 8007022:	d90e      	bls.n	8007042 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	8b12      	ldrh	r2, [r2, #24]
 800702c:	1a9a      	subs	r2, r3, r2
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	8b12      	ldrh	r2, [r2, #24]
 800703a:	441a      	add	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	61da      	str	r2, [r3, #28]
 8007040:	e002      	b.n	8007048 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704c:	2b00      	cmp	r3, #0
 800704e:	d004      	beq.n	800705a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007058:	e00e      	b.n	8007078 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f868 	bl	8007138 <USBH_CDC_TransmitCallback>
      break;
 8007068:	e006      	b.n	8007078 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800706a:	7afb      	ldrb	r3, [r7, #11]
 800706c:	2b02      	cmp	r3, #2
 800706e:	d103      	bne.n	8007078 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007078:	bf00      	nop
  }
}
 800707a:	bf00      	nop
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b086      	sub	sp, #24
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007094:	2300      	movs	r3, #0
 8007096:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d002      	beq.n	80070a8 <CDC_ProcessReception+0x26>
 80070a2:	2b04      	cmp	r3, #4
 80070a4:	d00e      	beq.n	80070c4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80070a6:	e043      	b.n	8007130 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	6a19      	ldr	r1, [r3, #32]
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	8b5a      	ldrh	r2, [r3, #26]
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	7b1b      	ldrb	r3, [r3, #12]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 fc01 	bl	80088bc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2204      	movs	r2, #4
 80070be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80070c2:	e035      	b.n	8007130 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	7b1b      	ldrb	r3, [r3, #12]
 80070c8:	4619      	mov	r1, r3
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f001 ff00 	bl	8008ed0 <USBH_LL_GetURBState>
 80070d0:	4603      	mov	r3, r0
 80070d2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80070d4:	7cfb      	ldrb	r3, [r7, #19]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d129      	bne.n	800712e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	7b1b      	ldrb	r3, [r3, #12]
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 fe63 	bl	8008dac <USBH_LL_GetLastXferSize>
 80070e6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d016      	beq.n	8007120 <CDC_ProcessReception+0x9e>
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	8b5b      	ldrh	r3, [r3, #26]
 80070f6:	461a      	mov	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d910      	bls.n	8007120 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	1ad2      	subs	r2, r2, r3
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	6a1a      	ldr	r2, [r3, #32]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	441a      	add	r2, r3
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2203      	movs	r2, #3
 800711a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800711e:	e006      	b.n	800712e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f80f 	bl	800714c <USBH_CDC_ReceiveCallback>
      break;
 800712e:	bf00      	nop
  }
}
 8007130:	bf00      	nop
 8007132:	3718      	adds	r7, #24
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	4613      	mov	r3, r2
 8007180:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007188:	2302      	movs	r3, #2
 800718a:	e029      	b.n	80071e0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	79fa      	ldrb	r2, [r7, #7]
 8007190:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 f81f 	bl	80071e8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d003      	beq.n	80071d8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f001 fd33 	bl	8008c44 <USBH_LL_Init>

  return USBH_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80071f0:	2300      	movs	r3, #0
 80071f2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80071f4:	2300      	movs	r3, #0
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	e009      	b.n	800720e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	33e0      	adds	r3, #224	; 0xe0
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	2200      	movs	r2, #0
 8007206:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3301      	adds	r3, #1
 800720c:	60fb      	str	r3, [r7, #12]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2b0f      	cmp	r3, #15
 8007212:	d9f2      	bls.n	80071fa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]
 8007218:	e009      	b.n	800722e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	4413      	add	r3, r2
 8007220:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007224:	2200      	movs	r2, #0
 8007226:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	3301      	adds	r3, #1
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007234:	d3f1      	bcc.n	800721a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2240      	movs	r2, #64	; 0x40
 800725a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d016      	beq.n	80072d2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10e      	bne.n	80072cc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80072b4:	1c59      	adds	r1, r3, #1
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	33de      	adds	r3, #222	; 0xde
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	73fb      	strb	r3, [r7, #15]
 80072ca:	e004      	b.n	80072d6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80072cc:	2302      	movs	r3, #2
 80072ce:	73fb      	strb	r3, [r7, #15]
 80072d0:	e001      	b.n	80072d6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80072d2:	2302      	movs	r3, #2
 80072d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80072fa:	78fa      	ldrb	r2, [r7, #3]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d204      	bcs.n	800730a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	78fa      	ldrb	r2, [r7, #3]
 8007304:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007308:	e001      	b.n	800730e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800730a:	2302      	movs	r3, #2
 800730c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800730e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	4608      	mov	r0, r1
 8007326:	4611      	mov	r1, r2
 8007328:	461a      	mov	r2, r3
 800732a:	4603      	mov	r3, r0
 800732c:	70fb      	strb	r3, [r7, #3]
 800732e:	460b      	mov	r3, r1
 8007330:	70bb      	strb	r3, [r7, #2]
 8007332:	4613      	mov	r3, r2
 8007334:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007336:	2300      	movs	r3, #0
 8007338:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800733a:	2300      	movs	r3, #0
 800733c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007344:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007346:	e025      	b.n	8007394 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007348:	7dfb      	ldrb	r3, [r7, #23]
 800734a:	221a      	movs	r2, #26
 800734c:	fb02 f303 	mul.w	r3, r2, r3
 8007350:	3308      	adds	r3, #8
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	4413      	add	r3, r2
 8007356:	3302      	adds	r3, #2
 8007358:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	795b      	ldrb	r3, [r3, #5]
 800735e:	78fa      	ldrb	r2, [r7, #3]
 8007360:	429a      	cmp	r2, r3
 8007362:	d002      	beq.n	800736a <USBH_FindInterface+0x4e>
 8007364:	78fb      	ldrb	r3, [r7, #3]
 8007366:	2bff      	cmp	r3, #255	; 0xff
 8007368:	d111      	bne.n	800738e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800736e:	78ba      	ldrb	r2, [r7, #2]
 8007370:	429a      	cmp	r2, r3
 8007372:	d002      	beq.n	800737a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007374:	78bb      	ldrb	r3, [r7, #2]
 8007376:	2bff      	cmp	r3, #255	; 0xff
 8007378:	d109      	bne.n	800738e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800737e:	787a      	ldrb	r2, [r7, #1]
 8007380:	429a      	cmp	r2, r3
 8007382:	d002      	beq.n	800738a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007384:	787b      	ldrb	r3, [r7, #1]
 8007386:	2bff      	cmp	r3, #255	; 0xff
 8007388:	d101      	bne.n	800738e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800738a:	7dfb      	ldrb	r3, [r7, #23]
 800738c:	e006      	b.n	800739c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800738e:	7dfb      	ldrb	r3, [r7, #23]
 8007390:	3301      	adds	r3, #1
 8007392:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007394:	7dfb      	ldrb	r3, [r7, #23]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d9d6      	bls.n	8007348 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800739a:	23ff      	movs	r3, #255	; 0xff
}
 800739c:	4618      	mov	r0, r3
 800739e:	371c      	adds	r7, #28
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f001 fc83 	bl	8008cbc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80073b6:	2101      	movs	r1, #1
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f001 fd9c 	bl	8008ef6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af04      	add	r7, sp, #16
 80073ce:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80073d0:	2302      	movs	r3, #2
 80073d2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d102      	bne.n	80073ea <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2203      	movs	r2, #3
 80073e8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b0b      	cmp	r3, #11
 80073f2:	f200 81be 	bhi.w	8007772 <USBH_Process+0x3aa>
 80073f6:	a201      	add	r2, pc, #4	; (adr r2, 80073fc <USBH_Process+0x34>)
 80073f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fc:	0800742d 	.word	0x0800742d
 8007400:	0800745f 	.word	0x0800745f
 8007404:	080074c7 	.word	0x080074c7
 8007408:	0800770d 	.word	0x0800770d
 800740c:	08007773 	.word	0x08007773
 8007410:	0800756b 	.word	0x0800756b
 8007414:	080076b3 	.word	0x080076b3
 8007418:	080075a1 	.word	0x080075a1
 800741c:	080075c1 	.word	0x080075c1
 8007420:	080075e1 	.word	0x080075e1
 8007424:	08007625 	.word	0x08007625
 8007428:	080076f5 	.word	0x080076f5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 819e 	beq.w	8007776 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007440:	20c8      	movs	r0, #200	; 0xc8
 8007442:	f001 fd9f 	bl	8008f84 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f001 fc95 	bl	8008d76 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800745c:	e18b      	b.n	8007776 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007464:	2b01      	cmp	r3, #1
 8007466:	d107      	bne.n	8007478 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2202      	movs	r2, #2
 8007474:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007476:	e18d      	b.n	8007794 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800747e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007482:	d914      	bls.n	80074ae <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800748a:	3301      	adds	r3, #1
 800748c:	b2da      	uxtb	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800749a:	2b03      	cmp	r3, #3
 800749c:	d903      	bls.n	80074a6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	220d      	movs	r2, #13
 80074a2:	701a      	strb	r2, [r3, #0]
      break;
 80074a4:	e176      	b.n	8007794 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	701a      	strb	r2, [r3, #0]
      break;
 80074ac:	e172      	b.n	8007794 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80074b4:	f103 020a 	add.w	r2, r3, #10
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80074be:	200a      	movs	r0, #10
 80074c0:	f001 fd60 	bl	8008f84 <USBH_Delay>
      break;
 80074c4:	e166      	b.n	8007794 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d005      	beq.n	80074dc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074d6:	2104      	movs	r1, #4
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80074dc:	2064      	movs	r0, #100	; 0x64
 80074de:	f001 fd51 	bl	8008f84 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 fc20 	bl	8008d28 <USBH_LL_GetSpeed>
 80074e8:	4603      	mov	r3, r0
 80074ea:	461a      	mov	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2205      	movs	r2, #5
 80074f6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80074f8:	2100      	movs	r1, #0
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f001 fa2b 	bl	8008956 <USBH_AllocPipe>
 8007500:	4603      	mov	r3, r0
 8007502:	461a      	mov	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007508:	2180      	movs	r1, #128	; 0x80
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f001 fa23 	bl	8008956 <USBH_AllocPipe>
 8007510:	4603      	mov	r3, r0
 8007512:	461a      	mov	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	7919      	ldrb	r1, [r3, #4]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800752c:	b292      	uxth	r2, r2
 800752e:	9202      	str	r2, [sp, #8]
 8007530:	2200      	movs	r2, #0
 8007532:	9201      	str	r2, [sp, #4]
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	4603      	mov	r3, r0
 8007538:	2280      	movs	r2, #128	; 0x80
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f001 f9dc 	bl	80088f8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	7959      	ldrb	r1, [r3, #5]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007554:	b292      	uxth	r2, r2
 8007556:	9202      	str	r2, [sp, #8]
 8007558:	2200      	movs	r2, #0
 800755a:	9201      	str	r2, [sp, #4]
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	4603      	mov	r3, r0
 8007560:	2200      	movs	r2, #0
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f001 f9c8 	bl	80088f8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007568:	e114      	b.n	8007794 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f918 	bl	80077a0 <USBH_HandleEnum>
 8007570:	4603      	mov	r3, r0
 8007572:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	f040 80fe 	bne.w	800777a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800758c:	2b01      	cmp	r3, #1
 800758e:	d103      	bne.n	8007598 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2208      	movs	r2, #8
 8007594:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007596:	e0f0      	b.n	800777a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2207      	movs	r2, #7
 800759c:	701a      	strb	r2, [r3, #0]
      break;
 800759e:	e0ec      	b.n	800777a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 80e9 	beq.w	800777e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075b2:	2101      	movs	r1, #1
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2208      	movs	r2, #8
 80075bc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80075be:	e0de      	b.n	800777e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	4619      	mov	r1, r3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fc2c 	bl	8007e28 <USBH_SetCfg>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f040 80d5 	bne.w	8007782 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2209      	movs	r2, #9
 80075dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075de:	e0d0      	b.n	8007782 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80075e6:	f003 0320 	and.w	r3, r3, #32
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d016      	beq.n	800761c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80075ee:	2101      	movs	r1, #1
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fc3c 	bl	8007e6e <USBH_SetFeature>
 80075f6:	4603      	mov	r3, r0
 80075f8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80075fa:	7bbb      	ldrb	r3, [r7, #14]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d103      	bne.n	800760a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	220a      	movs	r2, #10
 8007606:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007608:	e0bd      	b.n	8007786 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800760a:	7bbb      	ldrb	r3, [r7, #14]
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b03      	cmp	r3, #3
 8007610:	f040 80b9 	bne.w	8007786 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	220a      	movs	r2, #10
 8007618:	701a      	strb	r2, [r3, #0]
      break;
 800761a:	e0b4      	b.n	8007786 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	220a      	movs	r2, #10
 8007620:	701a      	strb	r2, [r3, #0]
      break;
 8007622:	e0b0      	b.n	8007786 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 80ad 	beq.w	800778a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007638:	2300      	movs	r3, #0
 800763a:	73fb      	strb	r3, [r7, #15]
 800763c:	e016      	b.n	800766c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800763e:	7bfa      	ldrb	r2, [r7, #15]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	32de      	adds	r2, #222	; 0xde
 8007644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007648:	791a      	ldrb	r2, [r3, #4]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007650:	429a      	cmp	r2, r3
 8007652:	d108      	bne.n	8007666 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007654:	7bfa      	ldrb	r2, [r7, #15]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	32de      	adds	r2, #222	; 0xde
 800765a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007664:	e005      	b.n	8007672 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007666:	7bfb      	ldrb	r3, [r7, #15]
 8007668:	3301      	adds	r3, #1
 800766a:	73fb      	strb	r3, [r7, #15]
 800766c:	7bfb      	ldrb	r3, [r7, #15]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d0e5      	beq.n	800763e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007678:	2b00      	cmp	r3, #0
 800767a:	d016      	beq.n	80076aa <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	4798      	blx	r3
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d109      	bne.n	80076a2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2206      	movs	r2, #6
 8007692:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800769a:	2103      	movs	r1, #3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076a0:	e073      	b.n	800778a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	220d      	movs	r2, #13
 80076a6:	701a      	strb	r2, [r3, #0]
      break;
 80076a8:	e06f      	b.n	800778a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	220d      	movs	r2, #13
 80076ae:	701a      	strb	r2, [r3, #0]
      break;
 80076b0:	e06b      	b.n	800778a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d017      	beq.n	80076ec <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	4798      	blx	r3
 80076c8:	4603      	mov	r3, r0
 80076ca:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d103      	bne.n	80076dc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	220b      	movs	r2, #11
 80076d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076da:	e058      	b.n	800778e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d154      	bne.n	800778e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	220d      	movs	r2, #13
 80076e8:	701a      	strb	r2, [r3, #0]
      break;
 80076ea:	e050      	b.n	800778e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	220d      	movs	r2, #13
 80076f0:	701a      	strb	r2, [r3, #0]
      break;
 80076f2:	e04c      	b.n	800778e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d049      	beq.n	8007792 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	4798      	blx	r3
      }
      break;
 800770a:	e042      	b.n	8007792 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7ff fd67 	bl	80071e8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007720:	2b00      	cmp	r3, #0
 8007722:	d009      	beq.n	8007738 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800773e:	2b00      	cmp	r3, #0
 8007740:	d005      	beq.n	800774e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007748:	2105      	movs	r1, #5
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b01      	cmp	r3, #1
 8007758:	d107      	bne.n	800776a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7ff fe20 	bl	80073a8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007768:	e014      	b.n	8007794 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f001 faa6 	bl	8008cbc <USBH_LL_Start>
      break;
 8007770:	e010      	b.n	8007794 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007772:	bf00      	nop
 8007774:	e00e      	b.n	8007794 <USBH_Process+0x3cc>
      break;
 8007776:	bf00      	nop
 8007778:	e00c      	b.n	8007794 <USBH_Process+0x3cc>
      break;
 800777a:	bf00      	nop
 800777c:	e00a      	b.n	8007794 <USBH_Process+0x3cc>
    break;
 800777e:	bf00      	nop
 8007780:	e008      	b.n	8007794 <USBH_Process+0x3cc>
      break;
 8007782:	bf00      	nop
 8007784:	e006      	b.n	8007794 <USBH_Process+0x3cc>
      break;
 8007786:	bf00      	nop
 8007788:	e004      	b.n	8007794 <USBH_Process+0x3cc>
      break;
 800778a:	bf00      	nop
 800778c:	e002      	b.n	8007794 <USBH_Process+0x3cc>
      break;
 800778e:	bf00      	nop
 8007790:	e000      	b.n	8007794 <USBH_Process+0x3cc>
      break;
 8007792:	bf00      	nop
  }
  return USBH_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop

080077a0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af04      	add	r7, sp, #16
 80077a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80077a8:	2301      	movs	r3, #1
 80077aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80077ac:	2301      	movs	r3, #1
 80077ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	785b      	ldrb	r3, [r3, #1]
 80077b4:	2b07      	cmp	r3, #7
 80077b6:	f200 81c1 	bhi.w	8007b3c <USBH_HandleEnum+0x39c>
 80077ba:	a201      	add	r2, pc, #4	; (adr r2, 80077c0 <USBH_HandleEnum+0x20>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	080077e1 	.word	0x080077e1
 80077c4:	0800789f 	.word	0x0800789f
 80077c8:	08007909 	.word	0x08007909
 80077cc:	08007997 	.word	0x08007997
 80077d0:	08007a01 	.word	0x08007a01
 80077d4:	08007a71 	.word	0x08007a71
 80077d8:	08007ab7 	.word	0x08007ab7
 80077dc:	08007afd 	.word	0x08007afd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80077e0:	2108      	movs	r1, #8
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fa50 	bl	8007c88 <USBH_Get_DevDesc>
 80077e8:	4603      	mov	r3, r0
 80077ea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077ec:	7bbb      	ldrb	r3, [r7, #14]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d130      	bne.n	8007854 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	7919      	ldrb	r1, [r3, #4]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007816:	b292      	uxth	r2, r2
 8007818:	9202      	str	r2, [sp, #8]
 800781a:	2200      	movs	r2, #0
 800781c:	9201      	str	r2, [sp, #4]
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	4603      	mov	r3, r0
 8007822:	2280      	movs	r2, #128	; 0x80
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f001 f867 	bl	80088f8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	7959      	ldrb	r1, [r3, #5]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800783e:	b292      	uxth	r2, r2
 8007840:	9202      	str	r2, [sp, #8]
 8007842:	2200      	movs	r2, #0
 8007844:	9201      	str	r2, [sp, #4]
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	4603      	mov	r3, r0
 800784a:	2200      	movs	r2, #0
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 f853 	bl	80088f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007852:	e175      	b.n	8007b40 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	2b03      	cmp	r3, #3
 8007858:	f040 8172 	bne.w	8007b40 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007862:	3301      	adds	r3, #1
 8007864:	b2da      	uxtb	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007872:	2b03      	cmp	r3, #3
 8007874:	d903      	bls.n	800787e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	220d      	movs	r2, #13
 800787a:	701a      	strb	r2, [r3, #0]
      break;
 800787c:	e160      	b.n	8007b40 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	795b      	ldrb	r3, [r3, #5]
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f001 f887 	bl	8008998 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	791b      	ldrb	r3, [r3, #4]
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 f881 	bl	8008998 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	701a      	strb	r2, [r3, #0]
      break;
 800789c:	e150      	b.n	8007b40 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800789e:	2112      	movs	r1, #18
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f9f1 	bl	8007c88 <USBH_Get_DevDesc>
 80078a6:	4603      	mov	r3, r0
 80078a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078aa:	7bbb      	ldrb	r3, [r7, #14]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d103      	bne.n	80078b8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80078b6:	e145      	b.n	8007b44 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078b8:	7bbb      	ldrb	r3, [r7, #14]
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	f040 8142 	bne.w	8007b44 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078c6:	3301      	adds	r3, #1
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d903      	bls.n	80078e2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	220d      	movs	r2, #13
 80078de:	701a      	strb	r2, [r3, #0]
      break;
 80078e0:	e130      	b.n	8007b44 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	795b      	ldrb	r3, [r3, #5]
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 f855 	bl	8008998 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	791b      	ldrb	r3, [r3, #4]
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f001 f84f 	bl	8008998 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	701a      	strb	r2, [r3, #0]
      break;
 8007906:	e11d      	b.n	8007b44 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007908:	2101      	movs	r1, #1
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fa68 	bl	8007de0 <USBH_SetAddress>
 8007910:	4603      	mov	r3, r0
 8007912:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007914:	7bbb      	ldrb	r3, [r7, #14]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d132      	bne.n	8007980 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800791a:	2002      	movs	r0, #2
 800791c:	f001 fb32 	bl	8008f84 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2203      	movs	r2, #3
 800792c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	7919      	ldrb	r1, [r3, #4]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007942:	b292      	uxth	r2, r2
 8007944:	9202      	str	r2, [sp, #8]
 8007946:	2200      	movs	r2, #0
 8007948:	9201      	str	r2, [sp, #4]
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	4603      	mov	r3, r0
 800794e:	2280      	movs	r2, #128	; 0x80
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 ffd1 	bl	80088f8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	7959      	ldrb	r1, [r3, #5]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800796a:	b292      	uxth	r2, r2
 800796c:	9202      	str	r2, [sp, #8]
 800796e:	2200      	movs	r2, #0
 8007970:	9201      	str	r2, [sp, #4]
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	4603      	mov	r3, r0
 8007976:	2200      	movs	r2, #0
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 ffbd 	bl	80088f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800797e:	e0e3      	b.n	8007b48 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007980:	7bbb      	ldrb	r3, [r7, #14]
 8007982:	2b03      	cmp	r3, #3
 8007984:	f040 80e0 	bne.w	8007b48 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	220d      	movs	r2, #13
 800798c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	705a      	strb	r2, [r3, #1]
      break;
 8007994:	e0d8      	b.n	8007b48 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007996:	2109      	movs	r1, #9
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f99d 	bl	8007cd8 <USBH_Get_CfgDesc>
 800799e:	4603      	mov	r3, r0
 80079a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d103      	bne.n	80079b0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2204      	movs	r2, #4
 80079ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80079ae:	e0cd      	b.n	8007b4c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079b0:	7bbb      	ldrb	r3, [r7, #14]
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	f040 80ca 	bne.w	8007b4c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079be:	3301      	adds	r3, #1
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079ce:	2b03      	cmp	r3, #3
 80079d0:	d903      	bls.n	80079da <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	220d      	movs	r2, #13
 80079d6:	701a      	strb	r2, [r3, #0]
      break;
 80079d8:	e0b8      	b.n	8007b4c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	795b      	ldrb	r3, [r3, #5]
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 ffd9 	bl	8008998 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	791b      	ldrb	r3, [r3, #4]
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 ffd3 	bl	8008998 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	701a      	strb	r2, [r3, #0]
      break;
 80079fe:	e0a5      	b.n	8007b4c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f965 	bl	8007cd8 <USBH_Get_CfgDesc>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a12:	7bbb      	ldrb	r3, [r7, #14]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d103      	bne.n	8007a20 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2205      	movs	r2, #5
 8007a1c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a1e:	e097      	b.n	8007b50 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	f040 8094 	bne.w	8007b50 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a2e:	3301      	adds	r3, #1
 8007a30:	b2da      	uxtb	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d903      	bls.n	8007a4a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	220d      	movs	r2, #13
 8007a46:	701a      	strb	r2, [r3, #0]
      break;
 8007a48:	e082      	b.n	8007b50 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	795b      	ldrb	r3, [r3, #5]
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 ffa1 	bl	8008998 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	791b      	ldrb	r3, [r3, #4]
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 ff9b 	bl	8008998 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	701a      	strb	r2, [r3, #0]
      break;
 8007a6e:	e06f      	b.n	8007b50 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d019      	beq.n	8007aae <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007a86:	23ff      	movs	r3, #255	; 0xff
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f949 	bl	8007d20 <USBH_Get_StringDesc>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a92:	7bbb      	ldrb	r3, [r7, #14]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d103      	bne.n	8007aa0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2206      	movs	r2, #6
 8007a9c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007a9e:	e059      	b.n	8007b54 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d156      	bne.n	8007b54 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2206      	movs	r2, #6
 8007aaa:	705a      	strb	r2, [r3, #1]
      break;
 8007aac:	e052      	b.n	8007b54 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2206      	movs	r2, #6
 8007ab2:	705a      	strb	r2, [r3, #1]
      break;
 8007ab4:	e04e      	b.n	8007b54 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d019      	beq.n	8007af4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007acc:	23ff      	movs	r3, #255	; 0xff
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f926 	bl	8007d20 <USBH_Get_StringDesc>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d103      	bne.n	8007ae6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2207      	movs	r2, #7
 8007ae2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ae4:	e038      	b.n	8007b58 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
 8007ae8:	2b03      	cmp	r3, #3
 8007aea:	d135      	bne.n	8007b58 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2207      	movs	r2, #7
 8007af0:	705a      	strb	r2, [r3, #1]
      break;
 8007af2:	e031      	b.n	8007b58 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2207      	movs	r2, #7
 8007af8:	705a      	strb	r2, [r3, #1]
      break;
 8007afa:	e02d      	b.n	8007b58 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d017      	beq.n	8007b36 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b12:	23ff      	movs	r3, #255	; 0xff
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f903 	bl	8007d20 <USBH_Get_StringDesc>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d102      	bne.n	8007b2a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007b28:	e018      	b.n	8007b5c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	2b03      	cmp	r3, #3
 8007b2e:	d115      	bne.n	8007b5c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	73fb      	strb	r3, [r7, #15]
      break;
 8007b34:	e012      	b.n	8007b5c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	73fb      	strb	r3, [r7, #15]
      break;
 8007b3a:	e00f      	b.n	8007b5c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007b3c:	bf00      	nop
 8007b3e:	e00e      	b.n	8007b5e <USBH_HandleEnum+0x3be>
      break;
 8007b40:	bf00      	nop
 8007b42:	e00c      	b.n	8007b5e <USBH_HandleEnum+0x3be>
      break;
 8007b44:	bf00      	nop
 8007b46:	e00a      	b.n	8007b5e <USBH_HandleEnum+0x3be>
      break;
 8007b48:	bf00      	nop
 8007b4a:	e008      	b.n	8007b5e <USBH_HandleEnum+0x3be>
      break;
 8007b4c:	bf00      	nop
 8007b4e:	e006      	b.n	8007b5e <USBH_HandleEnum+0x3be>
      break;
 8007b50:	bf00      	nop
 8007b52:	e004      	b.n	8007b5e <USBH_HandleEnum+0x3be>
      break;
 8007b54:	bf00      	nop
 8007b56:	e002      	b.n	8007b5e <USBH_HandleEnum+0x3be>
      break;
 8007b58:	bf00      	nop
 8007b5a:	e000      	b.n	8007b5e <USBH_HandleEnum+0x3be>
      break;
 8007b5c:	bf00      	nop
  }
  return Status;
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007b7a:	bf00      	nop
 8007b7c:	370c      	adds	r7, #12
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b082      	sub	sp, #8
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b94:	1c5a      	adds	r2, r3, #1
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f804 	bl	8007baa <USBH_HandleSof>
}
 8007ba2:	bf00      	nop
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b082      	sub	sp, #8
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b0b      	cmp	r3, #11
 8007bba:	d10a      	bne.n	8007bd2 <USBH_HandleSof+0x28>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d005      	beq.n	8007bd2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	4798      	blx	r3
  }
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b083      	sub	sp, #12
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007bea:	bf00      	nop
}
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007c06:	bf00      	nop
}
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007c12:	b480      	push	{r7}
 8007c14:	b083      	sub	sp, #12
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f001 f846 	bl	8008cf2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	791b      	ldrb	r3, [r3, #4]
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fe93 	bl	8008998 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	795b      	ldrb	r3, [r3, #5]
 8007c76:	4619      	mov	r1, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fe8d 	bl	8008998 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af02      	add	r7, sp, #8
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007c9a:	78fb      	ldrb	r3, [r7, #3]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f864 	bl	8007d76 <USBH_GetDescriptor>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10a      	bne.n	8007cce <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007cc4:	78fa      	ldrb	r2, [r7, #3]
 8007cc6:	b292      	uxth	r2, r2
 8007cc8:	4619      	mov	r1, r3
 8007cca:	f000 f919 	bl	8007f00 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af02      	add	r7, sp, #8
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	331c      	adds	r3, #28
 8007ce8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007cea:	887b      	ldrh	r3, [r7, #2]
 8007cec:	9300      	str	r3, [sp, #0]
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f83d 	bl	8007d76 <USBH_GetDescriptor>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d107      	bne.n	8007d16 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007d06:	887b      	ldrh	r3, [r7, #2]
 8007d08:	461a      	mov	r2, r3
 8007d0a:	68b9      	ldr	r1, [r7, #8]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f989 	bl	8008024 <USBH_ParseCfgDesc>
 8007d12:	4603      	mov	r3, r0
 8007d14:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b088      	sub	sp, #32
 8007d24:	af02      	add	r7, sp, #8
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	607a      	str	r2, [r7, #4]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	72fb      	strb	r3, [r7, #11]
 8007d30:	4613      	mov	r3, r2
 8007d32:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007d34:	7afb      	ldrb	r3, [r7, #11]
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007d3c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007d44:	893b      	ldrh	r3, [r7, #8]
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f000 f812 	bl	8007d76 <USBH_GetDescriptor>
 8007d52:	4603      	mov	r3, r0
 8007d54:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007d56:	7dfb      	ldrb	r3, [r7, #23]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d107      	bne.n	8007d6c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d62:	893a      	ldrh	r2, [r7, #8]
 8007d64:	6879      	ldr	r1, [r7, #4]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 fb26 	bl	80083b8 <USBH_ParseStringDesc>
  }

  return status;
 8007d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3718      	adds	r7, #24
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b084      	sub	sp, #16
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	60f8      	str	r0, [r7, #12]
 8007d7e:	607b      	str	r3, [r7, #4]
 8007d80:	460b      	mov	r3, r1
 8007d82:	72fb      	strb	r3, [r7, #11]
 8007d84:	4613      	mov	r3, r2
 8007d86:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	789b      	ldrb	r3, [r3, #2]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d11c      	bne.n	8007dca <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007d90:	7afb      	ldrb	r3, [r7, #11]
 8007d92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d96:	b2da      	uxtb	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2206      	movs	r2, #6
 8007da0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	893a      	ldrh	r2, [r7, #8]
 8007da6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007da8:	893b      	ldrh	r3, [r7, #8]
 8007daa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007db2:	d104      	bne.n	8007dbe <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f240 4209 	movw	r2, #1033	; 0x409
 8007dba:	829a      	strh	r2, [r3, #20]
 8007dbc:	e002      	b.n	8007dc4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	8b3a      	ldrh	r2, [r7, #24]
 8007dc8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007dca:	8b3b      	ldrh	r3, [r7, #24]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	6879      	ldr	r1, [r7, #4]
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 fb3f 	bl	8008454 <USBH_CtlReq>
 8007dd6:	4603      	mov	r3, r0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	789b      	ldrb	r3, [r3, #2]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d10f      	bne.n	8007e14 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2205      	movs	r2, #5
 8007dfe:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007e00:	78fb      	ldrb	r3, [r7, #3]
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e14:	2200      	movs	r2, #0
 8007e16:	2100      	movs	r1, #0
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fb1b 	bl	8008454 <USBH_CtlReq>
 8007e1e:	4603      	mov	r3, r0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	460b      	mov	r3, r1
 8007e32:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	789b      	ldrb	r3, [r3, #2]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d10e      	bne.n	8007e5a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2209      	movs	r2, #9
 8007e46:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	887a      	ldrh	r2, [r7, #2]
 8007e4c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 faf8 	bl	8008454 <USBH_CtlReq>
 8007e64:	4603      	mov	r3, r0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b082      	sub	sp, #8
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	460b      	mov	r3, r1
 8007e78:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	789b      	ldrb	r3, [r3, #2]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d10f      	bne.n	8007ea2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2203      	movs	r2, #3
 8007e8c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007e8e:	78fb      	ldrb	r3, [r7, #3]
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fad4 	bl	8008454 <USBH_CtlReq>
 8007eac:	4603      	mov	r3, r0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b082      	sub	sp, #8
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	789b      	ldrb	r3, [r3, #2]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d10f      	bne.n	8007eea <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2202      	movs	r2, #2
 8007ece:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007edc:	78fb      	ldrb	r3, [r7, #3]
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007eea:	2200      	movs	r2, #0
 8007eec:	2100      	movs	r1, #0
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fab0 	bl	8008454 <USBH_CtlReq>
 8007ef4:	4603      	mov	r3, r0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
	...

08007f00 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	781a      	ldrb	r2, [r3, #0]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	785a      	ldrb	r2, [r3, #1]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	3302      	adds	r3, #2
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	3303      	adds	r3, #3
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	021b      	lsls	r3, r3, #8
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	4313      	orrs	r3, r2
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	791a      	ldrb	r2, [r3, #4]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	795a      	ldrb	r2, [r3, #5]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	799a      	ldrb	r2, [r3, #6]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	79da      	ldrb	r2, [r3, #7]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	79db      	ldrb	r3, [r3, #7]
 8007f5e:	2b20      	cmp	r3, #32
 8007f60:	dc0f      	bgt.n	8007f82 <USBH_ParseDevDesc+0x82>
 8007f62:	2b08      	cmp	r3, #8
 8007f64:	db14      	blt.n	8007f90 <USBH_ParseDevDesc+0x90>
 8007f66:	3b08      	subs	r3, #8
 8007f68:	4a2d      	ldr	r2, [pc, #180]	; (8008020 <USBH_ParseDevDesc+0x120>)
 8007f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	bf14      	ite	ne
 8007f76:	2301      	movne	r3, #1
 8007f78:	2300      	moveq	r3, #0
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d102      	bne.n	8007f86 <USBH_ParseDevDesc+0x86>
 8007f80:	e006      	b.n	8007f90 <USBH_ParseDevDesc+0x90>
 8007f82:	2b40      	cmp	r3, #64	; 0x40
 8007f84:	d104      	bne.n	8007f90 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	79da      	ldrb	r2, [r3, #7]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	71da      	strb	r2, [r3, #7]
      break;
 8007f8e:	e003      	b.n	8007f98 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2240      	movs	r2, #64	; 0x40
 8007f94:	71da      	strb	r2, [r3, #7]
      break;
 8007f96:	bf00      	nop
  }

  if (length > 8U)
 8007f98:	88fb      	ldrh	r3, [r7, #6]
 8007f9a:	2b08      	cmp	r3, #8
 8007f9c:	d939      	bls.n	8008012 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	3309      	adds	r3, #9
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	021b      	lsls	r3, r3, #8
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	330a      	adds	r3, #10
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	330b      	adds	r3, #11
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	021b      	lsls	r3, r3, #8
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	330c      	adds	r3, #12
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	330d      	adds	r3, #13
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	021b      	lsls	r3, r3, #8
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	4313      	orrs	r3, r2
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	7b9a      	ldrb	r2, [r3, #14]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	7bda      	ldrb	r2, [r3, #15]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	7c1a      	ldrb	r2, [r3, #16]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	7c5a      	ldrb	r2, [r3, #17]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	745a      	strb	r2, [r3, #17]
  }
}
 8008012:	bf00      	nop
 8008014:	3714      	adds	r7, #20
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	01000101 	.word	0x01000101

08008024 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b08c      	sub	sp, #48	; 0x30
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	4613      	mov	r3, r2
 8008030:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008038:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008044:	2300      	movs	r3, #0
 8008046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	781a      	ldrb	r2, [r3, #0]
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	785a      	ldrb	r2, [r3, #1]
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	3302      	adds	r3, #2
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	b29a      	uxth	r2, r3
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	3303      	adds	r3, #3
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	b29b      	uxth	r3, r3
 8008074:	021b      	lsls	r3, r3, #8
 8008076:	b29b      	uxth	r3, r3
 8008078:	4313      	orrs	r3, r2
 800807a:	b29b      	uxth	r3, r3
 800807c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008080:	bf28      	it	cs
 8008082:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008086:	b29a      	uxth	r2, r3
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	791a      	ldrb	r2, [r3, #4]
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	795a      	ldrb	r2, [r3, #5]
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	799a      	ldrb	r2, [r3, #6]
 80080a0:	6a3b      	ldr	r3, [r7, #32]
 80080a2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	79da      	ldrb	r2, [r3, #7]
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	7a1a      	ldrb	r2, [r3, #8]
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80080b4:	6a3b      	ldr	r3, [r7, #32]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b09      	cmp	r3, #9
 80080ba:	d002      	beq.n	80080c2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80080bc:	6a3b      	ldr	r3, [r7, #32]
 80080be:	2209      	movs	r2, #9
 80080c0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80080c2:	88fb      	ldrh	r3, [r7, #6]
 80080c4:	2b09      	cmp	r3, #9
 80080c6:	f240 809d 	bls.w	8008204 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80080ca:	2309      	movs	r3, #9
 80080cc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80080ce:	2300      	movs	r3, #0
 80080d0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80080d2:	e081      	b.n	80081d8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80080d4:	f107 0316 	add.w	r3, r7, #22
 80080d8:	4619      	mov	r1, r3
 80080da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080dc:	f000 f99f 	bl	800841e <USBH_GetNextDesc>
 80080e0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80080e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e4:	785b      	ldrb	r3, [r3, #1]
 80080e6:	2b04      	cmp	r3, #4
 80080e8:	d176      	bne.n	80081d8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80080ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	2b09      	cmp	r3, #9
 80080f0:	d002      	beq.n	80080f8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80080f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f4:	2209      	movs	r2, #9
 80080f6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80080f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080fc:	221a      	movs	r2, #26
 80080fe:	fb02 f303 	mul.w	r3, r2, r3
 8008102:	3308      	adds	r3, #8
 8008104:	6a3a      	ldr	r2, [r7, #32]
 8008106:	4413      	add	r3, r2
 8008108:	3302      	adds	r3, #2
 800810a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800810c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800810e:	69f8      	ldr	r0, [r7, #28]
 8008110:	f000 f87e 	bl	8008210 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008114:	2300      	movs	r3, #0
 8008116:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800811a:	2300      	movs	r3, #0
 800811c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800811e:	e043      	b.n	80081a8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008120:	f107 0316 	add.w	r3, r7, #22
 8008124:	4619      	mov	r1, r3
 8008126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008128:	f000 f979 	bl	800841e <USBH_GetNextDesc>
 800812c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800812e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008130:	785b      	ldrb	r3, [r3, #1]
 8008132:	2b05      	cmp	r3, #5
 8008134:	d138      	bne.n	80081a8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	795b      	ldrb	r3, [r3, #5]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d10f      	bne.n	800815e <USBH_ParseCfgDesc+0x13a>
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	799b      	ldrb	r3, [r3, #6]
 8008142:	2b02      	cmp	r3, #2
 8008144:	d10b      	bne.n	800815e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	79db      	ldrb	r3, [r3, #7]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10f      	bne.n	800816e <USBH_ParseCfgDesc+0x14a>
 800814e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	2b09      	cmp	r3, #9
 8008154:	d00b      	beq.n	800816e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008158:	2209      	movs	r2, #9
 800815a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800815c:	e007      	b.n	800816e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800815e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	2b07      	cmp	r3, #7
 8008164:	d004      	beq.n	8008170 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008168:	2207      	movs	r2, #7
 800816a:	701a      	strb	r2, [r3, #0]
 800816c:	e000      	b.n	8008170 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800816e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008174:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008178:	3201      	adds	r2, #1
 800817a:	00d2      	lsls	r2, r2, #3
 800817c:	211a      	movs	r1, #26
 800817e:	fb01 f303 	mul.w	r3, r1, r3
 8008182:	4413      	add	r3, r2
 8008184:	3308      	adds	r3, #8
 8008186:	6a3a      	ldr	r2, [r7, #32]
 8008188:	4413      	add	r3, r2
 800818a:	3304      	adds	r3, #4
 800818c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800818e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008190:	69b9      	ldr	r1, [r7, #24]
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 f86b 	bl	800826e <USBH_ParseEPDesc>
 8008198:	4603      	mov	r3, r0
 800819a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800819e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80081a2:	3301      	adds	r3, #1
 80081a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	791b      	ldrb	r3, [r3, #4]
 80081ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d204      	bcs.n	80081be <USBH_ParseCfgDesc+0x19a>
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	885a      	ldrh	r2, [r3, #2]
 80081b8:	8afb      	ldrh	r3, [r7, #22]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d8b0      	bhi.n	8008120 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	791b      	ldrb	r3, [r3, #4]
 80081c2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d201      	bcs.n	80081ce <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e01c      	b.n	8008208 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80081ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081d2:	3301      	adds	r3, #1
 80081d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80081d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d805      	bhi.n	80081ec <USBH_ParseCfgDesc+0x1c8>
 80081e0:	6a3b      	ldr	r3, [r7, #32]
 80081e2:	885a      	ldrh	r2, [r3, #2]
 80081e4:	8afb      	ldrh	r3, [r7, #22]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	f63f af74 	bhi.w	80080d4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80081ec:	6a3b      	ldr	r3, [r7, #32]
 80081ee:	791b      	ldrb	r3, [r3, #4]
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	bf28      	it	cs
 80081f4:	2302      	movcs	r3, #2
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d201      	bcs.n	8008204 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008200:	2303      	movs	r3, #3
 8008202:	e001      	b.n	8008208 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008204:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008208:	4618      	mov	r0, r3
 800820a:	3730      	adds	r7, #48	; 0x30
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	781a      	ldrb	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	785a      	ldrb	r2, [r3, #1]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	789a      	ldrb	r2, [r3, #2]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	78da      	ldrb	r2, [r3, #3]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	791a      	ldrb	r2, [r3, #4]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	795a      	ldrb	r2, [r3, #5]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	799a      	ldrb	r2, [r3, #6]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	79da      	ldrb	r2, [r3, #7]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	7a1a      	ldrb	r2, [r3, #8]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	721a      	strb	r2, [r3, #8]
}
 8008262:	bf00      	nop
 8008264:	370c      	adds	r7, #12
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800826e:	b480      	push	{r7}
 8008270:	b087      	sub	sp, #28
 8008272:	af00      	add	r7, sp, #0
 8008274:	60f8      	str	r0, [r7, #12]
 8008276:	60b9      	str	r1, [r7, #8]
 8008278:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	781a      	ldrb	r2, [r3, #0]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	785a      	ldrb	r2, [r3, #1]
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	789a      	ldrb	r2, [r3, #2]
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	78da      	ldrb	r2, [r3, #3]
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	3304      	adds	r3, #4
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3305      	adds	r3, #5
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	021b      	lsls	r3, r3, #8
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	4313      	orrs	r3, r2
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	799a      	ldrb	r2, [r3, #6]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	889b      	ldrh	r3, [r3, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d102      	bne.n	80082d0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80082ca:	2303      	movs	r3, #3
 80082cc:	75fb      	strb	r3, [r7, #23]
 80082ce:	e033      	b.n	8008338 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	889b      	ldrh	r3, [r3, #4]
 80082d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80082d8:	f023 0307 	bic.w	r3, r3, #7
 80082dc:	b29a      	uxth	r2, r3
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	889b      	ldrh	r3, [r3, #4]
 80082e6:	b21a      	sxth	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	3304      	adds	r3, #4
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	b299      	uxth	r1, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3305      	adds	r3, #5
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	021b      	lsls	r3, r3, #8
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	430b      	orrs	r3, r1
 80082fe:	b29b      	uxth	r3, r3
 8008300:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008304:	2b00      	cmp	r3, #0
 8008306:	d110      	bne.n	800832a <USBH_ParseEPDesc+0xbc>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	3304      	adds	r3, #4
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	b299      	uxth	r1, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	3305      	adds	r3, #5
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	b29b      	uxth	r3, r3
 8008318:	021b      	lsls	r3, r3, #8
 800831a:	b29b      	uxth	r3, r3
 800831c:	430b      	orrs	r3, r1
 800831e:	b29b      	uxth	r3, r3
 8008320:	b21b      	sxth	r3, r3
 8008322:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008326:	b21b      	sxth	r3, r3
 8008328:	e001      	b.n	800832e <USBH_ParseEPDesc+0xc0>
 800832a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800832e:	4313      	orrs	r3, r2
 8008330:	b21b      	sxth	r3, r3
 8008332:	b29a      	uxth	r2, r3
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800833e:	2b00      	cmp	r3, #0
 8008340:	d116      	bne.n	8008370 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	78db      	ldrb	r3, [r3, #3]
 8008346:	f003 0303 	and.w	r3, r3, #3
 800834a:	2b01      	cmp	r3, #1
 800834c:	d005      	beq.n	800835a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	78db      	ldrb	r3, [r3, #3]
 8008352:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008356:	2b03      	cmp	r3, #3
 8008358:	d127      	bne.n	80083aa <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	799b      	ldrb	r3, [r3, #6]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <USBH_ParseEPDesc+0xfc>
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	799b      	ldrb	r3, [r3, #6]
 8008366:	2b10      	cmp	r3, #16
 8008368:	d91f      	bls.n	80083aa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800836a:	2303      	movs	r3, #3
 800836c:	75fb      	strb	r3, [r7, #23]
 800836e:	e01c      	b.n	80083aa <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	78db      	ldrb	r3, [r3, #3]
 8008374:	f003 0303 	and.w	r3, r3, #3
 8008378:	2b01      	cmp	r3, #1
 800837a:	d10a      	bne.n	8008392 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	799b      	ldrb	r3, [r3, #6]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d003      	beq.n	800838c <USBH_ParseEPDesc+0x11e>
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	799b      	ldrb	r3, [r3, #6]
 8008388:	2b10      	cmp	r3, #16
 800838a:	d90e      	bls.n	80083aa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800838c:	2303      	movs	r3, #3
 800838e:	75fb      	strb	r3, [r7, #23]
 8008390:	e00b      	b.n	80083aa <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	78db      	ldrb	r3, [r3, #3]
 8008396:	f003 0303 	and.w	r3, r3, #3
 800839a:	2b03      	cmp	r3, #3
 800839c:	d105      	bne.n	80083aa <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	799b      	ldrb	r3, [r3, #6]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d101      	bne.n	80083aa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80083a6:	2303      	movs	r3, #3
 80083a8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	371c      	adds	r7, #28
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	4613      	mov	r3, r2
 80083c4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	3301      	adds	r3, #1
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d120      	bne.n	8008412 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	1e9a      	subs	r2, r3, #2
 80083d6:	88fb      	ldrh	r3, [r7, #6]
 80083d8:	4293      	cmp	r3, r2
 80083da:	bf28      	it	cs
 80083dc:	4613      	movcs	r3, r2
 80083de:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	3302      	adds	r3, #2
 80083e4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80083e6:	2300      	movs	r3, #0
 80083e8:	82fb      	strh	r3, [r7, #22]
 80083ea:	e00b      	b.n	8008404 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80083ec:	8afb      	ldrh	r3, [r7, #22]
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	4413      	add	r3, r2
 80083f2:	781a      	ldrb	r2, [r3, #0]
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	3301      	adds	r3, #1
 80083fc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80083fe:	8afb      	ldrh	r3, [r7, #22]
 8008400:	3302      	adds	r3, #2
 8008402:	82fb      	strh	r3, [r7, #22]
 8008404:	8afa      	ldrh	r2, [r7, #22]
 8008406:	8abb      	ldrh	r3, [r7, #20]
 8008408:	429a      	cmp	r2, r3
 800840a:	d3ef      	bcc.n	80083ec <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	2200      	movs	r2, #0
 8008410:	701a      	strb	r2, [r3, #0]
  }
}
 8008412:	bf00      	nop
 8008414:	371c      	adds	r7, #28
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800841e:	b480      	push	{r7}
 8008420:	b085      	sub	sp, #20
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	881a      	ldrh	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	b29b      	uxth	r3, r3
 8008432:	4413      	add	r3, r2
 8008434:	b29a      	uxth	r2, r3
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4413      	add	r3, r2
 8008444:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008446:	68fb      	ldr	r3, [r7, #12]
}
 8008448:	4618      	mov	r0, r3
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	4613      	mov	r3, r2
 8008460:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008462:	2301      	movs	r3, #1
 8008464:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	789b      	ldrb	r3, [r3, #2]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d002      	beq.n	8008474 <USBH_CtlReq+0x20>
 800846e:	2b02      	cmp	r3, #2
 8008470:	d00f      	beq.n	8008492 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008472:	e027      	b.n	80084c4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	88fa      	ldrh	r2, [r7, #6]
 800847e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2201      	movs	r2, #1
 8008484:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2202      	movs	r2, #2
 800848a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800848c:	2301      	movs	r3, #1
 800848e:	75fb      	strb	r3, [r7, #23]
      break;
 8008490:	e018      	b.n	80084c4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 f81c 	bl	80084d0 <USBH_HandleControl>
 8008498:	4603      	mov	r3, r0
 800849a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800849c:	7dfb      	ldrb	r3, [r7, #23]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <USBH_CtlReq+0x54>
 80084a2:	7dfb      	ldrb	r3, [r7, #23]
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d106      	bne.n	80084b6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2201      	movs	r2, #1
 80084ac:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	761a      	strb	r2, [r3, #24]
      break;
 80084b4:	e005      	b.n	80084c2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80084b6:	7dfb      	ldrb	r3, [r7, #23]
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d102      	bne.n	80084c2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2201      	movs	r2, #1
 80084c0:	709a      	strb	r2, [r3, #2]
      break;
 80084c2:	bf00      	nop
  }
  return status;
 80084c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3718      	adds	r7, #24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
	...

080084d0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af02      	add	r7, sp, #8
 80084d6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80084d8:	2301      	movs	r3, #1
 80084da:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80084dc:	2300      	movs	r3, #0
 80084de:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	7e1b      	ldrb	r3, [r3, #24]
 80084e4:	3b01      	subs	r3, #1
 80084e6:	2b0a      	cmp	r3, #10
 80084e8:	f200 8156 	bhi.w	8008798 <USBH_HandleControl+0x2c8>
 80084ec:	a201      	add	r2, pc, #4	; (adr r2, 80084f4 <USBH_HandleControl+0x24>)
 80084ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f2:	bf00      	nop
 80084f4:	08008521 	.word	0x08008521
 80084f8:	0800853b 	.word	0x0800853b
 80084fc:	080085a5 	.word	0x080085a5
 8008500:	080085cb 	.word	0x080085cb
 8008504:	08008603 	.word	0x08008603
 8008508:	0800862d 	.word	0x0800862d
 800850c:	0800867f 	.word	0x0800867f
 8008510:	080086a1 	.word	0x080086a1
 8008514:	080086dd 	.word	0x080086dd
 8008518:	08008703 	.word	0x08008703
 800851c:	08008741 	.word	0x08008741
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f103 0110 	add.w	r1, r3, #16
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	795b      	ldrb	r3, [r3, #5]
 800852a:	461a      	mov	r2, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f943 	bl	80087b8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2202      	movs	r2, #2
 8008536:	761a      	strb	r2, [r3, #24]
      break;
 8008538:	e139      	b.n	80087ae <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	795b      	ldrb	r3, [r3, #5]
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fcc5 	bl	8008ed0 <USBH_LL_GetURBState>
 8008546:	4603      	mov	r3, r0
 8008548:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800854a:	7bbb      	ldrb	r3, [r7, #14]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d11e      	bne.n	800858e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	7c1b      	ldrb	r3, [r3, #16]
 8008554:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008558:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	8adb      	ldrh	r3, [r3, #22]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00a      	beq.n	8008578 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008562:	7b7b      	ldrb	r3, [r7, #13]
 8008564:	2b80      	cmp	r3, #128	; 0x80
 8008566:	d103      	bne.n	8008570 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2203      	movs	r2, #3
 800856c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800856e:	e115      	b.n	800879c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2205      	movs	r2, #5
 8008574:	761a      	strb	r2, [r3, #24]
      break;
 8008576:	e111      	b.n	800879c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008578:	7b7b      	ldrb	r3, [r7, #13]
 800857a:	2b80      	cmp	r3, #128	; 0x80
 800857c:	d103      	bne.n	8008586 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2209      	movs	r2, #9
 8008582:	761a      	strb	r2, [r3, #24]
      break;
 8008584:	e10a      	b.n	800879c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2207      	movs	r2, #7
 800858a:	761a      	strb	r2, [r3, #24]
      break;
 800858c:	e106      	b.n	800879c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800858e:	7bbb      	ldrb	r3, [r7, #14]
 8008590:	2b04      	cmp	r3, #4
 8008592:	d003      	beq.n	800859c <USBH_HandleControl+0xcc>
 8008594:	7bbb      	ldrb	r3, [r7, #14]
 8008596:	2b02      	cmp	r3, #2
 8008598:	f040 8100 	bne.w	800879c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	220b      	movs	r2, #11
 80085a0:	761a      	strb	r2, [r3, #24]
      break;
 80085a2:	e0fb      	b.n	800879c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6899      	ldr	r1, [r3, #8]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	899a      	ldrh	r2, [r3, #12]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	791b      	ldrb	r3, [r3, #4]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f93a 	bl	8008836 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2204      	movs	r2, #4
 80085c6:	761a      	strb	r2, [r3, #24]
      break;
 80085c8:	e0f1      	b.n	80087ae <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	791b      	ldrb	r3, [r3, #4]
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 fc7d 	bl	8008ed0 <USBH_LL_GetURBState>
 80085d6:	4603      	mov	r3, r0
 80085d8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80085da:	7bbb      	ldrb	r3, [r7, #14]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d102      	bne.n	80085e6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2209      	movs	r2, #9
 80085e4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80085e6:	7bbb      	ldrb	r3, [r7, #14]
 80085e8:	2b05      	cmp	r3, #5
 80085ea:	d102      	bne.n	80085f2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80085ec:	2303      	movs	r3, #3
 80085ee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80085f0:	e0d6      	b.n	80087a0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
 80085f4:	2b04      	cmp	r3, #4
 80085f6:	f040 80d3 	bne.w	80087a0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	220b      	movs	r2, #11
 80085fe:	761a      	strb	r2, [r3, #24]
      break;
 8008600:	e0ce      	b.n	80087a0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6899      	ldr	r1, [r3, #8]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	899a      	ldrh	r2, [r3, #12]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	795b      	ldrb	r3, [r3, #5]
 800860e:	2001      	movs	r0, #1
 8008610:	9000      	str	r0, [sp, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f8ea 	bl	80087ec <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800861e:	b29a      	uxth	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2206      	movs	r2, #6
 8008628:	761a      	strb	r2, [r3, #24]
      break;
 800862a:	e0c0      	b.n	80087ae <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	795b      	ldrb	r3, [r3, #5]
 8008630:	4619      	mov	r1, r3
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fc4c 	bl	8008ed0 <USBH_LL_GetURBState>
 8008638:	4603      	mov	r3, r0
 800863a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d103      	bne.n	800864a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2207      	movs	r2, #7
 8008646:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008648:	e0ac      	b.n	80087a4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800864a:	7bbb      	ldrb	r3, [r7, #14]
 800864c:	2b05      	cmp	r3, #5
 800864e:	d105      	bne.n	800865c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	220c      	movs	r2, #12
 8008654:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008656:	2303      	movs	r3, #3
 8008658:	73fb      	strb	r3, [r7, #15]
      break;
 800865a:	e0a3      	b.n	80087a4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800865c:	7bbb      	ldrb	r3, [r7, #14]
 800865e:	2b02      	cmp	r3, #2
 8008660:	d103      	bne.n	800866a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2205      	movs	r2, #5
 8008666:	761a      	strb	r2, [r3, #24]
      break;
 8008668:	e09c      	b.n	80087a4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800866a:	7bbb      	ldrb	r3, [r7, #14]
 800866c:	2b04      	cmp	r3, #4
 800866e:	f040 8099 	bne.w	80087a4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	220b      	movs	r2, #11
 8008676:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008678:	2302      	movs	r3, #2
 800867a:	73fb      	strb	r3, [r7, #15]
      break;
 800867c:	e092      	b.n	80087a4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	791b      	ldrb	r3, [r3, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	2100      	movs	r1, #0
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f8d5 	bl	8008836 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008692:	b29a      	uxth	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2208      	movs	r2, #8
 800869c:	761a      	strb	r2, [r3, #24]

      break;
 800869e:	e086      	b.n	80087ae <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	791b      	ldrb	r3, [r3, #4]
 80086a4:	4619      	mov	r1, r3
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fc12 	bl	8008ed0 <USBH_LL_GetURBState>
 80086ac:	4603      	mov	r3, r0
 80086ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80086b0:	7bbb      	ldrb	r3, [r7, #14]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d105      	bne.n	80086c2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	220d      	movs	r2, #13
 80086ba:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80086c0:	e072      	b.n	80087a8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80086c2:	7bbb      	ldrb	r3, [r7, #14]
 80086c4:	2b04      	cmp	r3, #4
 80086c6:	d103      	bne.n	80086d0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	220b      	movs	r2, #11
 80086cc:	761a      	strb	r2, [r3, #24]
      break;
 80086ce:	e06b      	b.n	80087a8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80086d0:	7bbb      	ldrb	r3, [r7, #14]
 80086d2:	2b05      	cmp	r3, #5
 80086d4:	d168      	bne.n	80087a8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80086d6:	2303      	movs	r3, #3
 80086d8:	73fb      	strb	r3, [r7, #15]
      break;
 80086da:	e065      	b.n	80087a8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	795b      	ldrb	r3, [r3, #5]
 80086e0:	2201      	movs	r2, #1
 80086e2:	9200      	str	r2, [sp, #0]
 80086e4:	2200      	movs	r2, #0
 80086e6:	2100      	movs	r1, #0
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f87f 	bl	80087ec <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	220a      	movs	r2, #10
 80086fe:	761a      	strb	r2, [r3, #24]
      break;
 8008700:	e055      	b.n	80087ae <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	795b      	ldrb	r3, [r3, #5]
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fbe1 	bl	8008ed0 <USBH_LL_GetURBState>
 800870e:	4603      	mov	r3, r0
 8008710:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d105      	bne.n	8008724 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	220d      	movs	r2, #13
 8008720:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008722:	e043      	b.n	80087ac <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008724:	7bbb      	ldrb	r3, [r7, #14]
 8008726:	2b02      	cmp	r3, #2
 8008728:	d103      	bne.n	8008732 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2209      	movs	r2, #9
 800872e:	761a      	strb	r2, [r3, #24]
      break;
 8008730:	e03c      	b.n	80087ac <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	2b04      	cmp	r3, #4
 8008736:	d139      	bne.n	80087ac <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	220b      	movs	r2, #11
 800873c:	761a      	strb	r2, [r3, #24]
      break;
 800873e:	e035      	b.n	80087ac <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	7e5b      	ldrb	r3, [r3, #25]
 8008744:	3301      	adds	r3, #1
 8008746:	b2da      	uxtb	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	765a      	strb	r2, [r3, #25]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	7e5b      	ldrb	r3, [r3, #25]
 8008750:	2b02      	cmp	r3, #2
 8008752:	d806      	bhi.n	8008762 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008760:	e025      	b.n	80087ae <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008768:	2106      	movs	r1, #6
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	795b      	ldrb	r3, [r3, #5]
 8008778:	4619      	mov	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f90c 	bl	8008998 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	791b      	ldrb	r3, [r3, #4]
 8008784:	4619      	mov	r1, r3
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f906 	bl	8008998 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008792:	2302      	movs	r3, #2
 8008794:	73fb      	strb	r3, [r7, #15]
      break;
 8008796:	e00a      	b.n	80087ae <USBH_HandleControl+0x2de>

    default:
      break;
 8008798:	bf00      	nop
 800879a:	e008      	b.n	80087ae <USBH_HandleControl+0x2de>
      break;
 800879c:	bf00      	nop
 800879e:	e006      	b.n	80087ae <USBH_HandleControl+0x2de>
      break;
 80087a0:	bf00      	nop
 80087a2:	e004      	b.n	80087ae <USBH_HandleControl+0x2de>
      break;
 80087a4:	bf00      	nop
 80087a6:	e002      	b.n	80087ae <USBH_HandleControl+0x2de>
      break;
 80087a8:	bf00      	nop
 80087aa:	e000      	b.n	80087ae <USBH_HandleControl+0x2de>
      break;
 80087ac:	bf00      	nop
  }

  return status;
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b088      	sub	sp, #32
 80087bc:	af04      	add	r7, sp, #16
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	4613      	mov	r3, r2
 80087c4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80087c6:	79f9      	ldrb	r1, [r7, #7]
 80087c8:	2300      	movs	r3, #0
 80087ca:	9303      	str	r3, [sp, #12]
 80087cc:	2308      	movs	r3, #8
 80087ce:	9302      	str	r3, [sp, #8]
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	9301      	str	r3, [sp, #4]
 80087d4:	2300      	movs	r3, #0
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	2300      	movs	r3, #0
 80087da:	2200      	movs	r2, #0
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f000 fb46 	bl	8008e6e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b088      	sub	sp, #32
 80087f0:	af04      	add	r7, sp, #16
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	4611      	mov	r1, r2
 80087f8:	461a      	mov	r2, r3
 80087fa:	460b      	mov	r3, r1
 80087fc:	80fb      	strh	r3, [r7, #6]
 80087fe:	4613      	mov	r3, r2
 8008800:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800880c:	2300      	movs	r3, #0
 800880e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008810:	7979      	ldrb	r1, [r7, #5]
 8008812:	7e3b      	ldrb	r3, [r7, #24]
 8008814:	9303      	str	r3, [sp, #12]
 8008816:	88fb      	ldrh	r3, [r7, #6]
 8008818:	9302      	str	r3, [sp, #8]
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	9301      	str	r3, [sp, #4]
 800881e:	2301      	movs	r3, #1
 8008820:	9300      	str	r3, [sp, #0]
 8008822:	2300      	movs	r3, #0
 8008824:	2200      	movs	r2, #0
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f000 fb21 	bl	8008e6e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b088      	sub	sp, #32
 800883a:	af04      	add	r7, sp, #16
 800883c:	60f8      	str	r0, [r7, #12]
 800883e:	60b9      	str	r1, [r7, #8]
 8008840:	4611      	mov	r1, r2
 8008842:	461a      	mov	r2, r3
 8008844:	460b      	mov	r3, r1
 8008846:	80fb      	strh	r3, [r7, #6]
 8008848:	4613      	mov	r3, r2
 800884a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800884c:	7979      	ldrb	r1, [r7, #5]
 800884e:	2300      	movs	r3, #0
 8008850:	9303      	str	r3, [sp, #12]
 8008852:	88fb      	ldrh	r3, [r7, #6]
 8008854:	9302      	str	r3, [sp, #8]
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	9301      	str	r3, [sp, #4]
 800885a:	2301      	movs	r3, #1
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	2300      	movs	r3, #0
 8008860:	2201      	movs	r2, #1
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f000 fb03 	bl	8008e6e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008868:	2300      	movs	r3, #0

}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b088      	sub	sp, #32
 8008876:	af04      	add	r7, sp, #16
 8008878:	60f8      	str	r0, [r7, #12]
 800887a:	60b9      	str	r1, [r7, #8]
 800887c:	4611      	mov	r1, r2
 800887e:	461a      	mov	r2, r3
 8008880:	460b      	mov	r3, r1
 8008882:	80fb      	strh	r3, [r7, #6]
 8008884:	4613      	mov	r3, r2
 8008886:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008892:	2300      	movs	r3, #0
 8008894:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008896:	7979      	ldrb	r1, [r7, #5]
 8008898:	7e3b      	ldrb	r3, [r7, #24]
 800889a:	9303      	str	r3, [sp, #12]
 800889c:	88fb      	ldrh	r3, [r7, #6]
 800889e:	9302      	str	r3, [sp, #8]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	9301      	str	r3, [sp, #4]
 80088a4:	2301      	movs	r3, #1
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	2302      	movs	r3, #2
 80088aa:	2200      	movs	r2, #0
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f000 fade 	bl	8008e6e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b088      	sub	sp, #32
 80088c0:	af04      	add	r7, sp, #16
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	4611      	mov	r1, r2
 80088c8:	461a      	mov	r2, r3
 80088ca:	460b      	mov	r3, r1
 80088cc:	80fb      	strh	r3, [r7, #6]
 80088ce:	4613      	mov	r3, r2
 80088d0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088d2:	7979      	ldrb	r1, [r7, #5]
 80088d4:	2300      	movs	r3, #0
 80088d6:	9303      	str	r3, [sp, #12]
 80088d8:	88fb      	ldrh	r3, [r7, #6]
 80088da:	9302      	str	r3, [sp, #8]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	9301      	str	r3, [sp, #4]
 80088e0:	2301      	movs	r3, #1
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	2302      	movs	r3, #2
 80088e6:	2201      	movs	r2, #1
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 fac0 	bl	8008e6e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b086      	sub	sp, #24
 80088fc:	af04      	add	r7, sp, #16
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	4608      	mov	r0, r1
 8008902:	4611      	mov	r1, r2
 8008904:	461a      	mov	r2, r3
 8008906:	4603      	mov	r3, r0
 8008908:	70fb      	strb	r3, [r7, #3]
 800890a:	460b      	mov	r3, r1
 800890c:	70bb      	strb	r3, [r7, #2]
 800890e:	4613      	mov	r3, r2
 8008910:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008912:	7878      	ldrb	r0, [r7, #1]
 8008914:	78ba      	ldrb	r2, [r7, #2]
 8008916:	78f9      	ldrb	r1, [r7, #3]
 8008918:	8b3b      	ldrh	r3, [r7, #24]
 800891a:	9302      	str	r3, [sp, #8]
 800891c:	7d3b      	ldrb	r3, [r7, #20]
 800891e:	9301      	str	r3, [sp, #4]
 8008920:	7c3b      	ldrb	r3, [r7, #16]
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	4603      	mov	r3, r0
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fa53 	bl	8008dd2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b082      	sub	sp, #8
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	460b      	mov	r3, r1
 8008940:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008942:	78fb      	ldrb	r3, [r7, #3]
 8008944:	4619      	mov	r1, r3
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fa72 	bl	8008e30 <USBH_LL_ClosePipe>

  return USBH_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
 800895e:	460b      	mov	r3, r1
 8008960:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f836 	bl	80089d4 <USBH_GetFreePipe>
 8008968:	4603      	mov	r3, r0
 800896a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800896c:	89fb      	ldrh	r3, [r7, #14]
 800896e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008972:	4293      	cmp	r3, r2
 8008974:	d00a      	beq.n	800898c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008976:	78fa      	ldrb	r2, [r7, #3]
 8008978:	89fb      	ldrh	r3, [r7, #14]
 800897a:	f003 030f 	and.w	r3, r3, #15
 800897e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008982:	6879      	ldr	r1, [r7, #4]
 8008984:	33e0      	adds	r3, #224	; 0xe0
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	440b      	add	r3, r1
 800898a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800898c:	89fb      	ldrh	r3, [r7, #14]
 800898e:	b2db      	uxtb	r3, r3
}
 8008990:	4618      	mov	r0, r3
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	460b      	mov	r3, r1
 80089a2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80089a4:	78fb      	ldrb	r3, [r7, #3]
 80089a6:	2b0f      	cmp	r3, #15
 80089a8:	d80d      	bhi.n	80089c6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80089aa:	78fb      	ldrb	r3, [r7, #3]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	33e0      	adds	r3, #224	; 0xe0
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	685a      	ldr	r2, [r3, #4]
 80089b6:	78fb      	ldrb	r3, [r7, #3]
 80089b8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80089bc:	6879      	ldr	r1, [r7, #4]
 80089be:	33e0      	adds	r3, #224	; 0xe0
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	440b      	add	r3, r1
 80089c4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80089dc:	2300      	movs	r3, #0
 80089de:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80089e0:	2300      	movs	r3, #0
 80089e2:	73fb      	strb	r3, [r7, #15]
 80089e4:	e00f      	b.n	8008a06 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80089e6:	7bfb      	ldrb	r3, [r7, #15]
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	33e0      	adds	r3, #224	; 0xe0
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4413      	add	r3, r2
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d102      	bne.n	8008a00 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80089fa:	7bfb      	ldrb	r3, [r7, #15]
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	e007      	b.n	8008a10 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
 8008a02:	3301      	adds	r3, #1
 8008a04:	73fb      	strb	r3, [r7, #15]
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	2b0f      	cmp	r3, #15
 8008a0a:	d9ec      	bls.n	80089e6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008a0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3714      	adds	r7, #20
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008a20:	2201      	movs	r2, #1
 8008a22:	490e      	ldr	r1, [pc, #56]	; (8008a5c <MX_USB_HOST_Init+0x40>)
 8008a24:	480e      	ldr	r0, [pc, #56]	; (8008a60 <MX_USB_HOST_Init+0x44>)
 8008a26:	f7fe fba5 	bl	8007174 <USBH_Init>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d001      	beq.n	8008a34 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008a30:	f7f8 f980 	bl	8000d34 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008a34:	490b      	ldr	r1, [pc, #44]	; (8008a64 <MX_USB_HOST_Init+0x48>)
 8008a36:	480a      	ldr	r0, [pc, #40]	; (8008a60 <MX_USB_HOST_Init+0x44>)
 8008a38:	f7fe fc2a 	bl	8007290 <USBH_RegisterClass>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008a42:	f7f8 f977 	bl	8000d34 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008a46:	4806      	ldr	r0, [pc, #24]	; (8008a60 <MX_USB_HOST_Init+0x44>)
 8008a48:	f7fe fcae 	bl	80073a8 <USBH_Start>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d001      	beq.n	8008a56 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008a52:	f7f8 f96f 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008a56:	bf00      	nop
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	08008a7d 	.word	0x08008a7d
 8008a60:	200002d0 	.word	0x200002d0
 8008a64:	20000018 	.word	0x20000018

08008a68 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008a6c:	4802      	ldr	r0, [pc, #8]	; (8008a78 <MX_USB_HOST_Process+0x10>)
 8008a6e:	f7fe fcab 	bl	80073c8 <USBH_Process>
}
 8008a72:	bf00      	nop
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	200002d0 	.word	0x200002d0

08008a7c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	460b      	mov	r3, r1
 8008a86:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008a88:	78fb      	ldrb	r3, [r7, #3]
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	2b04      	cmp	r3, #4
 8008a8e:	d819      	bhi.n	8008ac4 <USBH_UserProcess+0x48>
 8008a90:	a201      	add	r2, pc, #4	; (adr r2, 8008a98 <USBH_UserProcess+0x1c>)
 8008a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a96:	bf00      	nop
 8008a98:	08008ac5 	.word	0x08008ac5
 8008a9c:	08008ab5 	.word	0x08008ab5
 8008aa0:	08008ac5 	.word	0x08008ac5
 8008aa4:	08008abd 	.word	0x08008abd
 8008aa8:	08008aad 	.word	0x08008aad
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008aac:	4b09      	ldr	r3, [pc, #36]	; (8008ad4 <USBH_UserProcess+0x58>)
 8008aae:	2203      	movs	r2, #3
 8008ab0:	701a      	strb	r2, [r3, #0]
  break;
 8008ab2:	e008      	b.n	8008ac6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008ab4:	4b07      	ldr	r3, [pc, #28]	; (8008ad4 <USBH_UserProcess+0x58>)
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	701a      	strb	r2, [r3, #0]
  break;
 8008aba:	e004      	b.n	8008ac6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008abc:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <USBH_UserProcess+0x58>)
 8008abe:	2201      	movs	r2, #1
 8008ac0:	701a      	strb	r2, [r3, #0]
  break;
 8008ac2:	e000      	b.n	8008ac6 <USBH_UserProcess+0x4a>

  default:
  break;
 8008ac4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008ac6:	bf00      	nop
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	200006a8 	.word	0x200006a8

08008ad8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b08a      	sub	sp, #40	; 0x28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ae0:	f107 0314 	add.w	r3, r7, #20
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	601a      	str	r2, [r3, #0]
 8008ae8:	605a      	str	r2, [r3, #4]
 8008aea:	609a      	str	r2, [r3, #8]
 8008aec:	60da      	str	r2, [r3, #12]
 8008aee:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008af8:	d147      	bne.n	8008b8a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008afa:	2300      	movs	r3, #0
 8008afc:	613b      	str	r3, [r7, #16]
 8008afe:	4b25      	ldr	r3, [pc, #148]	; (8008b94 <HAL_HCD_MspInit+0xbc>)
 8008b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b02:	4a24      	ldr	r2, [pc, #144]	; (8008b94 <HAL_HCD_MspInit+0xbc>)
 8008b04:	f043 0301 	orr.w	r3, r3, #1
 8008b08:	6313      	str	r3, [r2, #48]	; 0x30
 8008b0a:	4b22      	ldr	r3, [pc, #136]	; (8008b94 <HAL_HCD_MspInit+0xbc>)
 8008b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b0e:	f003 0301 	and.w	r3, r3, #1
 8008b12:	613b      	str	r3, [r7, #16]
 8008b14:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008b16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b20:	2300      	movs	r3, #0
 8008b22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008b24:	f107 0314 	add.w	r3, r7, #20
 8008b28:	4619      	mov	r1, r3
 8008b2a:	481b      	ldr	r0, [pc, #108]	; (8008b98 <HAL_HCD_MspInit+0xc0>)
 8008b2c:	f7f8 fd9a 	bl	8001664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008b30:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b36:	2302      	movs	r3, #2
 8008b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008b42:	230a      	movs	r3, #10
 8008b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b46:	f107 0314 	add.w	r3, r7, #20
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	4812      	ldr	r0, [pc, #72]	; (8008b98 <HAL_HCD_MspInit+0xc0>)
 8008b4e:	f7f8 fd89 	bl	8001664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008b52:	4b10      	ldr	r3, [pc, #64]	; (8008b94 <HAL_HCD_MspInit+0xbc>)
 8008b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b56:	4a0f      	ldr	r2, [pc, #60]	; (8008b94 <HAL_HCD_MspInit+0xbc>)
 8008b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b5c:	6353      	str	r3, [r2, #52]	; 0x34
 8008b5e:	2300      	movs	r3, #0
 8008b60:	60fb      	str	r3, [r7, #12]
 8008b62:	4b0c      	ldr	r3, [pc, #48]	; (8008b94 <HAL_HCD_MspInit+0xbc>)
 8008b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b66:	4a0b      	ldr	r2, [pc, #44]	; (8008b94 <HAL_HCD_MspInit+0xbc>)
 8008b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8008b6e:	4b09      	ldr	r3, [pc, #36]	; (8008b94 <HAL_HCD_MspInit+0xbc>)
 8008b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b76:	60fb      	str	r3, [r7, #12]
 8008b78:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	2100      	movs	r1, #0
 8008b7e:	2043      	movs	r0, #67	; 0x43
 8008b80:	f7f8 fd39 	bl	80015f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008b84:	2043      	movs	r0, #67	; 0x43
 8008b86:	f7f8 fd52 	bl	800162e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008b8a:	bf00      	nop
 8008b8c:	3728      	adds	r7, #40	; 0x28
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	40023800 	.word	0x40023800
 8008b98:	40020000 	.word	0x40020000

08008b9c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fe ffeb 	bl	8007b86 <USBH_LL_IncTimer>
}
 8008bb0:	bf00      	nop
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7ff f823 	bl	8007c12 <USBH_LL_Connect>
}
 8008bcc:	bf00      	nop
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7ff f82c 	bl	8007c40 <USBH_LL_Disconnect>
}
 8008be8:	bf00      	nop
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	70fb      	strb	r3, [r7, #3]
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fe ffdd 	bl	8007bda <USBH_LL_PortEnabled>
}
 8008c20:	bf00      	nop
 8008c22:	3708      	adds	r7, #8
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fe ffdd 	bl	8007bf6 <USBH_LL_PortDisabled>
}
 8008c3c:	bf00      	nop
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d12a      	bne.n	8008cac <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008c56:	4a18      	ldr	r2, [pc, #96]	; (8008cb8 <USBH_LL_Init+0x74>)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a15      	ldr	r2, [pc, #84]	; (8008cb8 <USBH_LL_Init+0x74>)
 8008c62:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c66:	4b14      	ldr	r3, [pc, #80]	; (8008cb8 <USBH_LL_Init+0x74>)
 8008c68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c6c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008c6e:	4b12      	ldr	r3, [pc, #72]	; (8008cb8 <USBH_LL_Init+0x74>)
 8008c70:	2208      	movs	r2, #8
 8008c72:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008c74:	4b10      	ldr	r3, [pc, #64]	; (8008cb8 <USBH_LL_Init+0x74>)
 8008c76:	2201      	movs	r2, #1
 8008c78:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c7a:	4b0f      	ldr	r3, [pc, #60]	; (8008cb8 <USBH_LL_Init+0x74>)
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008c80:	4b0d      	ldr	r3, [pc, #52]	; (8008cb8 <USBH_LL_Init+0x74>)
 8008c82:	2202      	movs	r2, #2
 8008c84:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c86:	4b0c      	ldr	r3, [pc, #48]	; (8008cb8 <USBH_LL_Init+0x74>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008c8c:	480a      	ldr	r0, [pc, #40]	; (8008cb8 <USBH_LL_Init+0x74>)
 8008c8e:	f7f8 fe86 	bl	800199e <HAL_HCD_Init>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d001      	beq.n	8008c9c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008c98:	f7f8 f84c 	bl	8000d34 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008c9c:	4806      	ldr	r0, [pc, #24]	; (8008cb8 <USBH_LL_Init+0x74>)
 8008c9e:	f7f9 fa6a 	bl	8002176 <HAL_HCD_GetCurrentFrame>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7fe ff5e 	bl	8007b68 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	200006ac 	.word	0x200006ac

08008cbc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7f9 f9d9 	bl	800208a <HAL_HCD_Start>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 f95c 	bl	8008f9c <USBH_Get_USB_Status>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ce8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b084      	sub	sp, #16
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7f9 f9e1 	bl	80020d0 <HAL_HCD_Stop>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d12:	7bfb      	ldrb	r3, [r7, #15]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 f941 	bl	8008f9c <USBH_Get_USB_Status>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008d30:	2301      	movs	r3, #1
 8008d32:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7f9 fa29 	bl	8002192 <HAL_HCD_GetCurrentSpeed>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d00c      	beq.n	8008d60 <USBH_LL_GetSpeed+0x38>
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d80d      	bhi.n	8008d66 <USBH_LL_GetSpeed+0x3e>
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d002      	beq.n	8008d54 <USBH_LL_GetSpeed+0x2c>
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d003      	beq.n	8008d5a <USBH_LL_GetSpeed+0x32>
 8008d52:	e008      	b.n	8008d66 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008d54:	2300      	movs	r3, #0
 8008d56:	73fb      	strb	r3, [r7, #15]
    break;
 8008d58:	e008      	b.n	8008d6c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d5e:	e005      	b.n	8008d6c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008d60:	2302      	movs	r3, #2
 8008d62:	73fb      	strb	r3, [r7, #15]
    break;
 8008d64:	e002      	b.n	8008d6c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008d66:	2301      	movs	r3, #1
 8008d68:	73fb      	strb	r3, [r7, #15]
    break;
 8008d6a:	bf00      	nop
  }
  return  speed;
 8008d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b084      	sub	sp, #16
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d82:	2300      	movs	r3, #0
 8008d84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7f9 f9bc 	bl	800210a <HAL_HCD_ResetPort>
 8008d92:	4603      	mov	r3, r0
 8008d94:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 f8ff 	bl	8008f9c <USBH_Get_USB_Status>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008da2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	460b      	mov	r3, r1
 8008db6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008dbe:	78fa      	ldrb	r2, [r7, #3]
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7f9 f9c3 	bl	800214e <HAL_HCD_HC_GetXferCount>
 8008dc8:	4603      	mov	r3, r0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008dd2:	b590      	push	{r4, r7, lr}
 8008dd4:	b089      	sub	sp, #36	; 0x24
 8008dd6:	af04      	add	r7, sp, #16
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	4608      	mov	r0, r1
 8008ddc:	4611      	mov	r1, r2
 8008dde:	461a      	mov	r2, r3
 8008de0:	4603      	mov	r3, r0
 8008de2:	70fb      	strb	r3, [r7, #3]
 8008de4:	460b      	mov	r3, r1
 8008de6:	70bb      	strb	r3, [r7, #2]
 8008de8:	4613      	mov	r3, r2
 8008dea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008dfa:	787c      	ldrb	r4, [r7, #1]
 8008dfc:	78ba      	ldrb	r2, [r7, #2]
 8008dfe:	78f9      	ldrb	r1, [r7, #3]
 8008e00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008e02:	9302      	str	r3, [sp, #8]
 8008e04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e08:	9301      	str	r3, [sp, #4]
 8008e0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e0e:	9300      	str	r3, [sp, #0]
 8008e10:	4623      	mov	r3, r4
 8008e12:	f7f8 fe26 	bl	8001a62 <HAL_HCD_HC_Init>
 8008e16:	4603      	mov	r3, r0
 8008e18:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f000 f8bd 	bl	8008f9c <USBH_Get_USB_Status>
 8008e22:	4603      	mov	r3, r0
 8008e24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e26:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd90      	pop	{r4, r7, pc}

08008e30 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	460b      	mov	r3, r1
 8008e3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e4a:	78fa      	ldrb	r2, [r7, #3]
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7f8 fe96 	bl	8001b80 <HAL_HCD_HC_Halt>
 8008e54:	4603      	mov	r3, r0
 8008e56:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 f89e 	bl	8008f9c <USBH_Get_USB_Status>
 8008e60:	4603      	mov	r3, r0
 8008e62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008e6e:	b590      	push	{r4, r7, lr}
 8008e70:	b089      	sub	sp, #36	; 0x24
 8008e72:	af04      	add	r7, sp, #16
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	4608      	mov	r0, r1
 8008e78:	4611      	mov	r1, r2
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	70fb      	strb	r3, [r7, #3]
 8008e80:	460b      	mov	r3, r1
 8008e82:	70bb      	strb	r3, [r7, #2]
 8008e84:	4613      	mov	r3, r2
 8008e86:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008e96:	787c      	ldrb	r4, [r7, #1]
 8008e98:	78ba      	ldrb	r2, [r7, #2]
 8008e9a:	78f9      	ldrb	r1, [r7, #3]
 8008e9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ea0:	9303      	str	r3, [sp, #12]
 8008ea2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ea4:	9302      	str	r3, [sp, #8]
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea8:	9301      	str	r3, [sp, #4]
 8008eaa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	4623      	mov	r3, r4
 8008eb2:	f7f8 fe89 	bl	8001bc8 <HAL_HCD_HC_SubmitRequest>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008eba:	7bfb      	ldrb	r3, [r7, #15]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f000 f86d 	bl	8008f9c <USBH_Get_USB_Status>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd90      	pop	{r4, r7, pc}

08008ed0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ee2:	78fa      	ldrb	r2, [r7, #3]
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7f9 f91d 	bl	8002126 <HAL_HCD_HC_GetURBState>
 8008eec:	4603      	mov	r3, r0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b082      	sub	sp, #8
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	460b      	mov	r3, r1
 8008f00:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d103      	bne.n	8008f14 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008f0c:	78fb      	ldrb	r3, [r7, #3]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f000 f870 	bl	8008ff4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008f14:	20c8      	movs	r0, #200	; 0xc8
 8008f16:	f7f8 fa6f 	bl	80013f8 <HAL_Delay>
  return USBH_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	70fb      	strb	r3, [r7, #3]
 8008f30:	4613      	mov	r3, r2
 8008f32:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f3a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008f3c:	78fb      	ldrb	r3, [r7, #3]
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	212c      	movs	r1, #44	; 0x2c
 8008f42:	fb01 f303 	mul.w	r3, r1, r3
 8008f46:	4413      	add	r3, r2
 8008f48:	333b      	adds	r3, #59	; 0x3b
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d009      	beq.n	8008f64 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008f50:	78fb      	ldrb	r3, [r7, #3]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	212c      	movs	r1, #44	; 0x2c
 8008f56:	fb01 f303 	mul.w	r3, r1, r3
 8008f5a:	4413      	add	r3, r2
 8008f5c:	3354      	adds	r3, #84	; 0x54
 8008f5e:	78ba      	ldrb	r2, [r7, #2]
 8008f60:	701a      	strb	r2, [r3, #0]
 8008f62:	e008      	b.n	8008f76 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008f64:	78fb      	ldrb	r3, [r7, #3]
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	212c      	movs	r1, #44	; 0x2c
 8008f6a:	fb01 f303 	mul.w	r3, r1, r3
 8008f6e:	4413      	add	r3, r2
 8008f70:	3355      	adds	r3, #85	; 0x55
 8008f72:	78ba      	ldrb	r2, [r7, #2]
 8008f74:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3714      	adds	r7, #20
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7f8 fa33 	bl	80013f8 <HAL_Delay>
}
 8008f92:	bf00      	nop
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
	...

08008f9c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008faa:	79fb      	ldrb	r3, [r7, #7]
 8008fac:	2b03      	cmp	r3, #3
 8008fae:	d817      	bhi.n	8008fe0 <USBH_Get_USB_Status+0x44>
 8008fb0:	a201      	add	r2, pc, #4	; (adr r2, 8008fb8 <USBH_Get_USB_Status+0x1c>)
 8008fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb6:	bf00      	nop
 8008fb8:	08008fc9 	.word	0x08008fc9
 8008fbc:	08008fcf 	.word	0x08008fcf
 8008fc0:	08008fd5 	.word	0x08008fd5
 8008fc4:	08008fdb 	.word	0x08008fdb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	73fb      	strb	r3, [r7, #15]
    break;
 8008fcc:	e00b      	b.n	8008fe6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008fce:	2302      	movs	r3, #2
 8008fd0:	73fb      	strb	r3, [r7, #15]
    break;
 8008fd2:	e008      	b.n	8008fe6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	73fb      	strb	r3, [r7, #15]
    break;
 8008fd8:	e005      	b.n	8008fe6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008fda:	2302      	movs	r3, #2
 8008fdc:	73fb      	strb	r3, [r7, #15]
    break;
 8008fde:	e002      	b.n	8008fe6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe4:	bf00      	nop
  }
  return usb_status;
 8008fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3714      	adds	r7, #20
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008ffe:	79fb      	ldrb	r3, [r7, #7]
 8009000:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009002:	79fb      	ldrb	r3, [r7, #7]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d102      	bne.n	800900e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009008:	2300      	movs	r3, #0
 800900a:	73fb      	strb	r3, [r7, #15]
 800900c:	e001      	b.n	8009012 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800900e:	2301      	movs	r3, #1
 8009010:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009012:	7bfb      	ldrb	r3, [r7, #15]
 8009014:	461a      	mov	r2, r3
 8009016:	2101      	movs	r1, #1
 8009018:	4803      	ldr	r0, [pc, #12]	; (8009028 <MX_DriverVbusFS+0x34>)
 800901a:	f7f8 fca7 	bl	800196c <HAL_GPIO_WritePin>
}
 800901e:	bf00      	nop
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	40020800 	.word	0x40020800

0800902c <malloc>:
 800902c:	4b02      	ldr	r3, [pc, #8]	; (8009038 <malloc+0xc>)
 800902e:	4601      	mov	r1, r0
 8009030:	6818      	ldr	r0, [r3, #0]
 8009032:	f000 b82b 	b.w	800908c <_malloc_r>
 8009036:	bf00      	nop
 8009038:	20000084 	.word	0x20000084

0800903c <free>:
 800903c:	4b02      	ldr	r3, [pc, #8]	; (8009048 <free+0xc>)
 800903e:	4601      	mov	r1, r0
 8009040:	6818      	ldr	r0, [r3, #0]
 8009042:	f000 b8f3 	b.w	800922c <_free_r>
 8009046:	bf00      	nop
 8009048:	20000084 	.word	0x20000084

0800904c <sbrk_aligned>:
 800904c:	b570      	push	{r4, r5, r6, lr}
 800904e:	4e0e      	ldr	r6, [pc, #56]	; (8009088 <sbrk_aligned+0x3c>)
 8009050:	460c      	mov	r4, r1
 8009052:	6831      	ldr	r1, [r6, #0]
 8009054:	4605      	mov	r5, r0
 8009056:	b911      	cbnz	r1, 800905e <sbrk_aligned+0x12>
 8009058:	f000 f8ac 	bl	80091b4 <_sbrk_r>
 800905c:	6030      	str	r0, [r6, #0]
 800905e:	4621      	mov	r1, r4
 8009060:	4628      	mov	r0, r5
 8009062:	f000 f8a7 	bl	80091b4 <_sbrk_r>
 8009066:	1c43      	adds	r3, r0, #1
 8009068:	d00a      	beq.n	8009080 <sbrk_aligned+0x34>
 800906a:	1cc4      	adds	r4, r0, #3
 800906c:	f024 0403 	bic.w	r4, r4, #3
 8009070:	42a0      	cmp	r0, r4
 8009072:	d007      	beq.n	8009084 <sbrk_aligned+0x38>
 8009074:	1a21      	subs	r1, r4, r0
 8009076:	4628      	mov	r0, r5
 8009078:	f000 f89c 	bl	80091b4 <_sbrk_r>
 800907c:	3001      	adds	r0, #1
 800907e:	d101      	bne.n	8009084 <sbrk_aligned+0x38>
 8009080:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009084:	4620      	mov	r0, r4
 8009086:	bd70      	pop	{r4, r5, r6, pc}
 8009088:	200009b4 	.word	0x200009b4

0800908c <_malloc_r>:
 800908c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009090:	1ccd      	adds	r5, r1, #3
 8009092:	f025 0503 	bic.w	r5, r5, #3
 8009096:	3508      	adds	r5, #8
 8009098:	2d0c      	cmp	r5, #12
 800909a:	bf38      	it	cc
 800909c:	250c      	movcc	r5, #12
 800909e:	2d00      	cmp	r5, #0
 80090a0:	4607      	mov	r7, r0
 80090a2:	db01      	blt.n	80090a8 <_malloc_r+0x1c>
 80090a4:	42a9      	cmp	r1, r5
 80090a6:	d905      	bls.n	80090b4 <_malloc_r+0x28>
 80090a8:	230c      	movs	r3, #12
 80090aa:	603b      	str	r3, [r7, #0]
 80090ac:	2600      	movs	r6, #0
 80090ae:	4630      	mov	r0, r6
 80090b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009188 <_malloc_r+0xfc>
 80090b8:	f000 f868 	bl	800918c <__malloc_lock>
 80090bc:	f8d8 3000 	ldr.w	r3, [r8]
 80090c0:	461c      	mov	r4, r3
 80090c2:	bb5c      	cbnz	r4, 800911c <_malloc_r+0x90>
 80090c4:	4629      	mov	r1, r5
 80090c6:	4638      	mov	r0, r7
 80090c8:	f7ff ffc0 	bl	800904c <sbrk_aligned>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	4604      	mov	r4, r0
 80090d0:	d155      	bne.n	800917e <_malloc_r+0xf2>
 80090d2:	f8d8 4000 	ldr.w	r4, [r8]
 80090d6:	4626      	mov	r6, r4
 80090d8:	2e00      	cmp	r6, #0
 80090da:	d145      	bne.n	8009168 <_malloc_r+0xdc>
 80090dc:	2c00      	cmp	r4, #0
 80090de:	d048      	beq.n	8009172 <_malloc_r+0xe6>
 80090e0:	6823      	ldr	r3, [r4, #0]
 80090e2:	4631      	mov	r1, r6
 80090e4:	4638      	mov	r0, r7
 80090e6:	eb04 0903 	add.w	r9, r4, r3
 80090ea:	f000 f863 	bl	80091b4 <_sbrk_r>
 80090ee:	4581      	cmp	r9, r0
 80090f0:	d13f      	bne.n	8009172 <_malloc_r+0xe6>
 80090f2:	6821      	ldr	r1, [r4, #0]
 80090f4:	1a6d      	subs	r5, r5, r1
 80090f6:	4629      	mov	r1, r5
 80090f8:	4638      	mov	r0, r7
 80090fa:	f7ff ffa7 	bl	800904c <sbrk_aligned>
 80090fe:	3001      	adds	r0, #1
 8009100:	d037      	beq.n	8009172 <_malloc_r+0xe6>
 8009102:	6823      	ldr	r3, [r4, #0]
 8009104:	442b      	add	r3, r5
 8009106:	6023      	str	r3, [r4, #0]
 8009108:	f8d8 3000 	ldr.w	r3, [r8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d038      	beq.n	8009182 <_malloc_r+0xf6>
 8009110:	685a      	ldr	r2, [r3, #4]
 8009112:	42a2      	cmp	r2, r4
 8009114:	d12b      	bne.n	800916e <_malloc_r+0xe2>
 8009116:	2200      	movs	r2, #0
 8009118:	605a      	str	r2, [r3, #4]
 800911a:	e00f      	b.n	800913c <_malloc_r+0xb0>
 800911c:	6822      	ldr	r2, [r4, #0]
 800911e:	1b52      	subs	r2, r2, r5
 8009120:	d41f      	bmi.n	8009162 <_malloc_r+0xd6>
 8009122:	2a0b      	cmp	r2, #11
 8009124:	d917      	bls.n	8009156 <_malloc_r+0xca>
 8009126:	1961      	adds	r1, r4, r5
 8009128:	42a3      	cmp	r3, r4
 800912a:	6025      	str	r5, [r4, #0]
 800912c:	bf18      	it	ne
 800912e:	6059      	strne	r1, [r3, #4]
 8009130:	6863      	ldr	r3, [r4, #4]
 8009132:	bf08      	it	eq
 8009134:	f8c8 1000 	streq.w	r1, [r8]
 8009138:	5162      	str	r2, [r4, r5]
 800913a:	604b      	str	r3, [r1, #4]
 800913c:	4638      	mov	r0, r7
 800913e:	f104 060b 	add.w	r6, r4, #11
 8009142:	f000 f829 	bl	8009198 <__malloc_unlock>
 8009146:	f026 0607 	bic.w	r6, r6, #7
 800914a:	1d23      	adds	r3, r4, #4
 800914c:	1af2      	subs	r2, r6, r3
 800914e:	d0ae      	beq.n	80090ae <_malloc_r+0x22>
 8009150:	1b9b      	subs	r3, r3, r6
 8009152:	50a3      	str	r3, [r4, r2]
 8009154:	e7ab      	b.n	80090ae <_malloc_r+0x22>
 8009156:	42a3      	cmp	r3, r4
 8009158:	6862      	ldr	r2, [r4, #4]
 800915a:	d1dd      	bne.n	8009118 <_malloc_r+0x8c>
 800915c:	f8c8 2000 	str.w	r2, [r8]
 8009160:	e7ec      	b.n	800913c <_malloc_r+0xb0>
 8009162:	4623      	mov	r3, r4
 8009164:	6864      	ldr	r4, [r4, #4]
 8009166:	e7ac      	b.n	80090c2 <_malloc_r+0x36>
 8009168:	4634      	mov	r4, r6
 800916a:	6876      	ldr	r6, [r6, #4]
 800916c:	e7b4      	b.n	80090d8 <_malloc_r+0x4c>
 800916e:	4613      	mov	r3, r2
 8009170:	e7cc      	b.n	800910c <_malloc_r+0x80>
 8009172:	230c      	movs	r3, #12
 8009174:	603b      	str	r3, [r7, #0]
 8009176:	4638      	mov	r0, r7
 8009178:	f000 f80e 	bl	8009198 <__malloc_unlock>
 800917c:	e797      	b.n	80090ae <_malloc_r+0x22>
 800917e:	6025      	str	r5, [r4, #0]
 8009180:	e7dc      	b.n	800913c <_malloc_r+0xb0>
 8009182:	605b      	str	r3, [r3, #4]
 8009184:	deff      	udf	#255	; 0xff
 8009186:	bf00      	nop
 8009188:	200009b0 	.word	0x200009b0

0800918c <__malloc_lock>:
 800918c:	4801      	ldr	r0, [pc, #4]	; (8009194 <__malloc_lock+0x8>)
 800918e:	f000 b84b 	b.w	8009228 <__retarget_lock_acquire_recursive>
 8009192:	bf00      	nop
 8009194:	20000af0 	.word	0x20000af0

08009198 <__malloc_unlock>:
 8009198:	4801      	ldr	r0, [pc, #4]	; (80091a0 <__malloc_unlock+0x8>)
 800919a:	f000 b846 	b.w	800922a <__retarget_lock_release_recursive>
 800919e:	bf00      	nop
 80091a0:	20000af0 	.word	0x20000af0

080091a4 <memset>:
 80091a4:	4402      	add	r2, r0
 80091a6:	4603      	mov	r3, r0
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d100      	bne.n	80091ae <memset+0xa>
 80091ac:	4770      	bx	lr
 80091ae:	f803 1b01 	strb.w	r1, [r3], #1
 80091b2:	e7f9      	b.n	80091a8 <memset+0x4>

080091b4 <_sbrk_r>:
 80091b4:	b538      	push	{r3, r4, r5, lr}
 80091b6:	4d06      	ldr	r5, [pc, #24]	; (80091d0 <_sbrk_r+0x1c>)
 80091b8:	2300      	movs	r3, #0
 80091ba:	4604      	mov	r4, r0
 80091bc:	4608      	mov	r0, r1
 80091be:	602b      	str	r3, [r5, #0]
 80091c0:	f7f8 f836 	bl	8001230 <_sbrk>
 80091c4:	1c43      	adds	r3, r0, #1
 80091c6:	d102      	bne.n	80091ce <_sbrk_r+0x1a>
 80091c8:	682b      	ldr	r3, [r5, #0]
 80091ca:	b103      	cbz	r3, 80091ce <_sbrk_r+0x1a>
 80091cc:	6023      	str	r3, [r4, #0]
 80091ce:	bd38      	pop	{r3, r4, r5, pc}
 80091d0:	20000af4 	.word	0x20000af4

080091d4 <__errno>:
 80091d4:	4b01      	ldr	r3, [pc, #4]	; (80091dc <__errno+0x8>)
 80091d6:	6818      	ldr	r0, [r3, #0]
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	20000084 	.word	0x20000084

080091e0 <__libc_init_array>:
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	4d0d      	ldr	r5, [pc, #52]	; (8009218 <__libc_init_array+0x38>)
 80091e4:	4c0d      	ldr	r4, [pc, #52]	; (800921c <__libc_init_array+0x3c>)
 80091e6:	1b64      	subs	r4, r4, r5
 80091e8:	10a4      	asrs	r4, r4, #2
 80091ea:	2600      	movs	r6, #0
 80091ec:	42a6      	cmp	r6, r4
 80091ee:	d109      	bne.n	8009204 <__libc_init_array+0x24>
 80091f0:	4d0b      	ldr	r5, [pc, #44]	; (8009220 <__libc_init_array+0x40>)
 80091f2:	4c0c      	ldr	r4, [pc, #48]	; (8009224 <__libc_init_array+0x44>)
 80091f4:	f000 f866 	bl	80092c4 <_init>
 80091f8:	1b64      	subs	r4, r4, r5
 80091fa:	10a4      	asrs	r4, r4, #2
 80091fc:	2600      	movs	r6, #0
 80091fe:	42a6      	cmp	r6, r4
 8009200:	d105      	bne.n	800920e <__libc_init_array+0x2e>
 8009202:	bd70      	pop	{r4, r5, r6, pc}
 8009204:	f855 3b04 	ldr.w	r3, [r5], #4
 8009208:	4798      	blx	r3
 800920a:	3601      	adds	r6, #1
 800920c:	e7ee      	b.n	80091ec <__libc_init_array+0xc>
 800920e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009212:	4798      	blx	r3
 8009214:	3601      	adds	r6, #1
 8009216:	e7f2      	b.n	80091fe <__libc_init_array+0x1e>
 8009218:	08009314 	.word	0x08009314
 800921c:	08009314 	.word	0x08009314
 8009220:	08009314 	.word	0x08009314
 8009224:	08009318 	.word	0x08009318

08009228 <__retarget_lock_acquire_recursive>:
 8009228:	4770      	bx	lr

0800922a <__retarget_lock_release_recursive>:
 800922a:	4770      	bx	lr

0800922c <_free_r>:
 800922c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800922e:	2900      	cmp	r1, #0
 8009230:	d044      	beq.n	80092bc <_free_r+0x90>
 8009232:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009236:	9001      	str	r0, [sp, #4]
 8009238:	2b00      	cmp	r3, #0
 800923a:	f1a1 0404 	sub.w	r4, r1, #4
 800923e:	bfb8      	it	lt
 8009240:	18e4      	addlt	r4, r4, r3
 8009242:	f7ff ffa3 	bl	800918c <__malloc_lock>
 8009246:	4a1e      	ldr	r2, [pc, #120]	; (80092c0 <_free_r+0x94>)
 8009248:	9801      	ldr	r0, [sp, #4]
 800924a:	6813      	ldr	r3, [r2, #0]
 800924c:	b933      	cbnz	r3, 800925c <_free_r+0x30>
 800924e:	6063      	str	r3, [r4, #4]
 8009250:	6014      	str	r4, [r2, #0]
 8009252:	b003      	add	sp, #12
 8009254:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009258:	f7ff bf9e 	b.w	8009198 <__malloc_unlock>
 800925c:	42a3      	cmp	r3, r4
 800925e:	d908      	bls.n	8009272 <_free_r+0x46>
 8009260:	6825      	ldr	r5, [r4, #0]
 8009262:	1961      	adds	r1, r4, r5
 8009264:	428b      	cmp	r3, r1
 8009266:	bf01      	itttt	eq
 8009268:	6819      	ldreq	r1, [r3, #0]
 800926a:	685b      	ldreq	r3, [r3, #4]
 800926c:	1949      	addeq	r1, r1, r5
 800926e:	6021      	streq	r1, [r4, #0]
 8009270:	e7ed      	b.n	800924e <_free_r+0x22>
 8009272:	461a      	mov	r2, r3
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	b10b      	cbz	r3, 800927c <_free_r+0x50>
 8009278:	42a3      	cmp	r3, r4
 800927a:	d9fa      	bls.n	8009272 <_free_r+0x46>
 800927c:	6811      	ldr	r1, [r2, #0]
 800927e:	1855      	adds	r5, r2, r1
 8009280:	42a5      	cmp	r5, r4
 8009282:	d10b      	bne.n	800929c <_free_r+0x70>
 8009284:	6824      	ldr	r4, [r4, #0]
 8009286:	4421      	add	r1, r4
 8009288:	1854      	adds	r4, r2, r1
 800928a:	42a3      	cmp	r3, r4
 800928c:	6011      	str	r1, [r2, #0]
 800928e:	d1e0      	bne.n	8009252 <_free_r+0x26>
 8009290:	681c      	ldr	r4, [r3, #0]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	6053      	str	r3, [r2, #4]
 8009296:	440c      	add	r4, r1
 8009298:	6014      	str	r4, [r2, #0]
 800929a:	e7da      	b.n	8009252 <_free_r+0x26>
 800929c:	d902      	bls.n	80092a4 <_free_r+0x78>
 800929e:	230c      	movs	r3, #12
 80092a0:	6003      	str	r3, [r0, #0]
 80092a2:	e7d6      	b.n	8009252 <_free_r+0x26>
 80092a4:	6825      	ldr	r5, [r4, #0]
 80092a6:	1961      	adds	r1, r4, r5
 80092a8:	428b      	cmp	r3, r1
 80092aa:	bf04      	itt	eq
 80092ac:	6819      	ldreq	r1, [r3, #0]
 80092ae:	685b      	ldreq	r3, [r3, #4]
 80092b0:	6063      	str	r3, [r4, #4]
 80092b2:	bf04      	itt	eq
 80092b4:	1949      	addeq	r1, r1, r5
 80092b6:	6021      	streq	r1, [r4, #0]
 80092b8:	6054      	str	r4, [r2, #4]
 80092ba:	e7ca      	b.n	8009252 <_free_r+0x26>
 80092bc:	b003      	add	sp, #12
 80092be:	bd30      	pop	{r4, r5, pc}
 80092c0:	200009b0 	.word	0x200009b0

080092c4 <_init>:
 80092c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c6:	bf00      	nop
 80092c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ca:	bc08      	pop	{r3}
 80092cc:	469e      	mov	lr, r3
 80092ce:	4770      	bx	lr

080092d0 <_fini>:
 80092d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d2:	bf00      	nop
 80092d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092d6:	bc08      	pop	{r3}
 80092d8:	469e      	mov	lr, r3
 80092da:	4770      	bx	lr
